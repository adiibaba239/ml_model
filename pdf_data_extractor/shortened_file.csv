Unformatted_Text,Formatted_Text
"page_content='Data Communication and Computer Network' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 0}","**Data Communication and Computer Network**

**Metadata:**

* Source: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf
* Page: 0

**Introduction**

Data communication refers to the exchange of information between two devices over a communication channel. A computer network is an interconnection of multiple computers for the purpose of sharing resources and information.

**Types of Data Communication**

* **Synchronous communication:** Data is transmitted in a continuous stream, with each character waiting for the next before being sent.
* **Asynchronous communication:** Data is transmitted in bursts, with characters being sent independently of each other.
* **Simplex communication:** Data flows in one direction only.
* **Half-duplex communication:** Data can flow in both directions, but not simultaneously.
* **Full-duplex communication:** Data can flow in both directions simultaneously.

**Network Topologies**

* **Bus topology:** All devices are connected to a single shared transmission medium.
* **Star topology:** All devices are connected to a central hub or switch.
* **Ring topology:** Each device is connected to two other devices, forming a closed loop.
* **Mesh topology:** Every device is connected to every other device.

**Network Protocols**

* **Transmission Control Protocol (TCP):** Ensures reliable and error-free data delivery.
* **Internet Protocol (IP):** Defines the addressing and routing of data packets.
* **Hypertext Transfer Protocol (HTTP):** Used for communication between web browsers and web servers.

**Network Devices**

* **Routers:** Connect different networks and route traffic between them.
* **Switches:** Connect devices within a local network.
* **Bridges:** Connect different segments of a network.
* **Firewalls:** Protect networks from unauthorized access.

**Applications of Computer Networks**

* **Resource sharing:** Allows users to access files, applications, and other resources from remote locations.
* **Communication:** Facilitates email, instant messaging, and video conferencing.
* **E-commerce:** Enables online shopping and business transactions.
* **Education:** Provides access to online learning resources and collaboration tools.
* **Entertainment:** Offers streaming services, online gaming, and social media.

**Conclusion**

Data communication and computer networks play a crucial role in modern society, enabling the exchange of information and facilitating a wide range of applications."
"page_content='Data Communication and Computer Network 
 i  
About the Tutorial 
This tutorial gives very good understanding on Data Communication and Computer 
Networks. After completing this tutorial, you will find yourself at a moderate level 
of expertise in knowing DCN, from where you can take yourself to next levels. 
 
 
Audience 
This tutorial is prepared for the beginners to help them understand  Data 
Communication and Computer Networks.  
 
Prerequisites 
Before proceeding with this tutorial, you need a basic understanding of Computer. 
You should know the basics of input and output devices, primary and secondary 
memory, and operating system.  
 
Disclaimer & Copyright 
 Copyright 2014 by Tutorials Point (I) Pvt. Ltd.  
All the content and graphics published in this e-book are the property of Tutorials 
Point (I) Pvt. Ltd. The user of this e -book is prohibited to reuse, retain, copy, 
distribute or republish any contents or a part of contents of this e -book in any 
manner without written consent of the publisher. We strive to update the contents 
of our website and tutorials as timely and as precisely as possible, how ever, the 
contents may contain inaccuracies or errors. Tutorials Point (I) Pvt. Ltd. provides 
no guarantee regarding the accuracy, timeliness or completeness of our website 
or its contents including this tutorial. If you discover any errors on our website or 
in this tutorial, please notify us at contact@tutorialspoint.com.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 1}","**Data Communication and Computer Network**

**About the Tutorial**
This tutorial provides a comprehensive understanding of data communication and computer networks. After completing this tutorial, you will gain intermediate expertise in Data Communication and Computer Network (DCN) concepts, which will serve as a foundation for further advancements in the field.

**Audience**
This tutorial is intended for beginners seeking a foundational understanding of data communication and computer networks.

**Prerequisites**
Prior knowledge of computer fundamentals, including input/output devices, primary and secondary memory, and operating systems, is recommended.

**Metadata**
- **Source**: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf
- **Page**: 1"
"page_content='Data Communication and Computer Network 
 ii  
Contents 
About the Tutorial ..................................................................................................................................... i 
Audience .................................................................................................................................................... i 
Prerequisites .............................................................................................................................................. i 
Disclaimer & Copyright .............................................................................................................................. i 
Contents ................................................................................................................................................... ii 
1. OVERVIEW ................................ ................................ ................................ ............................  1 
Classification of Computer Networks ........................................................................................................ 1 
Geographical Span .................................................................................................................................... 1 
Inter-Connectivity ..................................................................................................................................... 1 
Administration .......................................................................................................................................... 2 
Network Architecture ............................................................................................................................... 2 
Network Applications ............................................................................................................................... 2 
2. TYPES OF COMPUTER NETWORKS ................................ ................................ ........................  3 
Personal Area Network ............................................................................................................................. 3 
Local Area Network................................................................................................................................... 3 
Metropolitan Area Network ..................................................................................................................... 4 
Wide Area Network .................................................................................................................................. 5 
Internetwork............................................................................................................................................. 6 
3. NETWORK LAN TECHNOLOGIES ................................ ................................ ............................  8 
Ethernet .................................................................................................................................................... 8 
Fast-Ethernet ............................................................................................................................................ 8 
Giga-Ethernet ............................................................................................................................................ 8 
Virtual LAN................................................................................................................................................ 9 
4. COMPUTER NETWORK TOPOLOGIES ................................ ................................ ................... 10 
Point-to-Point ......................................................................................................................................... 10 
Bus Topology .......................................................................................................................................... 10' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 2}","**Data Communication and Computer Network**

**Table of Contents**

**About the Tutorial**

* Scope
* Audience
* Prerequisites
* Disclaimer & Copyright

**1. OVERVIEW**

* Classification of Computer Networks
    * Geographical Span
    * Inter-Connectivity
    * Administration
* Network Architecture
* Network Applications

**2. TYPES OF COMPUTER NETWORKS**

* Personal Area Network
* Local Area Network
* Metropolitan Area Network
* Wide Area Network
* Internetwork

**3. NETWORK LAN TECHNOLOGIES**

* Ethernet
* Fast-Ethernet
* Giga-Ethernet
* Virtual LAN

**4. COMPUTER NETWORK TOPOLOGIES**

* Point-to-Point
* Bus Topology"
"page_content='Data Communication and Computer Network 
 iii  
Star Topology .......................................................................................................................................... 11 
Ring Topology ......................................................................................................................................... 12 
Mesh Topology ....................................................................................................................................... 13 
Tree Topology ......................................................................................................................................... 14 
Daisy Chain ............................................................................................................................................. 15 
Hybrid Topology...................................................................................................................................... 15 
5. COMPUTER NETWORK MODEL ................................ ................................ ...........................  17 
Layered Tasks.......................................................................................................................................... 17 
OSI Model ............................................................................................................................................... 18 
Internet Model ....................................................................................................................................... 19 
6. COMPUTER NETWORK SECURITY ................................ ................................ ........................  20 
Secret Key Encryption ............................................................................................................................. 21 
Public Key Encryption ............................................................................................................................. 21 
Message Digest ....................................................................................................................................... 21 
7. PHYSICAL LAYER INTRODUCTION ................................ ................................ ........................  22 
Signals ..................................................................................................................................................... 22 
Transmission Impairment ....................................................................................................................... 22 
Transmission Media ................................................................................................................................ 23 
Channel Capacity .................................................................................................................................... 23 
Multiplexing............................................................................................................................................ 24 
Switching ................................................................................................................................................ 24 
8. DIGITAL TRANSMISSION ................................ ................................ ................................ ...... 25 
Digital-to-Digital Conversion ................................................................................................................... 25 
Line Coding ............................................................................................................................................. 25 
Unipolar Encoding ................................................................................................................................... 26 
Polar Encoding ........................................................................................................................................ 26 
Bipolar Encoding ..................................................................................................................................... 28' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 3}","**Data Communication and Computer Network**

**Page 3**

**2. NETWORK TOPOLOGY**

**Star Topology**

* All devices are connected to a central node.
* The central node acts as a hub, switch, or router.
* Advantages: Easy to manage and expand, fault isolation is simple.
* Disadvantages: Central node failure affects the entire network.

**Ring Topology**

* Devices are connected in a ring-shaped loop.
* Each device receives data from the previous device and forwards it to the next.
* Advantages: Reliable, no single point of failure.
* Disadvantages: Difficult to add or remove devices, a break in the ring affects the entire network.

**Mesh Topology**

* Each device is connected to every other device.
* Provides multiple paths for data transmission.
* Advantages: Reliable, redundant paths, fault-tolerant.
* Disadvantages: Complex to manage, high cost of implementation.

**Tree Topology**

* A hierarchical structure, where a central root node connects to multiple child nodes.
* Child nodes can have their own child nodes, forming a tree-like structure.
* Advantages: Easy to manage and expand, good fault isolation.
* Disadvantages: Central root node failure affects the entire network.

**Daisy Chain**

* Similar to the star topology, but devices are connected in a chain-like manner.
* Each device is connected to two other devices.
* Advantages: Simple and cost-effective.
* Disadvantages: A single point of failure affects a portion of the network.

**Hybrid Topology**

* A combination of two or more different topologies.
* Provides flexibility and can address specific network requirements.
* Example: A star topology within a ring topology.

**5. COMPUTER NETWORK MODEL**

**Layered Tasks**

* Divide the network into layers to facilitate design and implementation.
* Each layer provides specific functionality and interfaces with the adjacent layers.

**OSI Model**

* Seven-layer architecture developed by the International Organization for Standardization (ISO).
* **Application Layer:** Provides user applications with network services, e.g., file transfer, email.
* **Presentation Layer:** Translates data formats between applications and the network.
* **Session Layer:** Establishes and manages communication sessions between applications.
* **Transport Layer:** Provides reliable data transfer and flow control, e.g., TCP, UDP.
* **Network Layer:** Responsible for routing data packets to their destination.
* **Data Link Layer:** Encapsulates data into frames and ensures their correct transmission.
* **Physical Layer:** Defines the physical characteristics of the network, e.g., cables, signals.

**Internet Model**

* Four-layer architecture used in the Internet.
* **Application Layer:** Similar to the OSI Application Layer.
* **Transport Layer:** Similar to the OSI Transport Layer.
* **Network Layer:** Combines the OSI Network and Data Link Layers, responsible for routing packets.
* **Link Layer:** Implements the physical transmission of data."
"page_content='Data Communication and Computer Network 
 iv  
Block Coding ........................................................................................................................................... 28 
Analog-to-Digital Conversion .................................................................................................................. 29 
Sampling ................................................................................................................................................. 29 
Quantization ........................................................................................................................................... 29 
Encoding ................................................................................................................................................. 30 
Transmission Modes ............................................................................................................................... 30 
9. ANALOG TRANSMISSION ................................ ................................ ................................ ..... 32 
Digital-to-Analog Conversion .................................................................................................................. 32 
Analog-to-Analog Conversion ................................................................................................................. 34 
10. TRANSMISSION MEDIA................................ ................................ ................................ ........ 38 
Magnetic Media ...................................................................................................................................... 38 
Twisted Pair Cable .................................................................................................................................. 38 
Coaxial Cable .......................................................................................................................................... 39 
Power Lines ............................................................................................................................................ 40 
Fiber Optics ............................................................................................................................................. 40 
11. WIRELESS TRANSMISSION ................................ ................................ ................................ ... 42 
Radio Transmission ................................................................................................................................. 42 
Microwave Transmission ........................................................................................................................ 43 
Infrared Transmission ............................................................................................................................. 44 
Light Transmission .................................................................................................................................. 44 
12. MULTIPLEXING ................................ ................................ ................................ .................... 46 
Frequency Division Multiplexing ............................................................................................................. 46 
Time Division Multiplexing ..................................................................................................................... 46 
Wavelength Division Multiplexing .......................................................................................................... 47 
Code Division Multiplexing ..................................................................................................................... 48 
13. SWITCHING ................................ ................................ ................................ .........................  49 
Circuit Switching ..................................................................................................................................... 49' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 4}","### Data Communication and Computer Network

**Metadata:**

* Page: 4
* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

**Sections:**

**9. ANALOG TRANSMISSION**

**Digital-to-Analog Conversion**

**Analog-to-Analog Conversion**

**10. TRANSMISSION MEDIA**

**Magnetic Media**

**Twisted Pair Cable**

**Coaxial Cable**

**Power Lines**

**Fiber Optics**

**11. WIRELESS TRANSMISSION**

**Radio Transmission**

**Microwave Transmission**

**Infrared Transmission**

**Light Transmission**

**12. MULTIPLEXING**

**Frequency Division Multiplexing**

**Time Division Multiplexing**

**Wavelength Division Multiplexing**

**Code Division Multiplexing**

**13. SWITCHING**

**Circuit Switching**"
"page_content='Data Communication and Computer Network 
 v  
Message Switching.................................................................................................................................. 50 
Packet Switching ..................................................................................................................................... 51 
14. DATA LINK LAYER INTRODUCTION ................................ ................................ ...................... 53 
Functionality of Data-link Layer .............................................................................................................. 53 
15. ERROR DETECTION AND CORRECTION ................................ ................................ ................ 55 
Types of Errors ........................................................................................................................................ 55 
Error Detection ....................................................................................................................................... 56 
Error Correction ...................................................................................................................................... 57 
16. DATA LINK CONTROL AND PROTOCOLS ................................ ................................ .............. 59 
Flow Control ........................................................................................................................................... 59 
Error Control ........................................................................................................................................... 60 
17. NETWORK LAYER INTRODUCTION ................................ ................................ .......................  64 
Layer-3 Functionalities ............................................................................................................................ 64 
Network Layer Features .......................................................................................................................... 64 
18. NETWORK ADDRESSING ................................ ................................ ................................ ...... 65 
19. NETWORK ROUTING ................................ ................................ ................................ ........... 67 
Unicast routing ....................................................................................................................................... 67 
Broadcast routing ................................................................................................................................... 68 
Multicast Routing.................................................................................................................................... 69 
Anycast Routing ...................................................................................................................................... 69 
Unicast Routing Protocols ....................................................................................................................... 70 
Multicast Routing Protocols .................................................................................................................... 70 
Routing Algorithms ................................................................................................................................. 71 
20. INTERNETWORKING ................................ ................................ ................................ ............ 72 
Tunneling ................................................................................................................................................ 72 
Packet Fragmentation ............................................................................................................................. 73' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 5}","### Data Communication and Computer Network

**Page 5**

**14. DATA LINK LAYER INTRODUCTION**

**Functionality of Data-link Layer**

- **Framing:** Divides the data into manageable units called frames.
- **Addressing:** Adds the source and destination addresses to each frame.
- **Error control:** Detects and corrects errors that may occur during transmission.
- **Flow control:** Regulates the flow of data between devices to prevent data loss.
- **Access control:** Manages how multiple devices share a common transmission medium.

**15. ERROR DETECTION AND CORRECTION**

**Types of Errors**

- **Bit errors:** Single bits are reversed during transmission.
- **Burst errors:** Multiple consecutive bits are reversed.
- **Synchronization errors:** The sender and receiver lose synchronization.

**Error Detection**

- **Parity check:** Adds an extra bit to each frame to make the total number of 1s even or odd.
- **Cyclic redundancy check (CRC):** Computes a checksum based on the frame's contents and adds it to the frame.

**Error Correction**

- **Automatic repeat request (ARQ):** The receiver requests the sender to retransmit corrupted frames.
- **Forward error correction (FEC):** The sender adds redundant information to the frame to allow the receiver to correct errors without retransmission.

**16. DATA LINK CONTROL AND PROTOCOLS**

**Flow Control**

- **Stop-and-wait:** The sender waits for an acknowledgment from the receiver before sending the next frame.
- **Sliding window:** The sender can send multiple frames before receiving an acknowledgment.

**Error Control**

- **Simplex:** Data flows in one direction only.
- **Half-duplex:** Data can flow in both directions, but only one device can transmit at a time.
- **Full-duplex:** Data can flow in both directions simultaneously.

**17. NETWORK LAYER INTRODUCTION**

**Layer-3 Functionalities**

- **Routing:** Determines the path packets take through the network.
- **Address resolution:** Translates logical addresses to physical addresses.
- **Congestion control:** Prevents network overload by regulating traffic flow.

**Network Layer Features**

- **Logical addressing:** Assigns unique addresses to devices on the network.
- **Packet switching:** Divides data into packets and forwards them independently.
- **Routing algorithms:** Determine the best path for packets to take.

**18. NETWORK ADDRESSING**

- **IPv4:** 32-bit address format, divided into four octets.
- **IPv6:** 128-bit address format, divided into eight hextets.

**19. NETWORK ROUTING**

**Unicast routing:** Sends packets to a specific destination device.
**Broadcast routing:** Sends packets to all devices on the network.
**Multicast Routing:** Sends packets to a group of specific devices.
**Anycast Routing:** Sends packets to the nearest device from a group of specific devices.

**Unicast Routing Protocols**

- RIP (Routing Information Protocol)
- OSPF (Open Shortest Path First)
- BGP (Border Gateway Protocol)

**Multicast Routing Protocols**

- PIM (Protocol Independent Multicast)
- DVMRP (Distance Vector Multicast Routing Protocol)
- MSDP (Multicast Source Discovery Protocol)

**Routing Algorithms**

- **Distance vector routing:** Each router maintains a table of distances to all other routers.
- **Link-state routing:** Each router broadcasts its state to all other routers, which use it to create a complete network topology.

**20. INTERNETWORKING**

**Tunneling**

- **Encapsulation:** Encloses packets from one network within packets from another network.
- **Decapsulation:** Removes the outer packets to reveal the inner packets at the destination.

**Packet Fragmentation**

- Divides large packets into smaller fragments to fit through networks with smaller maximum packet sizes."
"page_content='Data Communication and Computer Network 
 vi  
21. NETWORK LAYER PROTOCOLS ................................ ................................ ............................  75 
Address Resolution Protocol (ARP) ......................................................................................................... 75 
Internet Control Message Protocol (ICMP) .............................................................................................. 76 
Internet Protocol Version 4 (IPv4) ........................................................................................................... 76 
Internet Protocol Version 6 (IPv6) ........................................................................................................... 77 
22. TRANSPORT LAYER INTRODUCTION ................................ ................................ .................... 78 
Functions ................................................................................................................................................ 78 
End-to-End Communication .................................................................................................................... 78 
23. TRANSMISSION CONTROL PROTOCOL ................................ ................................ ................. 80 
Features .................................................................................................................................................. 80 
Header .................................................................................................................................................... 80 
Addressing .............................................................................................................................................. 82 
Connection Management........................................................................................................................ 82 
Bandwidth Management ........................................................................................................................ 83 
Error Control and Flow Control ............................................................................................................... 84 
Multiplexing............................................................................................................................................ 84 
Congestion Control ................................................................................................................................. 84 
Timer Management ................................................................................................................................ 85 
Crash Recovery ....................................................................................................................................... 85 
24. USER DATAGRAM PROTOCOL ................................ ................................ .............................  87 
Requirement of UDP ............................................................................................................................... 87 
Features .................................................................................................................................................. 87 
UDP Header ............................................................................................................................................ 87 
UDP application ...................................................................................................................................... 88 
25. APPLICATION LAYER INTRODUCTION ................................ ................................ .................. 89 
26. CLIENT-SERVER MODEL ................................ ................................ ................................ ....... 91' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 6}","**Data Communication and Computer Network**

**21. NETWORK LAYER PROTOCOLS**

**Address Resolution Protocol (ARP)**

**Internet Control Message Protocol (ICMP)**

**Internet Protocol Version 4 (IPv4)**

**Internet Protocol Version 6 (IPv6)**

**22. TRANSPORT LAYER INTRODUCTION**

**Functions**

**End-to-End Communication**

**23. TRANSMISSION CONTROL PROTOCOL**

**Features**

**Header**

**Addressing**

**Connection Management**

**Bandwidth Management**

**Error Control and Flow Control**

**Multiplexing**

**Congestion Control**

**Timer Management**

**Crash Recovery**

**24. USER DATAGRAM PROTOCOL**

**Requirement of UDP**

**Features**

**UDP Header**

**UDP application**

**25. APPLICATION LAYER INTRODUCTION**

**26. CLIENT-SERVER MODEL**

**Metadata**

- Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
- Page: 6"
"page_content='Data Communication and Computer Network 
 vii  
Communication ...................................................................................................................................... 92 
27. APPLICATION PROTOCOLS ................................ ................................ ................................ .. 94 
Domain Name System ............................................................................................................................. 94 
Simple Mail Transfer Protocol ................................................................................................................. 94 
File Transfer Protocol .............................................................................................................................. 94 
Post Office Protocol (POP) ...................................................................................................................... 95 
Hyper Text Transfer Protocol (HTTP) ....................................................................................................... 95 
28. NETWORK SERVICES ................................ ................................ ................................ ........... 96 
Directory Services ................................................................................................................................... 96 
File Services ............................................................................................................................................ 96 
Communication Services ......................................................................................................................... 97 
Application Services ................................................................................................................................ 97' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 7}","## Data Communication and Computer Network

### Communication

- Domain Name System
- Simple Mail Transfer Protocol
- File Transfer Protocol
- Post Office Protocol (POP)
- Hyper Text Transfer Protocol (HTTP)

### Network Services

- Directory Services
- File Services
- Communication Services
- Application Services"
"page_content='Data Communication and Computer Network 
 1 
A system of interconnected computers and computerized peripherals such as printers 
is called computer network. This interconnection among computers facilitates 
information sharing among them. Computers may connect to each other by either 
wired or wireless media. 
Classification of Computer Networks 
Computer networks are classified based on various factors. They include: 
 Geographical span 
 Inter-connectivity 
 Administration 
 Architecture 
Geographical Span 
Geographically a network can be seen in one of the following categories: 
 It may be spanned across your table, among Bluetooth enabled devices , 
Ranging not more than few meters. 
 It may be spanned across a whole building, including interme diate devices to 
connect all floors. 
 It may be spanned across a whole city. 
 It may be spanned across multiple cities or provinces. 
 It may be one network covering whole world. 
Inter-Connectivity 
Components of a network can be connected to each other differently in some fashion. 
By connectedness we mean either logically, physically, or both ways. 
 Every single device can be connected to every other device on network, making 
the network mesh. 
 All devices can be connected to a single medium but geographicall y 
disconnected, created bus-like structure. 
 Each device is connected to its left and right peers only, creating linear 
structure. 
1. OVERVIEW' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 8}","## Data Communication and Computer Network

### Overview

**Metadata:**

* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 8

### Classification of Computer Networks

Computer networks are classified based on various factors, including:

**Geographical Span**

* **Personal Area Network (PAN):** Spans across a table or a few meters, such as Bluetooth-enabled devices.
* **Local Area Network (LAN):** Spans across a building, connecting all floors with intermediate devices.
* **Metropolitan Area Network (MAN):** Spans across a city.
* **Wide Area Network (WAN):** Spans across multiple cities or provinces.
* **Global Area Network (GAN):** Covers the entire world.

**Inter-Connectivity**

* **Mesh:** Every device is connected to every other device.
* **Bus:** All devices are connected to a single medium but geographically disconnected.
* **Linear:** Each device is connected to its left and right peers only."
"page_content='Data Communication and Computer Network 
 2 
 All devices connected together with a single device, creating star -like 
structure. 
 All devices connected arbitrarily using all previous ways to connect each other, 
resulting in a hybrid structure. 
Administration 
From an administrator’s point of view, a network can be private network which 
belongs a single autonomous system and cannot be accessed outside its physical or 
logical domain. A network can be public, which is accessed by all. 
Network Architecture 
Computer networks can be discriminated into various types such as Client -Server, 
peer-to-peer or hybrid, depending upon its architecture. 
 There can be one  or more systems acting as Server. Other being Client, 
requests the Server to serve requests. Server takes and processes request on 
behalf of Clients. 
 Two systems can be connected Point-to-Point, or in back-to-back fashion. They 
both reside at the same level and called peers. 
 There can be hybrid network which involves network architecture of both the 
above types. 
Network Applications 
Computer systems and peripherals are connected to form a network . They provide 
numerous advantages: 
 Resource sharing such as printers and storage devices 
 Exchange of information by means of e-Mails and FTP 
 Information sharing by using Web or Internet 
 Interaction with other users using dynamic web pages 
 IP phones 
 Video conferences 
 Parallel computing 
 Instant messaging' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 9}","## Data Communication and Computer Network

**Network Structures**

**Types:**

* Star -like structure: All devices connected to a single device.
* Hybrid structure: Devices connected arbitrarily using various methods.

**Administration**

* Private network: Belongs to a single autonomous system and is inaccessible outside its domain.
* Public network: Accessible to all.

## Network Architecture

**Types:**

* **Client-Server:** One or more servers handle requests from client devices.
* **Peer-to-Peer:** Devices are connected point-to-point or back-to-back and operate at the same level.
* **Hybrid:** Combines both client-server and peer-to-peer architectures.

## Network Applications

**Advantages of Computer Networking:**

* **Resource Sharing:** Printers, storage devices, etc.
* **Information Exchange:** Email, FTP
* **Information Sharing:** Web, Internet
* **User Interaction:** Dynamic web pages
* **IP Phones:** Voice communication over the Internet
* **Video Conferences:** Remote communication
* **Parallel Computing:** Task distribution across multiple computers
* **Instant Messaging:** Real-time text communication"
"page_content='Data Communication and Computer Network 
 3 
Generally, networks are distinguished based on their geographical span. A network 
can be as small as distance between your mobile phone and its Bluetooth headphone 
and as large as the internet itself, covering the whole geographical world. 
Personal Area Network 
A Personal Area Network (PAN) is smallest network which is very personal to a user. 
This may include Bluetooth enabled devices or infra -red enabled devices. PAN has 
connectivity range up to 10 meters.  PAN may include wireless computer keyboard 
and mouse, Bluetooth enabled headphones, wireless printers, and TV remotes. 
 
For example, Piconet is Bluetooth-enabled Personal Area Network which may contain 
up to 8 devices connected together in a master-slave fashion. 
Local Area Network 
A computer network spanned inside a building and operated under single 
administrative system is generally termed as Local Area Network (LAN). Usually, LAN 
covers an organization offices, schools, colleges or universities. Number of systems 
connected in LAN may vary from as least as two to as much as 16 million. 
2. TYPES OF COMPUTER NETWORKS' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 10}","# **Types of Computer Networks**

## Personal Area Networks (PANs)

- Definition: Smallest type of network, covering a limited personal space (up to 10 meters)
- Examples: Bluetooth-enabled devices (headphones, keyboards, printers), TV remotes

## Local Area Networks (LANs)

- Definition: Networks within a building or small area, operated under a single administration
- Applications: Offices, schools, universities
- Number of connected systems: Typically from 2 to 16 million"
"page_content='Data Communication and Computer Network 
 4 
LAN provides a useful way of sharing the resources between end users. The resources 
such as  printers, file servers, scanners, and internet are easily sharable among 
computers. 
 
LANs are composed of inexpensive networking and routing equipment. It may 
contains local servers serving file storage and o ther locally shared applications. It 
mostly operates on private IP addresses and does not involve heavy routing. LAN 
works under its own local domain and controlled centrally. 
LAN uses either Ethernet or Token-ring technology. Ethernet is most widely employed 
LAN technology and uses Star topology, while Token-ring is rarely seen. 
LAN can be wired, wireless, or in both forms at once. 
Metropolitan Area Network 
The Metropolitan Area Network (MAN)  generally expands throughout a city such as 
cable TV network. It can be in the form of Ethernet, Token-ring, ATM , or Fiber 
Distributed Data Interface (FDDI). 
Metro Ethernet is a service which is provided by ISPs. This service enables its users 
to expand their Local Area Networks. For example, MAN can help an organization to 
connect all of its offices in a city.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 11}","## Computer Networks: Metropolitan Area Network (MAN) vs. Local Area Network (LAN)

### Metadata
- Source: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf
- Page: 11

### Metropolitan Area Network (MAN)
- Expands throughout a city (e.g., cable TV network)
- Technologies: Ethernet, Token-ring, ATM, FDDI
- Service offered by ISPs (Metro Ethernet) to extend LANs
- Example: Organization connecting all its offices within a city

### Local Area Network (LAN)
- Facilitates resource sharing among end users (e.g., printers, servers, internet)
- Inexpensive networking and routing equipment
- Utilizes private IP addresses, minimal routing
- Operates on its own local domain, centrally controlled
- Technologies: Ethernet (Star topology), Token-ring 
- Wired, wireless, or hybrid configurations"
"page_content='Data Communication and Computer Network 
 5 
 
Backbone of MAN is high-capacity and high-speed fiber optics. MAN works in between 
Local Area Network and Wide Area Network. MAN provides uplink for LANs to WANs 
or internet. 
Wide Area Network 
As the name suggests, the Wide Area Network (WAN) covers a wide area which may 
span across provinces and even a whole country. Generally, telecommunication 
networks are Wide Area Network. These networks provide connectivity to MANs and 
LANs. Since they are equipped with very high speed backbone, WAN s use very 
expensive network equipment.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 12}","# Data Communication and Computer Network

## Wide Area Network (WAN)

**Metadata**
* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 12

### Coverage and Connectivity
- Spans provinces or entire countries
- Connects MANs and LANs

### Features
- High-speed backbone
- Expensive network equipment

### Function
- Provides a wide area of connectivity
- Connects regional and national networks
- Often used by telecommunication networks"
"page_content='Data Communication and Computer Network 
 6 
 
 
WAN may use advanced techno logies such as Asynchronous Transfer Mode (ATM), 
Frame Relay, and Synchronous Optical Network (SONET). WAN may be managed by 
multiple administration. 
Internetwork 
A network of networks is called an internetwork, or simply the internet. It is the 
largest network in existence on this planet. The internet hugely connects all WANs 
and it can have connection to LANs and Home networks. Internet uses TCP/IP 
protocol suite and uses IP as its addressing protocol. Present day, Internet is widely 
implemented using IPv4. Because of shortage of address spaces, it is gradually 
migrating from IPv4 to IPv6. 
Internet enables its users to share and access enormous amount of information 
worldwide. It uses WWW, FTP, email services, audio , and video streaming etc. At 
huge level, internet works on Client-Server model. 
Internet uses very high speed backbone of fiber optics. To inter -connect various 
continents, fibers are laid under sea known to us as submarine communication cable. 
Internet is wid ely deployed on World Wide Web services using HTML linked pages 
and is accessible by client software known as Web Browsers. When a user requests 
a page using some web browser located on some Web Server anywhere in the world, 
the Web Server responds wi th the proper HTML page. The communication delay is 
very low. 
Internet is serving many proposes and is involved in many aspects of life. Some of 
them are:' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 13}","**Data Communication and Computer Network**

**Wide Area Network (WAN)**

- Spans a large geographical area, connecting multiple local area networks (LANs)
- May use advanced technologies: Asynchronous Transfer Mode (ATM), Frame Relay, Synchronous Optical Network (SONET)
- Managed by multiple administrations

**Internetwork**

**Internet**

- Network of networks
- Largest network in existence
- Connects WANs, LANs, and home networks
- Uses TCP/IP protocol suite and IP addressing
- Migrating from IPv4 to IPv6 due to IPv4 address shortage

**Services and Applications**

- Enables worldwide sharing and access of vast information
- Provides services: WWW, FTP, email, audio/video streaming
- Operates on Client-Server model

**Infrastructure**

- High-speed backbone of fiber optics
- Submarine communication cables for intercontinental connections
- Widely deployed on World Wide Web (WWW) using HTML linked pages
- Accessed by web browsers

**Impact and Applications**

- Facilitates various aspects of life, including:
    - Education
    - Business
    - Healthcare
    - Social interactions
    - Entertainment"
"page_content='Data Communication and Computer Network 
 7 
 Web sites 
 E-mail 
 Instant Messaging 
 Blogging 
 Social Media 
 Marketing 
 Networking 
 Resource Sharing 
 Audio and Video Streaming' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 14}","**Data Communication and Computer Network**

**Page 14**

**Source:** C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf

**Applications of Computer Networks**

Computer networks have a wide range of applications in various aspects of modern life. Some of the most common applications include:

**Online Services:**

* **Web sites:** Access to websites for information, entertainment, and business.
* **E-mail:** Sending and receiving electronic messages.
* **Instant Messaging:** Real-time communication between individuals through text-based messages.
* **Blogging:** Sharing personal experiences, opinions, and information through online journals.
* **Social Media:** Connecting with friends, family, and colleagues through social networking platforms.

**Business Applications:**

* **Marketing:** Promoting products and services online and reaching potential customers.
* **Networking:** Building relationships with business partners, clients, and potential employees.
* **Resource Sharing:** Collaborating on projects, sharing data and resources within and between organizations.

**Entertainment Applications:**

* **Audio and Video Streaming:** Streaming music, movies, and TV shows over the internet."
"page_content='Data Communication and Computer Network 
 8 
Let us go through various LAN technologies in brief: 
Ethernet   
Ethernet is a widely deployed LAN technology. This technology was invented by Bob 
Metcalfe and D.R. Boggs in the year 1970. It was standardized in IEEE 802.3 in 1980.  
Ethernet shares media. Network which uses shared media has high probability of 
data collision. Ethernet uses Carrier Sense Multi Access/Collision Detection 
(CSMA/CD) technology to detect collisions. On the occurrence of collision in Ethernet, 
all its hosts roll back, wait for some random amount of time , and then re-transmit 
the data. 
Ethernet connector is network interface card equipped with 48-bits MAC address. This 
helps other Ethernet devices to identify and communicate with remote devices in 
Ethernet. 
Traditional Ethernet uses 10BASE -T specifications. The number 10 depicts 10MBPS 
speed, BASE stands for baseband, and T stands for Thick Ethernet. 10BASE -T 
Ethernet provides transmission speed up to 10MBPS and uses coaxial cable or Cat-5 
twisted pair cable with RJ-5 connector. Ethernet follows Star topology with segment 
length up to 100 meters. All devices are connected to a hub/switch in a star fashion. 
Fast-Ethernet 
To encompass need of fast emerging software and hardware technologies, Ethernet 
extends itself as Fast-Ethernet. It can run on UTP, Optical Fiber, and wirelessly too. 
It can provide speed up to 100MBPS. This standard is named as 100BASE-T in IEEE 
803.2 using Cat -5 twisted pair cable. It uses CSMA/CD technique for wired media 
sharing among the Ethernet hosts and CSMA/CA (CA stands for Collision Avoidance) 
technique for wireless Ethernet LAN. 
Fast Ethernet on fiber is defined under 100BASE -FX standard which provides speed 
up to 100MBPS on fiber. Ethernet over fiber can be extended up to 100 meters in 
half-duplex mode and can reach maximum of 2000 meters in full -duplex over 
multimode fibers. 
Giga-Ethernet 
After being introduced in 1995, Fast-Ethernet retained its high speed status only for 
three years till Giga-Ethernet introduced. Giga-Ethernet provides speed up to 1000 
mbits/seconds. IEEE802.3ab standardizes Giga-Ethernet over UTP using Cat-5, Cat-
5e and Cat-6 cables. IEEE802.3ah defines Giga-Ethernet over Fiber. 
3. NETWORK LAN TECHNOLOGIES' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 15}","**Data Communication and Computer Network**

**LAN Technologies**

**Ethernet**

- Widely deployed LAN technology
- Invented by Bob Metcalfe and D.R. Boggs in 1970
- Standardized in IEEE 802.3 in 1980
- Uses Carrier Sense Multi Access/Collision Detection (CSMA/CD) technology
- Connector: network interface card with 48-bit MAC address
- Traditional Ethernet uses 10BASE-T specifications
    - Speed: 10MBPS
    - Transmission medium: coaxial cable or Cat-5 twisted pair cable with RJ-5 connector
    - Topology: Star topology with segment length up to 100 meters

**Fast-Ethernet**

- Extended version of Ethernet
- Speed: up to 100MBPS
- Standard: 100BASE-T (IEEE 803.2)
- Wired media: CSMA/CD
- Wireless media: CSMA/CA
- Fast Ethernet over fiber: 100BASE-FX standard
    - Speed: up to 100MBPS
    - Range: 100 meters (half-duplex); 2000 meters (full-duplex)

**Giga-Ethernet**

- Introduced in 1995
- Speed: up to 1000 mbits/seconds
- IEEE802.3ab: over UTP (Cat-5, Cat-5e, Cat-6)
- IEEE802.3ah: over Fiber"
"page_content='Data Communication and Computer Network 
 9 
Virtual LAN 
LAN uses Ethernet which in turn works on shared media. Shared media in Ethernet 
create one single Broadcast domain and one single Collision domain. Introduction of 
switches to  Ethernet has removed single collision domain issue and each device 
connected to switch works in its separate collision domain. But even Switches cannot 
divide a network into separate Broadcast domains. 
Virtual LAN is a solution to divide a single Broadcast domain into multiple Broadcast 
domains. Host in one VLAN cannot speak to a host in another. By default, all hosts 
are placed into the same VLAN. 
 
 
In this diagram, different VLANs are depicted in dif ferent color codes. Hosts in one 
VLAN, even if connected on the same Switch cannot see or speak to other hosts in 
different VLANs. VLAN is Layer -2 technology which works closely on Ethernet. To 
route packets between two different VLANs , a Layer -3 device such as Router  is 
required.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 16}","## Data Communication and Computer Network

### Virtual LAN

**Metadata:**

* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 16

**Content:**

#### Introduction

LANs (Local Area Networks) utilize Ethernet technology, which operates on shared media. This shared media creates a single broadcast domain and a single collision domain. The introduction of switches to Ethernet has eliminated the single collision domain issue, allowing each device connected to the switch to operate in its own collision domain. However, switches alone cannot divide a network into separate broadcast domains.

#### Definition and Purpose

Virtual LAN (VLAN) is a solution that divides a single broadcast domain into multiple broadcast domains. Hosts within one VLAN cannot communicate with hosts in another VLAN. By default, all hosts are assigned to the same VLAN.

#### Operation

In a VLAN, different VLANs are designated by different color codes. Hosts within the same VLAN, even if connected to the same switch, cannot see or communicate with hosts in other VLANs. VLANs operate at the Layer 2 of the OSI model and work closely with Ethernet.

#### Routing Between VLANs

To route packets between different VLANs, a Layer 3 device such as a router is required."
"page_content='Data Communication and Computer Network 
 10 
A Network Topology is the arrangement with which computer systems or network 
devices are connected to each other. Topologies may define both physical and logical 
aspect of the network. Both logical and physical topologies could be same or different 
in a same network. 
Point-to-Point 
Point-to-point networks contains exactly two hosts such as computer, switches, 
routers, or servers connected back to back using a single piece of cab le. Often, the 
receiving end of one host is connected to sending end of the other and vice versa. 
 
If the hosts are connected point -to-point logically, then may have multiple 
intermediate devices. But the end hosts are unaware of underlying network and see 
each other as if they are connected directly. 
Bus T opology 
In case of Bus topology, all devices share single communication line or cable. Bus 
topology may have problem while multiple hosts sending data at the same time. 
Therefore, Bus topology either uses CSMA/CD technology or recognizes one host as 
Bus Master to solve the iss ue. It is one of the simple forms of networking where a 
failure of a device does not affect the other  devices. But failure of the shared 
communication line can make all other devices stop functioning. 
4. COMPUTER NETWORK 
TOPOLOGIES' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 17}","## Data Communication and Computer Network

### Network Topology

A Network Topology refers to the arrangement in which computer systems or network devices are connected to each other. Topologies can define both physical and logical aspects of a network. These topologies may be identical or different in a single network.

### Types of Network Topologies

#### Point-to-Point

- Consists of precisely two hosts (e.g., computers, switches, routers, or servers) directly connected using a single cable.
- The receiving end of one host is typically connected to the sending end of the other, and vice versa.
- If hosts are logically connected point-to-point, there may be multiple intermediate devices, but end hosts are unaware of the underlying network and view each other as if they were directly connected.

#### Bus Topology

- All devices share a single communication line or cable.
- Bus topology may encounter issues when multiple hosts attempt to send data simultaneously.
- Therefore, Bus topology employs either CSMA/CD technology or designates one host as the Bus Master to resolve this problem.
- Despite its simplicity, a device failure within a Bus topology does not affect other devices; however, a failure of the shared communication line can disrupt all other devices."
"page_content='Data Communication and Computer Network 
 11 
 
Both ends of the shared channel have line terminator. The data is sent in only one 
direction and as soon as it reaches the extreme end, the terminator removes the data 
from the line. 
Star T opology 
All hosts in Star topology are connected to a central device, known as hub device, 
using a point -to-point connection. That is, there exists a point to point connection 
between hosts and hub. The hub device can be any of the following: 
 Layer-1 device such as hub or repeater 
 Layer-2 device such as switch or bridge 
 Layer-3 device such as router or gateway' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 18}","## Data Communication and Computer Network

**Metadata**
* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 18

### Line Topology

* Both ends of the shared channel have line terminator.
* Data is sent in only one direction.
* As soon as data reaches the extreme end, the terminator removes it from the line.

### Star Topology

* All hosts are connected to a central device (hub device) using a point-to-point connection.
* Hub device can be a Layer-1 device (hub or repeater), Layer-2 device (switch or bridge), or Layer-3 device (router or gateway)."
"page_content='Data Communication and Computer Network 
 12 
 
As in Bus topology, hub acts as single point of failure. If hub fails, connectivity of all 
hosts to all other hosts fails. Every communication between hosts takes place through 
only the hub. Star topology is not expensive as to connect one more host, only one 
cable is required and configuration is simple. 
Ring T opology 
In ring topology, each host machine connects to exactly two other machines, creating 
a circular network structure. When one host tries to communicate or send message 
to a host which is not adjacent to it, the data travels through all intermediate hosts. 
To connect one more host in the existing structure, the administrator may need only 
one more extra cable.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 19}","## Data Communication and Computer Network 
Page: 19
Source: ""C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf""

### Bus Topology

- Hub acts as a single point of failure. If the hub fails, all hosts lose connectivity to each other.
- Every communication between hosts takes place through only the hub.
- Relatively inexpensive to add new hosts, as only one cable is needed per host.

### Star Topology

- Not as expensive as bus topology.
- To connect one more host, only one cable is required.
- Simple configuration.

### Ring Topology

- Each host machine connects to exactly two other machines, forming a circular network structure.
- When one host tries to communicate or send a message to a host that is not adjacent to it, the data travels through all intermediate hosts.
- Adding a new host to the existing structure may require only one extra cable."
"page_content='Data Communication and Computer Network 
 13 
 
Failure of any host results in failure of the whole ring. Thus, every connection in the 
ring is a point of failure. There are methods which employ one more backup ring. 
Mesh T opology 
In this type of topology, a host is connected to one or multiple hosts. This topology 
has hosts in point-to-point connection with every other host or may also have hosts 
which are in point-to-point connection with few hosts only.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 20}","## Data Communication and Computer Network

**Metadata:**

* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 20

## Network Topologies

### Ring Topology

* Every host is connected to two other hosts, forming a loop.
* Data flows in a single direction around the ring.
* Failure of any host results in failure of the whole ring.
* Every connection in the ring is a point of failure.
* Backup rings can be used for additional resilience.

### Mesh Topology

* Hosts are connected to one or multiple other hosts.
* Hosts can be in point-to-point connection with every other host or with only a few hosts.
* Offers multiple paths for data transmission, providing fault tolerance.
* Can become complex and expensive to manage with a large number of hosts.

**Comparison of Ring and Mesh Topologies**

| Characteristic | Ring Topology | Mesh Topology |
|---|---|---|
| Data flow | Unidirectional | Multidirectional |
| Redundancy | Low | High |
| Fault tolerance | Low | High |
| Cost | Relatively low | Relatively high |
| Number of hosts | Suitable for small to medium networks | Suitable for large networks |"
"page_content='Data Communication and Computer Network 
 14 
 
Hosts in Mesh topology also work as relay for other hosts which do not have direct 
point-to-point links. Mesh technology comes into two types: 
 Full Mesh: All hosts have a point -to-point connection to every other host in 
the network. Thus for every new host n(n -1)/2 connections are required. It 
provides the most reliable network structure among all network topologies. 
 Partially Mesh: Not all hosts have point-to-point connection to every other 
host. Hosts connect to each other in some arbitrarily fashion. This topology 
exists where we need to provide reliability to some hosts out of all. 
Tree Topology 
Also know n as Hierarchical Topology , this  is the most common form of network 
topology in use present ly. This topology imitates as extended Star topology and 
inherits properties of Bus topology. 
This topology divides the network in to multiple levels/layers of network. Mainly in 
LANs, a network is bifurcated into three types of network devices. The lowermost is 
access-layer where computers are attached. The middle layer is known as distribution 
layer, which works as mediator between upper layer and lower layer. The highest 
layer is known as core layer, and is central point of the network, i.e. root of the tree 
from which all nodes fork.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 21}","**Data Communication and Computer Network**

**Page: 21**

## Network Topologies

### Mesh Topology

- Hosts act as relays for hosts without direct links.
- Types:
    - **Full Mesh:** All hosts have point-to-point connections to all others. Requires n(n-1)/2 connections for n hosts. Provides highest reliability.
    - **Partially Mesh:** Hosts do not have point-to-point connections to all others. Connections are made arbitrarily. Used to provide reliability to specific hosts.

### Tree Topology

- Also known as Hierarchical Topology.
- Most common form in use.
- Extends Star topology and inherits properties of Bus topology.
- Network is divided into multiple levels:
    - **Access Layer:** Computers are attached.
    - **Distribution Layer:** Mediates between upper and lower layers.
    - **Core Layer:** Central point of the network, root of the tree."
"page_content='Data Communication and Computer Network 
 15 
 
All neighboring hosts have point -to-point connection between them. Similar to the  
Bus topology, if the root goes down, then the entire network suffers even though it 
is not the single point of failure. Every connection serves as point of failure, failing of 
which divides the network into unreachable segment. 
Daisy Chain 
This topology connects all the hosts in a linear fashion. Similar to Ring topology, all 
hosts are connected to two hosts only, except the end hosts. Means, if the end hosts 
in daisy chain are connected then it represents Ring topology. 
 
Each link in daisy chain topology represents single point of failure. Every link failure 
splits the network into two segments. Every intermediate host works as relay for its 
immediate hosts. 
Hybrid T opology 
A network structure whose design contains more than one topology is said to be 
hybrid topology. Hybrid topology inherits merits and demerits of all the incorporating 
topologies.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 22}","## Page 22

## Network Topologies

### Bus Topology

- All neighboring hosts have point-to-point connections.
- If the root goes down, the entire network suffers, even though it is not the single point of failure.
- Every connection serves as a point of failure, failure of which divides the network into unreachable segments.

### Daisy Chain Topology

- Connects all hosts in a linear fashion.
- Similar to Ring topology, all hosts are connected to two hosts only, except the end hosts.
- Means, if the end hosts in daisy chain are connected, it represents Ring topology.
- Each link in daisy chain topology represents a single point of failure.
- Every link failure splits the network into two segments.
- Every intermediate host works as a relay for its immediate hosts.

### Hybrid Topology

- A network structure whose design contains more than one topology.
- Hybrid topology inherits merits and demerits of all the incorporating topologies."
"page_content='Data Communication and Computer Network 
 16 
 
The above picture represents an arbitrarily hybrid topology. The combining topologies 
may contain attributes of Star, Ring, Bus, and Daisy-chain topologies. Most WANs 
are connected by means of Dual-Ring topology and networks connected to them are 
mostly Star topology networks. Internet is the best example of largest Hybrid 
topology.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 23}","**Data Communication and Computer Network**

**Hybrid Topology**

The combining topologies may contain attributes of Star, Ring, Bus, and Daisy-chain topologies. Most WANs are connected by means of Dual-Ring topology and networks connected to them are mostly Star topology networks. Internet is the best example of largest Hybrid topology.

**Metadata:**

* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 23"
"page_content='Data Communication and Computer Network 
 17 
Network engineering is a complicated task, which involves software, firmware, chip 
level engineering, hardware, and electric pulses. To ease network engineering, the 
whole networking concept is divided into multiple layers. Each layer is involved in 
some particular task and is independent of all other layers. But as a whole , almost 
all networking tasks depend on all of these layers. Layers share data between them 
and they depend on each other only to take input and send output. 
Layered Tasks 
In layered architecture of Network Model, one whole network process is divided into 
small tasks. Each small task is then assigned to a particular layer which works 
dedicatedly to process the task only. Every layer does only specific work. 
In layered communication system, one layer of a host deals with the task done by or 
to be done by its peer layer at the same level on the remote host. The task is either 
initiated by layer at the lowest level or at the top most level. If the task is initiated 
by the topmost layer, it is passed on to the layer below it for further processing. The 
lower layer does the same thing, it processes the task and passes on to lower layer. 
If the task is initiated by lowermost layer, then the reverse path is taken. 
 
Every layer clubs together all procedures, protocols, and methods which it requires 
to execute its  piece of task. All layers identify their counterparts by means of 
encapsulation header and tail. 
5. COMPUTER NETWORK MODEL' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 24}","## Network Engineering

**Metadata**
  - Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
  - Page: 24

### Layered Architecture

Network engineering involves various aspects including software, firmware, chip level engineering, hardware, and electric pulses. To simplify network engineering, the networking concept is divided into multiple layers. Each layer focuses on a specific task and operates independently. However, all layers are interconnected and interdependent. They exchange data and rely on each other for input and output.

### Layered Tasks

In the layered architecture of network models, complex network processes are broken down into smaller tasks. Each task is assigned to a specific layer that is solely responsible for handling it. Each layer is dedicated to a particular function.

Communication within the layered system occurs between corresponding layers on different hosts. Tasks can be initiated by either the topmost or lowest layer. If initiated by the top layer, the task is passed down to lower layers for processing. Similarly, if initiated by the lowest layer, the task is passed up to higher layers.

Each layer combines procedures, protocols, and methods specific to its designated task. Layers identify their counterparts through encapsulation headers and tails.

### Comparison of Layered and Non-Layered Architectures

| **Characteristic** | **Layered Architecture** | **Non-Layered Architecture** |
|---|---|---|
| Complexity | Manageable and easier to troubleshoot | Complex and difficult to diagnose issues |
| Scalability | Highly scalable, allowing for the addition of new layers as needed | Limited scalability, as changes to the architecture impact the entire system |
| Flexibility | Flexible, with each layer handling a specific task | Less flexible, as changes ripple through the entire system |
| Performance | Potentially lower performance due to data transfer between layers | Generally higher performance, as data flows directly without intermediary layers |
| Reusability | Layer functions can be reused in different contexts | Limited reusability, as layers are tightly coupled with each other |

**Example:**

In the TCP/IP model, the following layers are responsible for specific tasks:

* **Network Access Layer:** Manages physical network connectivity and data transmission.
* **Internet Layer:** Handles routing and addressing of data packets across networks.
* **Transport Layer:** Ensures reliable data delivery between applications.
* **Application Layer:** Provides access to network services and applications."
"page_content='Data Communication and Computer Network 
 18 
OSI Model 
Open System Interconnect is an open standard for all communication systems. OSI 
model is established by International Standard Organization  (ISO). This model has 
seven layers: 
 
Application Layer: This layer is responsible for providing interface to the 
application user. This layer encompasses protocols which directly interact with 
the user. 
Presentation Layer : This layer defines how data in the native format of 
remote host should be presented in the native format of host. 
Session Layer : This layer maintains sessions between remote hosts. For 
example, once user/password authentication is done, the remote host 
maintains this session for a while and does not ask for authentication again in 
that time span. 
Transport Layer: This layer is responsible for end -to-end delivery between 
hosts. 
Network Layer: This layer is responsible for address assignment and uniquely 
addressing hosts in a network. 
Data Link Layer: This layer is responsible for reading and writing data from 
and onto the line. Link errors are detected at this layer. 
Physical Layer : This layer defines the hardware, cabling , wiring, power 
output, pulse rate etc.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 25}","**Data Communication and Computer Network**

**OSI Model**

**Metadata:**
* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 25

**OSI Layers**

**1. Application Layer:**
* Provides interface to application user.
* Encompasses protocols that interact directly with the user.

**2. Presentation Layer:**
* Defines how data in the native format of the remote host should be presented in the native format of the host.

**3. Session Layer:**
* Maintains sessions between remote hosts.
* After authentication, the remote host maintains the session and does not ask for authentication again within that time span.

**4. Transport Layer:**
* Responsible for end-to-end delivery between hosts.

**5. Network Layer:**
* Assigns addresses and uniquely addresses hosts in a network.

**6. Data Link Layer:**
* Reads and writes data from and onto the line.
* Detects link errors.

**7. Physical Layer:**
* Defines hardware, cabling, wiring, power output, pulse rate, etc."
"page_content='Data Communication and Computer Network 
 19 
Internet Model 
Internet uses TCP/IP protocol suite, also known as Internet suite. This defines 
Internet Model which contains four layered architecture. OSI Model is general 
communication model but Internet Model is what the internet uses for all its 
communication. The internet is independent of its underlying network architecture so 
is its Model. This model has the following layers: 
 
Application Layer : This layer defines the protocol which enables user to 
interact with the network. For example, FTP, HTTP etc. 
Transport Layer: This layer defines how data should flow between hosts. 
Major protocol at this layer is Transmission Control Protocol  (TCP). This layer 
ensures data delivered between hosts is in -order and is responsible for end -
to-end delivery. 
Internet Layer : Internet Protocol ( IP) works on this layer. This layer 
facilitates host addressing and recognition. This layer defines routing. 
Link Layer: This layer provides mechanism of sending and receiving  actual 
data. Unlike its OSI Model counterpart, this layer is independent of underlying 
network architecture and hardware.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 26}","**Metadata:**

* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 26

**Internet Model**

**Structure:**

### Internet Model

* Internet uses TCP/IP protocol suite, also known as Internet suite. 
* Defines four-layered architecture independent of underlying network architecture:

#### Layers:

**Application Layer:**

* Defines protocols for user interaction with the network (e.g., FTP, HTTP).

**Transport Layer:**

* Defines data flow between hosts (e.g., Transmission Control Protocol (TCP)).
* Ensures in-order data delivery and end-to-end reliability.

**Internet Layer:**

* Internet Protocol (IP) works on this layer.
* Facilitates host addressing, recognition, and routing.

**Link Layer:**

* Provides mechanism for sending and receiving actual data.
* Independent of underlying network architecture and hardware."
"page_content='Data Communication and Computer Network 
 20 
During initial days of internet , its use was limited to military and universities for 
research and development purpose . Later when all networks merge d together and 
formed internet, the data used to travel through public transit network . Common 
people may send the data that can be highly sensitive such as their bank credentials, 
username and passwords, personal documents, online shopping details, or 
confidential documents. 
All security threats are intentional i.e. t hey occur only if intentionally triggered. 
Security threats can be divided into the following categories: 
Interruption 
Interruption is a security threat in which availability of resources is attacked. For 
example, a user is unable to access its web-server or the web-server is hijacked. 
Privacy-Breach 
In this threat, the privacy of a user is compromised. Someone, who is not the 
authorized person is accessing or intercepting data sent or received by the original 
authenticated user. 
Integrity 
This type of threat includes any alteration or modification in the original context of 
communication. The attacker intercepts and receives the data sent by the sender and 
the attacker then either modifies or generates false data and sends to the receive r. 
The receiver receives the data assuming that it is being sent by the original Sender. 
Authenticity 
This threat occurs when an attacker or a security violator poses as a genuine person 
and accesses the resources or communicates with other genuine users. 
No technique in the present world can provide 100% security. But steps can be taken 
to secure data while it travels in unsecured network or internet. The most widely used 
technique is Cryptography. 
 
6. COMPUTER NETWORK SECURITY' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 27}","**Data Communication and Computer Network Security**
____

**Metadata**
* **Source:** C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* **Page:** 27

**Security Threats**
____

**Interruption**
* Availability of resources is attacked.
* **Example:** User is unable to access web-server or web-server is hijacked.

**Privacy Breach**
* Privacy of a user is compromised.
* **Example:** Unauthorized person accesses or intercepts data sent or received by the original user.

**Integrity**
* Alteration or modification in the original context of communication.
* **Example:** Attacker intercepts and modifies or generates false data and sends to the receiver.

**Authenticity**
* Attacker poses as a genuine person and accesses resources or communicates with other genuine users.
* **Example:** Phishing, where an attacker pretends to be a bank or other trusted entity to steal sensitive information."
"page_content='Data Communication and Computer Network 
 21 
Cryptography is a technique to encrypt the plain-text data which makes it difficult to 
understand and interpret. There are several cryptographic algorithm s available 
present day as described below: 
 Secret Key 
 Public Key 
 Message Digest 
Secret Key Encryption 
Both sender and receiver have one secret key. This secret key is used to encrypt the 
data at sender’s end. After the data is encrypted, it is sent on the public domain to 
the receiver. Because the receiver knows and has the Secret Key, the encrypted data 
packets can easily be decrypted. 
Example of secret key encryption is Data Encryption Standard (DES). In Secret Key 
encryption, it is required to have a separate key for each host on the network making 
it difficult to manage. 
Public Key Encryption 
In this encryption system, every user has its own Secret Key and it is not in the 
shared domain. The secret key is never revealed on public domain. Along with secret 
key, every user has its own but public key. Public key is alwa ys made public and is 
used by Senders to encrypt the data. When the user receives the encrypted data, he 
can easily decrypt it by using its own Secret Key. 
Example of public key encryption is Rivest-Shamir-Adleman (RSA).. 
Message Digest 
In this method, actual data is not sent; instead a hash value is calculated and sent. 
The other end user, computes its own hash value and compares with the one just 
received. If both hash values are matched, then it is accepted; otherwise rejected. 
Example of Message Digest is MD5 hashing. It is mostly used in authentication where 
user password is cross checked with the one saved on the server.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 28}","## Cryptographic Algorithms

### Metadata

- Source: `C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf`
- Page: 28

### Types of Cryptographic Algorithms

- Secret Key
- Public Key
- Message Digest

### Secret Key Encryption

- Both sender and receiver possess the same secret key.
- Data is encrypted using the secret key at the sender's end.
- Encrypted data is transmitted publicly.
- The receiver decrypts the encrypted data using the shared secret key.
- **Example:** Data Encryption Standard (DES)

### Public Key Encryption

- Each user has a unique secret key that is not publicly shared.
- Each user also has a public key that is available to all.
- Data is encrypted using the recipient's public key.
- The recipient can decrypt the data using their secret key.
- **Example:** Rivest-Shamir-Adleman (RSA)

### Message Digest

- The actual data is not transmitted; instead, a hash value is calculated and sent.
- The recipient calculates their own hash value and compares it to the received hash value.
- If the hash values match, the data is accepted; otherwise, it is rejected.
- **Example:** MD5 hashing, used in authentication by comparing user passwords with stored passwords."
"page_content='Data Communication and Computer Network 
 22 
Physical layer in the OSI model plays the role of interacting with actual hardware and 
signaling mechanism. Physical layer is the only layer of OSI network model which 
actually deals with the physical connectivity of two different stations. This layer 
defines the hardware equipment , cabling, wiring, frequencies, pulses used to 
represent binary signals etc. 
Physical layer provides its services to Data -link layer. Data -link layer hands over 
frames to physical layer . Physical layer converts them to electrical pulses , which 
represent binary data. The binary data is then sent over the wired or wireless media. 
Signals 
When data is sent over physical medium , it needs to be first converted into 
electromagnetic signals. Data itself can be analog such as human voice, or digital 
such as file on the disk. Both analog and digital data can be represented in digital or 
analog signals. 
Digital Signals 
Digital signals are discrete in nature and represent sequence of voltage pulses. Digital 
signals are used within the circuitry of a computer system. 
Analog Signals 
Analog signals are in continuous wave form in nature and represented by continuous 
electromagnetic waves. 
Transmission Impairment 
When signals travel through the medium , they tend to deteriorate. This may have 
many reasons as given: 
Attenuation 
For the receiver to interpret the data accurately, the signal must be sufficiently 
strong. When the signal passes through the medium , it tends to get weaker . As it 
covers distance, it loses strength.  
Dispersion 
As signal travels through the media, it tends to spread and overlaps. The amount of 
dispersion depends upon the frequency used. 
Delay distortion 
Signals are sent over media with pre-defined speed and frequency. If the signal speed 
and frequency do not match, there are possibilities that signal reaches destination in 
7. PHYSICAL LAYER INTRODUCTION' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 29}","## Physical Layer Introduction

### Physical Layer in the OSI Model

**Metadata:**
- Page: 29
- Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

The physical layer in the OSI model interacts with actual hardware and signaling mechanisms. It defines the physical connectivity between two stations, including hardware equipment, cabling, wiring, frequencies, and pulses used to represent binary signals.

### Physical Layer Services

The physical layer provides services to the data link layer, which converts frames to electrical pulses that represent binary data before sending them over wired or wireless media.

### Signals

Data is converted into electromagnetic signals before transmission. Both analog (e.g., human voice) and digital (e.g., computer files) data can be represented as digital or analog signals.

### Digital Signals

Digital signals are discrete voltage pulses, used within computer system circuitry.

### Analog Signals

Analog signals are continuous electromagnetic waves, representing continuous wave forms.

### Transmission Impairment

**Reasons for Signal Deterioration:**

* **Attenuation:** The signal weakens as it travels through the medium, potentially affecting data interpretation.
* **Dispersion:** The signal spreads and overlaps, affecting its integrity.
* **Delay distortion:** If signal speed and frequency do not match, destination arrival may be delayed."
"page_content='Data Communication and Computer Network 
 23 
arbitrary fashion. In digital media, this is very critical that some bits reach earlier 
than the previously sent ones. 
Noise 
Random disturbance or fluctuation in analog or digital signal  is said to be Noise in 
signal, which may distort the actual information being carried. Noise can be 
characterized in one of the following class: 
Thermal Noise 
Heat agitates the electronic conductors of a m edium which may introduce noise in 
the media. Up to a certain level, thermal noise is unavoidable. 
Intermodulation 
When multiple frequencies share a medium, their interference can cause noise in the 
medium. Intermodulation noise occurs if two different frequencies are sharing a 
medium and one of them has excessive strength or the component itself is not 
functioning properly, then the resultant frequency may not be delivered as expected. 
Crosstalk 
This sort of noise happens when a foreign signal enters into the media. This is because 
signal in one medium affects the signal of second medium. 
Impulse 
This noise is introduced because of irregular disturbances such as  lightening, 
electricity, short-circuit, or faulty components. Digital data is mostly affected by this 
sort of noise. 
Transmission Media 
The media over which the information between two computer systems is sent, called 
transmission media. Transmission media comes in two forms. 
Guided Media 
All communication wires/cables are guided media, such as UTP, coaxial cables, and 
fiber Optics. In this media , the sender and receiver are directly connected and the 
information is send (guided) through it. 
Unguided Media 
Wireless or open air space is said to be unguided media, because there is no 
connectivity between the sender and receiver. Information is spread over the air, and 
anyone including the actual recipient may collect the information. 
Channel Capacity 
The speed of transmission of information is said to be the channel capacity. We count 
it as data rate in digital world. It depends on numerous factors such as:' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 30}","## Data Communication and Computer Network

## Noise

### Types of Noise

| Noise Type | Description |
|---|---|
| Thermal Noise | Disturbance caused by heat agitation in electronic conductors |
| Intermodulation | Interference between multiple frequencies sharing a medium |
| Crosstalk | Signal from one medium affecting another |
| Impulse | Irregular disturbances such as lightning or short-circuits |

## Transmission Media

### Types of Transmission Media

| Media Type | Description |
|---|---|
| Guided Media | Communication wires/cables (e.g., UTP, coaxial cables, fiber optics) |
| Unguided Media | Wireless or open air space |

## Channel Capacity

The speed of transmission of information. It is measured as data rate in digital systems and depends on factors such as:

- Bandwidth of the transmission medium
- Modulation technique used
- Signal-to-noise ratio"
"page_content='Data Communication and Computer Network 
 24 
 Bandwidth: The physical limitation of underlying media. 
 Error-rate: Incorrect reception of information because of noise. 
 Encoding: The number of levels used for signaling. 
Multiplexing 
Multiplexing is a technique to mix and send multiple data stream s over a single 
medium. This technique requires system hardware called multiplexer (MUX) for 
multiplexing the streams and sending them on a medium, and de-multiplexer (DMUX) 
which takes information from the medium and distributes to different destinations. 
Switching 
Switching is a mechanism by which data/information sent from source towards 
destination which are not directly connected. Networks have interconnecting devices, 
which receives data from directly connected sources, stores data, analyze it and then 
forwards to the next interconnecting device closest to the destination. 
Switching can be categorized as:' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 31}","**Data Communication and Computer Network**

### Metadata
- Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
- Page: 31

## Key Concepts

### Bandwidth
- Physical limitation of underlying media.

### Error-Rate
- Incorrect reception of information due to noise.

### Encoding
- Number of levels used for signaling.

## Multiplexing
- Technique to mix and send multiple data streams over a single medium.
- Requires hardware components:
    - Multiplexer (MUX): Mixes streams for transmission.
    - De-multiplexer (DMUX): Distributes information to different destinations.

## Switching
- Mechanism for data/information transmission from source to destination via non-directly connected devices.
- Interconnecting devices receive, store, analyze, and forward data towards destination.

## Categories of Switching
- **Circuit Switching:** Creates a dedicated path for data transmission between source and destination for the duration of the communication.
    - Example: Telephone system

- **Packet Switching:** Divides data into packets and sends them over shared network resources.
    - Example: Internet

- **Message Switching:** Stores entire messages before forwarding them to their destinations.
    - Example: Email"
"page_content='Data Communication and Computer Network 
 25 
Data or information can be stored in two ways, analog and digital. For a computer to 
use the data, it must be in discrete digital form. Similar to data, signals can also be 
in analog and digital form. To transmit data digitally, it needs to be first converted to 
digital form. 
Digital-to-Digital Conversion 
This section explains how to convert digital data into digital signals. It can be done 
in two ways, line coding and block coding. For all communicat ions, line coding is 
necessary whereas block coding is optional. 
Line Coding 
The process for converting digital data into digital signal is said to be Line Coding. 
Digital data is found in binary format. It is represented (stored) internally as series 
of 1s and 0s. 
 
Digital signal is denoted by discreet signal, which represents digital data . There are 
three types of line coding schemes available: 
 
8. DIGITAL TRANSMISSION' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 32}","## Data Communication and Computer Network

**Page: 32**

**Source:** C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

### Digital Transmission

**Line Coding**

**Purpose:** Convert digital data into digital signals.

**Types:**

| Line Coding Scheme | Description |
|---|---|
| Unipolar Line Coding | Signals are only positive or zero. |
| Polar Line Coding | Signals are positive or negative. |
| Bipolar Line Coding | Signals are positive, negative, or zero. |

**Block Coding**

**Purpose:** Optional method to enhance data reliability.

**Types:**

| Block Coding | Description |
|---|---|
| Error Correction Coding (ECC) | Adds redundancy to data to detect and correct errors. |
| Forward Error Correction (FEC) | Adds redundancy to data to detect and correct errors without requiring feedback from the receiver. |"
"page_content='Data Communication and Computer Network 
 26 
Unipolar Encoding 
Unipolar encoding schemes use single voltage level to represent data. In this case, 
to represent binary 1, high voltage is transmitted and to represent 0 , no voltage is 
transmitted. It is also called Unipolar -Non-return-to-zero, because there is no rest 
condition i.e. it either represents 1 or 0. 
 
Polar Encoding 
Polar encoding scheme uses multiple voltage levels to represent binary values. Polar 
encodings is available in four types: 
Polar Non Return to Zero (Polar NRZ) 
It uses two different voltage levels to represent binary values . Generally, positive 
voltage represents 1 and negative value represents 0. It is also NRZ because there  
is no rest condition. 
NRZ scheme has two variants: NRZ-L and NRZ-I.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 33}","**Data Communication and Computer Network**

## **Metadata**

* Source: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf
* Page: 33

## **Encoding Schemes**

### **Unipolar Encoding**

* Uses a single voltage level to represent data.
* Binary 1: High voltage
* Binary 0: No voltage
* Also known as Unipolar -Non-return-to-zero (NRZ) due to the absence of a rest condition.

### **Polar Encoding**

* Uses multiple voltage levels to represent binary values.

#### **Types of Polar Encoding**

**Polar Non Return to Zero (Polar NRZ)**

* Uses two different voltage levels:
    * Positive voltage: Binary 1
    * Negative voltage: Binary 0
* Also NRZ due to the absence of a rest condition.

**NRZ Scheme Variants**

* NRZ-L
* NRZ-I"
"page_content='Data Communication and Computer Network 
 27 
 
NRZ-L changes voltage level at when a different bit is encountered whereas NRZ -I 
changes voltage when a 1 is encountered. 
Return to Zero (RZ) 
Problem with NRZ is that the receiver cannot conclude when a bit ended and when 
the next bit is started, in case when sender and receiver’s clock are not synchronized.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 34}","## Data Communication and Computer Network

**Page:** 34

**Source:** C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

### Line Encoding

**NRZ-L (Non-Return-to-Zero - Level)**

* Maintains the same voltage level for consecutive bits of the same value.
* Voltage level changes when a different bit is encountered.

**NRZ-I (Non-Return-to-Zero - Inverted)**

* Inverts the voltage level for consecutive bits of opposite value.
* Voltage level changes when a '1' bit is encountered.

**Return-to-Zero (RZ)**

* Voltage returns to zero after each bit.
* Solves the synchronization issue of NRZ encoding by clearly marking the end of each bit."
"page_content='Data Communication and Computer Network 
 28 
RZ uses three voltage levels, positive voltage to represent 1, negative voltage to 
represent 0 and zero voltage for none. Signals change during bits not between bits. 
Manchester 
This encoding scheme is a combination of RZ and NRZ-L. Bit time is divided into two 
halves. It transits in the middle of the bit and changes phase when a different bit is 
encountered. 
Differential Manchester 
This encoding scheme is a combination of RZ and NRZ-I. It also transits at the middle 
of the bit but changes phase only when 1 is encountered. 
Bipolar Encoding 
Bipolar encoding uses three voltage levels, positive, negative, and zero. Zero voltage 
represents binary 0 and bit 1 is repr esented by altering positive and negative 
voltages. 
 
Block Coding 
To ensure accuracy of the received data frame, redundant bits are used. For example, 
in even-parity, one parity bit is added to make the count of 1s in the frame even. 
This way the original number of bits is increased. It is called Block Coding. 
Block coding is represented by slash notation, mB/nB . Means, m-bit block is 
substituted with n-bit block where n > m. Block coding involves three steps:  
1. Division 
2. Substitution 
3. Combination.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 35}","**Formatting Instructions:**

1. **Content Structuring:**

**Data Communication and Computer Network**

   - Encoding Techniques
      - Line Coding Techniques
         - Non-Return to Zero (NRZ)
         - Return to Zero (RZ)
         - Manchester
         - Differential Manchester
         - Bipolar Encoding
      - Block Coding
         - Hamming Code
         - Cyclic Redundancy Check (CRC)

2. **Metadata Inclusion:**

**Metadata:**

* Source: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf
* Page: 35

3. **Code Formatting:**

No code examples provided.

4. **Tabular Format:**

| Encoding Technique | Voltage Levels | Signal Changes |
|---|---|---|
| Non-Return to Zero (NRZ) | Positive and Negative | Between bits |
| Return to Zero (RZ) | Positive and Negative | During bits |
| Manchester | Positive and Negative | Middle of bit |
| Differential Manchester | Positive and Negative | Middle of bit (phase change on 1) |
| Bipolar Encoding | Positive, Negative, and Zero | Positive/Negative for 1 |

**Examples:**

No examples provided."
"page_content='Data Communication and Computer Network 
 29 
After block coding is done, it is line coded for transmission. 
Analog-to-Digital Conversion 
Microphones create analog voice and camera creates analog videos, which are treated 
is analog data. To transmit this analog data over digital signals , we need analog to 
digital conversion. 
Analog data is a continuous stream of data in the wave form whereas digital data is 
discrete. To convert analog wave into digital data , we use Pulse Code Modulation  
(PCM). 
PCM is one of the most commonly used method to convert analog data into digital 
form. It involves three steps:  
 Sampling 
 Quantization 
 Encoding. 
Sampling 
 
The analog signal is sampled every T interval. Most important factor in sampling is 
the rate at which analog signal is sampled. According to Nyquist  Theorem, the 
sampling rate must be at least two times of the highest frequency of the signal. 
Quantization 
 
Sampling yields discrete form of continuous analog signal. Every discrete pattern 
shows the amplitude of the analog signal at that instance. The q uantization is done' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 36}","# Data Communication and Computer Network

## Analog-to-Digital Conversion

Microphones create analog voice and cameras create analog videos, which are treated as analog data. To transmit this analog data over digital signals, we need analog-to-digital conversion.

Analog data is a continuous stream of data in the wave form, whereas digital data is discrete. To convert analog wave into digital data, we use Pulse Code Modulation (PCM).

PCM is one of the most commonly used methods to convert analog data into digital form. It involves three steps:

### Sampling

The analog signal is sampled at regular intervals. The most important factor in sampling is the rate at which the analog signal is sampled. According to the Nyquist Theorem, the sampling rate must be at least twice the highest frequency of the signal.

### Quantization

Sampling yields a discrete form of the continuous analog signal. Each discrete point represents the amplitude of the analog signal at that instance. The quantization process assigns a binary value to each discrete point. This binary value represents the range of values that the discrete point can take.

### Encoding

Encoding converts the binary value assigned to each discrete point into a code that can be transmitted over a digital channel. The code used for encoding can be any standard code, such as the ASCII code.

## Example

An analog audio signal is sampled at 44,100 Hz. This means that the analog signal is sampled 44,100 times per second. Each sample is then quantized to an 8-bit binary value. This means that each sample can take on one of 256 possible values. The 8-bit binary value is then encoded into a code that can be transmitted over a digital channel. The code used for encoding can be any standard code, such as the ASCII code."
"page_content='Data Communication and Computer Network 
 30 
between the maximum amplitude value and the minimum amplitude value. 
Quantization is approximation of the instantaneous analog value. 
Encoding 
 
In encoding, each approximated value is then converted into binary format. 
Transmission Modes 
The transmission mode decides how data is transmitted between two computers. The 
binary data in the form of 1s and 0s can be sent in two different modes: Parallel and 
Serial. 
Parallel Transmission 
 
The binary bits are organized in to groups of fixed length. Both sender and receiver 
are connected in parallel with the equal number of data lines. Both computer s 
distinguish between high order and low order data lines. The sender sends all the bits 
at once on all lines. Because the data lines are equal to the number of bits in a group' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 37}","**Content Structuring:**

**Data Communication and Computer Networks**

**Analog vs Digital Transmission**

| Feature | Analog | Digital |
|---|---|---|
| Signal Representation | Continuous waveform | Discrete bits |
| Amplitude | Varies continuously | Fixed levels |
| Data Rate | Can be higher | Limited by the transmission medium |
| Noise Immunity | More susceptible | Less susceptible |

**Analog Transmission**

* Amplitude Shift Keying (ASK)
* Frequency Shift Keying (FSK)
* Phase Shift Keying (PSK)

**Digital Transmission**

* Pulse Code Modulation (PCM)
* Delta Modulation (DM)

**Quantization**

* Approximation of analog values into discrete levels

**Encoding**

* Conversion of discrete values into binary format

**Transmission Modes**

**Parallel Transmission**

* Data bits sent simultaneously over multiple lines
* Requires more cables and connectors

**Serial Transmission**

* Data bits sent one at a time over a single line
* Less expensive and more efficient

**Other Modes of Transmission**

* **Simplex:** One-way data flow
* **Half-duplex:** Two-way data flow, but only one direction at a time
* **Full-duplex:** Two-way data flow simultaneously

**Advantages of Digital Transmission**

* Higher data rates
* Greater noise immunity
* Lower error rates"
"page_content='Data Communication and Computer Network 
 31 
or data frame, a complete group of bits (data frame) is sent in one go. Advantage of 
Parallel transmission is high speed and disadvantage is the cost of wires, as it is equal 
to the number of bits sent in parallel. 
Serial Transmission 
In serial transmission, bits are sent one after another in a queue manner. Serial 
transmission requires only one communication channel. 
 
Serial transmission can be either asynchronous or synchronous. 
Asynchronous Serial Transmission 
It is named so because there  is no importance of timing. Data -bits have specific 
pattern and they help receiver recognize the start and end data bits. For example, a 
0 is prefixed on every data byte and one or more 1s are added at the end. 
Two continuous data-frames (bytes) may have a gap between them. 
Synchronous Serial Transmission 
Timing in synchronous transmission has importance as there is no mechanism 
followed to recognize start and end d ata bits. There is no pattern or prefix/suffix 
method. Data bits are sent in burst mode without maintaining gap between bytes (8-
bits). Single burst of data bits may contain a number of bytes. Therefore, timing 
becomes very important. 
It is up to the recei ver to recognize and separate bits into bytes. The advantage of 
synchronous transmission is high speed, and it has no overhead of extra header and 
footer bits as in asynchronous transmission.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 38}","## Data Communication and Computer Network

### Transmission Modes

#### Parallel Transmission

- Complete group of bits sent in one go.
- Advantage: High speed
- Disadvantage: Cost of wires (equal to number of bits sent in parallel)

#### Serial Transmission

- Bits sent one after another in a queue manner.
- Requires only one communication channel.

### Types of Serial Transmission

#### Asynchronous Serial Transmission

- No importance of timing.
- Data bits have specific pattern to recognize start and end data bits.
- Gap may exist between two continuous data-frames.
- Example: 0 prefixed on every data byte and 1s added at the end.

#### Synchronous Serial Transmission

- Timing has importance.
- No mechanism to recognize start and end data bits.
- No pattern or prefix/suffix method.
- Data bits sent in burst mode without gap between bytes.
- Receiver must recognize and separate bits into bytes.
- Advantage: High speed, no overhead of extra header and footer bits."
"page_content='Data Communication and Computer Network 
 32 
To send the digital data over an analog media, it needs to be converted into analog 
signal. There can be two cases according to data formatting. 
Bandpass: The filters are used to filter and pass frequencies of interest. A bandpass 
is a band of frequencies which can pass the filter. 
Low-pass: Low-pass is a filter that passes low frequencies signals. 
When digital data is converted into a bandpass analog signal, it is called digital -to-
analog conversion. When low-pass analog signal is converted into bandpass analog 
signal, it is called analog-to-analog conversion. 
Digital-to-Analog Conversion 
When data from one computer is sent to another via some analog carrier, it is first 
converted into analog signals. Analog signals are modified to reflect digital data. 
An analog signal is characterized by its amplitude, frequency, and phase. There are 
three kinds of digital-to-analog conversions: 
Amplitude Shift Keying 
In this conversion technique, the amplitude of analog carrier signal is modified to 
reflect binary data. 
 
When binary data represents digit 1, the amplit ude is held; otherwise it is set to 0. 
Both frequency and phase remain same as in the original carrier signal. 
Frequency Shift Keying 
9. ANALOG TRANSMISSION' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 39}","**Data Communication and Computer Network**
**Page 39**

## Analog Transmission

### Formatting Digital Data for Analog Media

To transmit digital data over analog media, it must be converted into an analog signal. Two data formatting options exist:

**1. Bandpass**

- Filters pass frequencies of interest within a specific band.

**2. Low-pass**

- Filters pass only low-frequency signals.

### Types of Analog-Digital Conversions

**1. Digital-to-Analog Conversion**

- Digital data is converted into a bandpass analog signal.

**2. Analog-to-Analog Conversion**

- A low-pass analog signal is converted into a bandpass analog signal.

## Digital-to-Analog Conversion Techniques

When transmitting data between computers over analog carriers, the data is first converted into analog signals that reflect the digital data. An analog signal is characterized by its amplitude, frequency, and phase.

Digital-to-analog conversions can be classified into three types:

### 1. Amplitude Shift Keying (ASK)**

- The amplitude of the analog carrier signal is varied to represent binary data.
- When binary data is 1, the amplitude is held constant; otherwise, it is set to 0.
- Frequency and phase remain unchanged.

**Example:**

Binary data: 10101

ASK modulated signal:

```
Amplitude
     |
     |  __
     | |__|
     | |__|
     | |__|
     | |__|
     |___|
     0   1   2   3   4   5   6   7   8   9   Time
```"
"page_content='Data Communication and Computer Network 
 33 
In this conversion technique, the frequency of the analog carrier signal is modified to 
reflect binary data. 
 
This technique uses two frequencies, f1 and f2. One of them, for example f1, is 
chosen to represent binary digit 1 and the other one is used to represent binary digit 
0. Both amplitude and phase of the carrier wave are kept intact. 
Phase Shift Keying 
In this conversion scheme, the phase of the original carrier signal is altered to reflect 
the binary data. 
 
When a new binary symbol is encountered, the phase of the signal is altered. 
Amplitude and frequency of the original carrier signal is kept intact. 
Quadrature Phase Shift Keying' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 40}","## Data Communication and Computer Network

### Metadata
- Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
- Page: 40

## Frequency Modulation (FM)
In this conversion technique, the frequency of the analog carrier signal is modified to reflect binary data.

### Binary Frequency Shift Keying (BFSK)
This technique uses two frequencies, f1 and f2. One of them, for example f1, is chosen to represent binary digit 1 and the other one is used to represent binary digit 0. Both amplitude and phase of the carrier wave are kept intact.

## Phase Shift Keying (PSK)
In this conversion scheme, the phase of the original carrier signal is altered to reflect the binary data.

### Binary Phase Shift Keying (BPSK)
When a new binary symbol is encountered, the phase of the signal is altered. Amplitude and frequency of the original carrier signal is kept intact.

## Quadrature Phase Shift Keying'"
"page_content='Data Communication and Computer Network 
 34 
QPSK alters the phase to reflect two binary digits at once. This is done in two different 
phases. The main stream of binary data is divided equally into two sub-streams. The 
serial data is converted in to parallel in both sub -streams and then each stream is 
converted to digital signal using NRZ technique. Later, both the digital signals are 
merged together. 
Analog-to-Analog Conversion 
Analog signals are modified to represent analog data. This conversion is also known 
as Analog Modulation. Analog modulation is required when bandpass is used. Analog 
to analog conversion can be done in three ways: 
 
Amplitude Modulation 
In this modulation, the amplitude of the carrier signal is modified to reflect the analog 
data.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 41}","## Data Communication and Computer Network

**Metadata:**

- Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
- Page: 41

### QPSK (Quadrature Phase Shift Keying)

QPSK is a modulation technique that alters the phase of a carrier signal to represent two binary digits (bits) at once. This is done using two different phases, each representing a unique combination of bits.

- The input binary data stream is divided into two sub-streams.
- Each sub-stream is converted from serial to parallel data.
- The parallel data is then converted into a digital signal using Non-Return-to-Zero (NRZ) encoding.
- The two digital signals are merged to form the QPSK signal.

### Analog-to-Analog Conversion

Analog-to-analog conversion modifies analog signals to represent analog data. This process is also known as analog modulation and is necessary when using bandpass signals. There are three main types of analog modulation:

#### Amplitude Modulation

In amplitude modulation, the amplitude of the carrier signal is varied to represent the analog data.

**Advantages:**

- Simple and easy to implement.
- Less prone to noise interference.

**Disadvantages:**

- Requires a higher power level compared to other modulation techniques.
- Prone to distortion due to non-linearity in the transmission medium.

#### Frequency Modulation

In frequency modulation, the frequency of the carrier signal is varied to represent the analog data.

**Advantages:**

- More resistant to noise interference compared to amplitude modulation.
- Requires less bandwidth than amplitude modulation.

**Disadvantages:**

- More complex to implement and requires a wider bandwidth.
- Prone to phase distortion.

#### Phase Modulation

In phase modulation, the phase of the carrier signal is varied to represent the analog data.

**Advantages:**

- Offers the best resistance to noise interference among the three analog modulation techniques.
- Requires a narrower bandwidth than amplitude modulation.

**Disadvantages:**

- More complex to implement and requires a stable reference signal.
- Prone to phase distortion and requires a wider bandwidth than frequency modulation."
"page_content='Data Communication and Computer Network 
 35 
 
Amplitude modulation is implemented by means of a multiplier. The amplitude of 
modulating signal (analog data) is multiplied by the amplitude of carrier frequency, 
which then reflects analog data. 
The frequency and phase of carrier signal remain unchanged. 
Frequency Modulation 
In this modulation technique, the frequency of the carrier signal is modified to reflect 
the change in the voltage levels of the modulating signal (analog data).' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 42}","## Data Communication and Computer Network

### Modulation Techniques

### Amplitude Modulation

- Implemented using a multiplier.
- Amplitude of modulating signal (analog data) is multiplied by the amplitude of carrier frequency.
- Frequency and phase of carrier signal remain unchanged.

### Frequency Modulation

- Frequency of the carrier signal is modified to reflect the change in the voltage levels of the modulating signal (analog data)."
"page_content='Data Communication and Computer Network 
 36 
 
The amplitude and phase of the carrier signal are not altered. 
Phase Modulation 
In the modulation technique, the phase of carrier signal is modulated in order to 
reflect the change in voltage (amplitude) of analog data signal.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 43}","# Data Communication and Computer Network

**Phase Modulation**

**Metadata**
- Source: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf
- Page: 43

**Content**
In the modulation technique, the phase of carrier signal is modulated in order to reflect the change in voltage (amplitude) of analog data signal."
"page_content='Data Communication and Computer Network 
 37 
 
Phase modulation is practically similar to Frequency Modulation, but in Phase 
modulation frequency of the carrier signal is not increased. Frequency of carrier is 
signal is changed (made dense and sparse) to reflect voltage change in the amplitude 
of modulating signal.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 44}","## Data Communication and Computer Network

### Phase Modulation

**Metadata**
- Page: 44
- Source: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf

**Definition**

Phase modulation is similar to frequency modulation, but in phase modulation, the frequency of the carrier signal does not change. Instead, the phase of the carrier signal is changed (made denser or sparser) to reflect voltage changes in the amplitude of the modulating signal."
"page_content='Data Communication and Computer Network 
 38 
The transmission media is nothing but the physical media over which communication 
takes place in computer networks. 
Magnetic Media 
One of the most convenient way to transfer data from one computer to another, even 
before the birth of networking, was to save it on some storage media and transfer 
physical from one station to another. Though it may seem old-fashion way in today’s 
world of high speed internet, but when the size of data is huge, the magnetic media 
comes into play. 
For example, a bank has to handle and transfer huge  data of its customer, which 
stores a backup of it at some geographically far-away place for security reasons and 
to keep it from uncertain calamities. If the bank needs to store its huge backup data, 
then its transfer through internet is not feasible. The WAN links may not support such 
high speed. Even if they do; the cost is too high to afford. 
In these cases, data backup is stored onto magnetic tapes or magnetic discs , and 
then shifted physically at remote places. 
T wisted Pair Cable 
A twisted pair cable is made of two plastic insulated copper wires twisted together to 
form a single media. Out of these two wires , only one carries actual signal and 
another is used for ground reference. The twists between wires are helpful in reducing 
noise (electro-magnetic interference) and crosstalk. 
 
There are two types of twisted pair cables: 
 Shielded Twisted Pair (STP) Cable 
 Unshielded Twisted Pair (UTP) Cable 
10. TRANSMISSION MEDIA' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 45}","**Data Communication and Computer Network**
**Metadata:**
- Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
- Page: 45

**Transmission Media**

**Magnetic Media**
- Data transfer via storage media
- Suitable for large data sizes
- Example: Bank's data backup stored on tapes or discs for remote storage

**Twisted Pair Cable**
- Made of two copper wires twisted together
- One wire carries signal, the other is ground reference
- Twists reduce noise and crosstalk

**Types of Twisted Pair Cables**
- **Shielded Twisted Pair (STP)** Cable
- **Unshielded Twisted Pair (UTP)** Cable"
"page_content='Data Communication and Computer Network 
 39 
STP cables comes with twisted wire pair covered in metal foil. This makes it more 
indifferent to noise and crosstalk. 
UTP has seven categories, each suitable for specific use. In computer networks, Cat-
5, Cat-5e, and Cat-6 cables are mostly used. UTP cables are connected by RJ45 
connectors. 
Coaxial Cable 
Coaxial cable has two wires of copper. The core wire lies in the center and it is made 
of solid conductor. The core is enclosed in an insulating sheath. The second wire is 
wrapped around over the sheath and that too in turn encased by in sulator sheath. 
This all is covered by plastic cover. 
 
Because of its structure, the coax cable is capable of carrying high frequency signals 
than that of twisted pair cable . The wrapped structure provides it a good shield 
against noise and cross ta lk. Coaxial cables provide high bandwidth rates of up to 
450 mbps. 
There are three categories of coax cables namely, RG -59 (Cable TV), RG -58 (Thin 
Ethernet), and RG-11 (Thick Ethernet). RG stands for Radio Government. 
Cables are connected using BNC connec tor and BNC -T. BNC terminator is used to 
terminate the wire at the far ends.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 46}","## Data Communication and Computer Network

### Structured Cabling

#### Twisted Pair Cable (UTP)

- Wire pair twisted together
- Covered in metal foil to reduce noise and crosstalk
- Seven categories (Cat-5, Cat-5e, Cat-6 commonly used)
- Connected by RJ45 connectors

#### Coaxial Cable

- Two copper wires
- Core wire in center, surrounded by insulating sheath
- Second wire wrapped around sheath, covered by insulator and plastic cover
- Can carry high frequency signals
- Provides bandwidth rates up to 450 mbps
- Three categories: RG-59, RG-58, RG-11
- Connected using BNC connector and BNC-T terminator

**Comparison of Twisted Pair and Coaxial Cables**

| Feature | Twisted Pair (UTP) | Coaxial Cable |
|---|---|---|
| Structure | Twisted wire pair | Two copper wires |
| Noise immunity | Metal foil shield | Wrapped structure |
| Bandwidth | Lower | Up to 450 mbps |
| Connectors | RJ45 | BNC |
| Cost | Less expensive | More expensive |"
"page_content='Data Communication and Computer Network 
 40 
Power Lines 
Power Line communication (PLC) is Layer-1 (Physical Layer) technology which uses 
power cables to transmit data signals. In PLC, modulated data is sent over the cables. 
The receiver on the other end de-modulates and interprets the data. 
Because power lines are widely deployed, PLC can make all powered devices 
controlled and monitored. PLC works in half-duplex. 
There are two types of PLCs: 
 Narrow band PLC 
 Broad band PLC 
Narrow band PLC provides lower data rates up to 100s of kbps, as they work at lower 
frequencies (3-5000 kHz). They can be spread over several kilometers. 
Broadband PLC provides higher data rates up to 100s of Mbps and work s at higher 
frequencies (1.8 – 250 MHz). They cannot be as much extended as Narrowband PLC. 
Fiber Optics 
Fiber Optic works on the properties of light. When light ray hits at critical angle , it 
tends to refracts at 90 degree. This property has been used in fiber optic. The core 
of fiber optic cable is made of high quality glass or plastic. From one end of it light is 
emitted, it travels through it and at the other end light detector detects light stream 
and converts it to electric data. 
Fiber Optic provides the highest mode of speed. It comes in two modes, one is single 
mode fiber and second is multimode fiber. Single mode fiber can carr y a single ray 
of light whereas multimode is capable of carrying multiple beams of light. 
 
Fiber Optic also comes in unidirectional and bidirectional capabilities. To connect and 
access fiber optic special type of connectors are used. These can be Subscriber 
Channel (SC), Straight Tip (ST), or MT-RJ.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 47}","## Data Communication and Computer Network

### Page 47

### Power Lines

**Power Line Communication (PLC)**

- Layer-1 (Physical Layer) technology
- Uses power cables to transmit data signals
- Modulated data is sent over cables and demodulated at the receiver

**Types of PLCs:**

- **Narrow Band PLC:**
  - Lower data rates (up to 100s of kbps)
  - Lower frequencies (3-5000 kHz)
  - Can extend over several kilometers
- **Broad Band PLC:**
  - Higher data rates (up to 100s of Mbps)
  - Higher frequencies (1.8 - 250 MHz)
  - More limited range than narrowband PLC

### Fiber Optics

- Works on the properties of light
- Light ray refracts at 90 degrees when hitting at a critical angle

**Structure of Fiber Optic Cable:**

- Core made of high-quality glass or plastic
- Light emitted from one end and detected at the other end

**Types of Fiber Optic:**

- **Single Mode Fiber:**
  - Carries a single ray of light
- **Multimode Fiber:**
  - Carries multiple beams of light

**Capabilities of Fiber Optic:**

- Unidirectional or bidirectional
- Connects and accesses via special connectors (SC, ST, or MT-RJ)"
"page_content='Data Communication and Computer Network 
 41' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 48}","**Data Communication and Computer Network**

**Metadata:**
   * Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
   * Page: 48

**Content:**

**1. Data Communication**

   1.1. Definition
   1.2. Components
   1.3. Types of Data Communication
       - Simplex
       - Half-duplex
       - Full-duplex

   1.4. Transmission Modes
       - Serial transmission
       - Parallel transmission

**2. Computer Network**

   2.1. Definition
   2.2. Components
   2.3. Types of Computer Networks
       - LAN (Local Area Network)
       - MAN (Metropolitan Area Network)
       - WAN (Wide Area Network)

**3. Network Topologies**

   3.1. Bus topology
   3.2. Star topology
   3.3. Ring topology
   3.4. Mesh topology

**4. Network Protocols**

   4.1. Definition
   4.2. Types of Network Protocols
       - TCP (Transmission Control Protocol)
       - UDP (User Datagram Protocol)
       - IP (Internet Protocol)

**5. Network Security**

   5.1. Definition
   5.2. Threats to Network Security
       - Viruses
       - Malware
       - Hacking
       - Denial-of-Service (DoS) attacks

   5.3. Network Security Measures
       - Firewalls
       - Intrusion Detection Systems (IDS)
       - Virtual Private Networks (VPNs)"
"page_content='Data Communication and Computer Network 
 42 
Wireless transmission is a form of unguided media. Wireless communication involves 
no physical link established between two or more devices, communicating wirelessly. 
Wireless signals are spread over in the air and are received and interpret ed by 
appropriate antennas. 
When an antenna is attached to electrical circuit of a computer or wireless device, it 
converts the digital data into wireless signals and spread all over within its frequency 
range. The receptor on the other end receives these signals and converts them back 
to digital data. 
A little part of electromagnetic spectrum can be used for wireless transmission. 
 
Radio Transmission 
Radio frequency is easier to generate and because of its large wavelength it can 
penetrate through walls and structures alike. Radio waves can have wavelength from 
1mm – 100,000km and have frequency ranging from 3Hz (Extremely Low Frequency) 
to 300 GHz (Extremely High Frequency). Radio frequencies are sub -divided into six 
bands. 
Radio waves at lower frequencie s can travel through walls whereas higher RF can 
travel in straight line and bounce back. The power of low frequency waves decreases 
sharply as they cover long distance. High frequency radio waves have more power. 
Lower frequencies such as VLF, LF, MF bands can travel on the ground up to 1000 
kilometers, over the earth’s surface. 
 
11. WIRELESS TRANSMISSION' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 49}","**11. WIRELESS TRANSMISSION** **Metadata:**
- Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
- Page: 49

### Wireless Transmission

Wireless transmission is a form of unguided media where no physical link is established between communicating devices. Wireless signals are transmitted through the air and received by appropriate antennas.

When an antenna is connected to an electrical circuit of a computer or wireless device, it converts digital data into wireless signals and transmits them within its frequency range. The receptor on the receiving end converts these signals back to digital data.

### Radio Transmission

Radio frequency is easy to generate and its large wavelength allows it to penetrate through walls and structures. Radio waves have wavelengths ranging from 1mm to 100,000km and frequencies ranging from 3Hz (Extremely Low Frequency) to 300 GHz (Extremely High Frequency). Radio frequencies are sub-divided into six bands:

| Band | Frequency Range | Wavelength Range |
|---|---|---|
| Extremely Low Frequency (ELF) | 3Hz - 300Hz | 100,000km - 1000km |
| Very Low Frequency (VLF) | 3kHz - 30kHz | 10km - 100km |
| Low Frequency (LF) | 30kHz - 300kHz | 1km - 10km |
| Medium Frequency (MF) | 300kHz - 3MHz | 100m - 1km |
| High Frequency (HF) | 3MHz - 30MHz | 10m - 100m |
| Very High Frequency (VHF) | 30MHz - 300MHz | 1m - 10m |
| Ultra High Frequency (UHF) | 300MHz - 3GHz | 10cm - 1m |
| Extremely High Frequency (EHF) | 3GHz - 300GHz | 1cm - 10cm |

Radio waves at lower frequencies can travel through walls, while higher RF waves travel in straight lines and bounce back. The power of low-frequency waves decreases over long distances, while high-frequency radio waves have more power. Lower frequencies, such as VLF, LF, and MF bands, can travel over the ground up to 1000 kilometers."
"page_content='Data Communication and Computer Network 
 43 
Radio waves of high frequencies are prone to be absorbed by rain and other obstacles. 
They use Ionosphere of earth atmosphere. High frequency radio waves such as HF 
and VHF bands are spread upwards. When they reach Ionosphere, they are refracted 
back to the earth. 
 
Microwave Transmission 
Electromagnetic waves above 100 MHz tend to travel in a straight line and signals 
over them can be sent by beaming those waves towards one particular station. 
Because Microwaves travels in straight lines, both sender and receiver must be 
aligned to be strictly in line-of-sight. 
Microwaves can have wavelength ranging from 1mm – 1meter and frequency ranging 
from 300MHz to 300GHz.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 50}","## Data Communication and Computer Network

### Radio Wave Transmission

* Prone to absorption by obstacles and rain.
* Utilize the Ionosphere for reflection.
* High frequency bands (HF, VHF) are spread upwards and refracted back to Earth by the Ionosphere.

### Microwave Transmission

**Key Characteristics:**

* Electromagnetic waves above 100 MHz
* Travel in a straight line
* Signals transmitted by beaming waves towards specific stations

**Line-of-Sight Requirement:**

* Both sender and receiver must be strictly aligned for successful communication.

**Wavelength and Frequency Range:**

* Wavelength: 1mm - 1 meter
* Frequency: 300MHz - 300GHz

### Difference between Radio Wave and Microwave Transmission

| Feature | Radio Wave Transmission | Microwave Transmission |
|---|---|---|
| Frequency | Below 100 MHz | Above 100 MHz |
| Propagation | Prone to absorption by obstacles and rain, Utilizes Ionosphere for reflection | Travels in a straight line, Line-of-sight required |
| Line-of-Sight Requirement | Not required | Required |
| Wavelength and Frequency Range | Not specified | Wavelength: 1mm - 1 meter, Frequency: 300MHz - 300GHz |"
"page_content='Data Communication and Computer Network 
 44 
Microwave antennas concentrate the waves making a beam of it. As shown in picture 
above, multiple antennas can be aligned to reach farther. Microwaves have higher 
frequencies and do not penetrate wall like obstacles. 
Microwave transmission depends highly upon the weather conditions and the 
frequency it is using. 
Infrared Transmission 
Infrared wave  lies in between visible light spectrum and microwaves. It has 
wavelength of 700nm to 1mm and frequency ranges from 300GHz to 430THz. 
Infrared wave is used for very short range communication purposes such as television 
and its remote. Infrared travels in a straight line hence it is directional by nature. 
Because of high frequency range, Infrared cannot cross wall-like obstacles. 
Light Transmission 
Highest most electromagnetic spectrum which can be used for data t ransmission is 
light or optical signaling. This is achieved by means of LASER. 
Because of frequency light uses, it tends to travel strictly in straight line. Hence the 
sender and receiver must be in the line -of-sight. Because laser transmission is 
unidirectional, at both ends of communication the laser and the photo-detector needs 
to be installed. Laser beam is generally 1mm wide hence it is a work of precision to 
align two far receptors each pointing to lasers source. 
 
Laser works as Tx (transmitter) and photo-detectors works as Rx (receiver).' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 51}","## Data Communication and Computer Network

### Microwave Transmission

- Microwave antennas concentrate waves, creating a beam.
- Multiple antennas can be aligned for extended reach.
- Microwaves have high frequencies and cannot penetrate obstacles like walls.
- Microwave transmission is weather and frequency-dependent.

### Infrared Transmission

- Infrared waves are between visible light and microwaves.
- Wavelength: 700nm to 1mm, Frequency: 300GHz to 430THz.
- Used for short-range communication, such as TV remotes.
- Infrared travels in a straight line and is directional.
- Cannot cross obstacles like walls due to high frequency.

### Light Transmission

- Light or optical signaling is the highest usable electromagnetic spectrum for data transmission.
- Achieved through LASER technology.
- Light travels in a straight line due to its frequency.
- Sender and receiver must be in line-of-sight.
- Requires laser and photo-detector at both ends due to unidirectional transmission.
- Laser beam is 1mm wide, requiring precise alignment between receptors.
- Laser acts as transmitter (Tx), photo-detectors as receiver (Rx)."
"page_content='Data Communication and Computer Network 
 45 
Lasers cannot penetrate obstacles such as walls, rain, and thick fog. Additionally, 
laser beam is distorted by wind, atmosphere temperature, or variation in temperature 
in the path. 
Laser is safe for data transmission as it is very difficult to tap 1mm wide laser without 
interrupting the communication channel.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 52}","## Data Communication and Computer Network

### Laser Communication

**Source:** C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
**Page:** 52

**Disadvantages of Laser Communication:**

- **Obstruction Sensitivity:** Lasers cannot penetrate obstacles such as walls, rain, and thick fog.
- **Distortion:** Laser beams can be distorted by wind, atmosphere temperature, or variation in temperature in the path.
- **Tapping Difficulty:** Laser signals are difficult to tap without interrupting the communication channel due to their narrow beam width (1mm wide)."
"page_content='Data Communication and Computer Network 
 46 
Multiplexing is a technique by which different analog and digital streams of 
transmission can be simultaneously processed over a shared link. Multiplexing divides 
the high capacity medium into low capacity logical medium which is then shared by 
different streams. 
Communication is possible over the air (radio frequency), using a physical media 
(cable), and light (optical fiber). All mediums are capable of multiplexing. 
When multiple senders try to send over a single medium, a device called Multiplexer 
divides the physical channel and allocates one to each. On the other end of 
communication, a De -multiplexer receives data from a single medium , identifies 
each, and sends to different receivers. 
Frequency Division Multiplexing 
When the carrier is frequency, FDM is used. FDM is an analog technology. FDM divides 
the spectrum or carrier bandwidth in logical channels and allocates one user to each 
channel. Each user can use the channel frequency independently and has exclusive 
access of it. All channels are divided in such a way that they do not overlap with each 
other. Channels are separated by guard bands. Guard band is a frequency which is 
not used by either channel. 
 
Time Division Multiplexing 
TDM is applied primarily on digital  signals but can be applied on analog signals as 
well. In TDM the shared channel is divided among its user by means of time slot. 
Each user can transmit data within the provided time slot only. Digital signals are 
divided in frames, equivalent to time slot i.e. frame of an optimal size which can be 
transmitted in given time slot. 
12. MULTIPLEXING' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 53}","**12. Multiplexing**

**Metadata:**
* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 53

**Description:**

Multiplexing is a technique for processing multiple analog and digital transmission streams simultaneously over a shared link.

**Multiplexing of Different Mediums:**

* Air (radio frequency)
* Physical media (cable)
* Light (optical fiber)

**Multiplexing Process:**

1. Multiplexer divides the high-capacity medium into low-capacity logical channels.
2. Different streams are assigned to these channels.
3. Demultiplexer receives data from the single medium, identifies each stream, and forwards it to the appropriate receiver.

**Types of Multiplexing:**

**Frequency Division Multiplexing (FDM):**

* Analog technology used when the carrier is frequency.
* Divides the carrier bandwidth into logical channels, assigning one channel to each user.
* Channels are separated by guard bands to prevent overlap.

**Time Division Multiplexing (TDM):**

* Used primarily for digital signals but can also be applied to analog signals.
* Divides the shared channel into time slots, with each user transmitting data within their specified time slot.
* Digital signals are divided into frames, each of which is transmitted within a time slot."
"page_content='Data Communication and Computer Network 
 47 
TDM works in synchronized mode. Both ends, i.e. Multiplexer and De-multiplexer are 
timely synchronized, and both switch to next channel simultaneously. 
 
When channel A transmits its frame at one end, the De-multiplexer provides media 
to channel A on the other end. As soon as the channel A’s time slot expires, this side 
switches to channel B. On the other end, the De-multiplexer works in a synchronized 
manner and provides media to channel B. Signals from different channels travel the 
path in interleaved manner. 
Wavelength Division Multiplexing 
Light has different wavelength (colors). In fiber optic mode, multiple optical carr ier 
signals are multiplexed into an optical fiber by using different wavelengths. This is an 
analog multiplexing technique and is done conceptually in the same manner as FDM 
but uses light as signals. 
 
Further, on each wavelength time division multiple xing can be incorporated to 
accommodate more data signals.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 54}","## Data Communication and Computer Network

**Page:** 54
**Source:** C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf

### Time Division Multiplexing (TDM)

* Works in synchronized mode
* Multiplexer and De-multiplexer are timely synchronized
* Signals from different channels travel the path in interleaved manner

### Wavelength Division Multiplexing (WDM)

* Multiple optical carrier signals are multiplexed into an optical fiber by using different wavelengths
* Analog multiplexing technique
* Done conceptually in the same manner as FDM
* Uses light as signals

#### Further Multiplexing

* Time division multiplexing can be incorporated on each wavelength to accommodate more data signals"
"page_content='Data Communication and Computer Network 
 48 
Code Division Multiplexing 
Multiple data signals can be transmitted over a single frequency by using Code 
Division Multiplexing. FDM divides the frequency in smaller channels but CDM allows 
its users to full bandwidth and transmit signals all the time using a unique code. CDM 
uses orthogonal codes to spread signals. 
Each station is assigned with a unique code, called chip. Signals travel  with these 
codes independently, inside the whole bandwidth. The receiver knows in advance the 
chip code signal it has to receive.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 55}","## Data Communication and Computer Network

### Code Division Multiplexing

**Metadata**

* Source: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf
* Page: 55

**Key Points**

- Code Division Multiplexing (CDM) allows multiple data signals to be transmitted over a single frequency.
- Unlike Frequency Division Multiplexing (FDM), which divides the frequency into smaller channels, CDM allows users to use the full bandwidth and transmit signals all the time using a unique code.
- CDM uses orthogonal codes to spread signals.
- Each station is assigned a unique code, called a chip.
- Signals travel with these codes independently within the entire bandwidth.
- The receiver knows in advance the chip code signal it has to receive."
"page_content='Data Communication and Computer Network 
 49 
Switching is process to forward packets coming in from one port to a port leading 
towards the destination. When data comes on a port it is called ingress, and when 
data leaves a port or goes out it is called egress. A communication system may 
include number of switches and nodes. At broad level, switching can be divided into 
two major categories: 
 Connectionless: The data is forwarded on behalf of forwarding tables. No 
previous handshaking is required and acknowledgements are optional. 
 Connection Oriented: Before switching data to be forwarded to destination, 
there is a need to pre-establish circuit along the path between both endpoints. 
Data is then forwarded on that circuit. After the transfer is completed, circuits 
can be kept for future use or can be turned down immediately. 
Circuit Switching 
When two nodes communicate with each other over a dedicated communication path, 
it is called circuit sw itching. There is a need of pre -specified route from which data 
travels and no other data is permitted. In circuit switching to transfer the data, circuit 
must be established so that the data transfer can take place. 
Circuits can be permanent or temporary. Applications which use circuit switching may 
have to go through three phases: 
 Establish a circuit 
 Transfer the data 
 Disconnect the circuit 
13. SWITCHING' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 56}","**Data Communication and Computer Network**
---
### Switching**

**Page:** 56

**Switching**

Switching is a process used to forward packets coming in from one port to a port leading towards the destination. When data comes on a port, the process is called ingress, and when data leaves a port or goes out, it is called egress. A communication system may include a number of switches and nodes.

**Types of Switching**

At a broad level, switching can be divided into two major categories:

**Connectionless**

* Data is forwarded on behalf of forwarding tables.
* No previous handshaking is required.
* Acknowledgements are optional.

**Connection Oriented**

* Before switching data to be forwarded to the destination, there is a need to pre-establish a circuit along the path between both endpoints.
* Data is then forwarded on that circuit.
* After the transfer is completed, circuits can be kept for future use or can be turned down immediately.

**Circuit Switching**

When two nodes communicate with each other over a dedicated communication path, it is called circuit switching. There is a need for a pre-specified route from which data travels, and no other data is permitted. In circuit switching, to transfer the data, a circuit must be established so that the data transfer can take place.

Circuits can be permanent or temporary. Applications that use circuit switching may have to go through three phases:

1. Establish a circuit
2. Transfer the data
3. Disconnect the circuit"
"page_content='Data Communication and Computer Network 
 50 
 
Circuit switching was designed for voice applications. Telephone is the best suitable 
example of circuit switching. Before a user can make a call, a virtual path between 
caller and callee is established over the network. 
Message Switching 
This technique was somewhere in middle of circuit switching and packet switching. 
In message switching, the whole message is treated as a data unit and is switching 
/ transferred in its entirety. 
A switch working on message switching, first receives the whole message and buffers 
it until there are resources available to transfer it to the next hop. If the next hop is 
not having enough resource to accommodate large size message, the message is 
stored and switch waits.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 57}","## Data Communication and Computer Network

### Circuit Switching

- Designed for voice applications
- Example: Telephone
- Virtual path is established between caller and callee before a call

### Message Switching

- Combination of circuit switching and packet switching
- Entire message is treated as a data unit and transferred in its entirety
- Switch receives the whole message and buffers it until resources are available to transfer it to the next hop
- If the next hop does not have enough resources, the message is stored and the switch waits

### Packet Switching

- Data is divided into small, fixed-size packets
- Each packet is transmitted independently with its own header
- Routers forward packets based on their destination address and hop count
- If a packet is lost, it is retransmitted

| Switching Technique | Data Unit | Path Establishment | Transmission |
|---|---|---|---|
| Circuit Switching | Circuit | Dedicated path | Continuous |
| Message Switching | Message | Store-and-forward | Message sent in entirety |
| Packet Switching | Packet | None | Each packet sent independently |"
"page_content='Data Communication and Computer Network 
 51 
 
This technique was considered substitute to circuit switching. As in circuit switching 
the whole path is blocked for two entities on ly. Message switching is replaced by 
packet switching. Message switching has the following drawbacks: 
 Every switch in transit path needs enough storage to accommodate entire 
message. 
 Because of store-and-forward technique and waits included until resources are 
available, message switching is very slow. 
 Message switching was not a solution for streaming media and real -time 
applications. 
Packet Switching 
Shortcomings of message switching gave birth to an idea of packet switching. The 
entire message is br oken down into smaller chunks called packets. The switching 
information is added in the header of each packet and transmitted independently. 
It is easier for intermediate networking devices to store small size packets and they 
do not take much resources either on carrier path or in the internal memory  of 
switches.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 58}","## Data Communication and Computer Network

### Packet Switching

**Metadata:**
* Page: 58
* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

### Drawbacks of Message Switching

* Each switch in the transit path requires sufficient storage to accommodate the entire message.
* Due to store-and-forward techniques and waiting for resource availability, message switching is slow.
* Message switching is not suitable for streaming media or real-time applications.

### Packet Switching

**Overview:**

* Entire message is broken into smaller chunks called packets.
* Each packet carries switching information in its header.
* Packets are transmitted independently.
* Intermediate networking devices can easily store small-sized packets, consuming fewer resources."
"page_content='Data Communication and Computer Network 
 52 
 
Packet switching enhances line efficiency as packets from multiple applications can 
be multiplexed over the carrier. The internet uses packet switching technique. Packet 
switching enables the user to differentiate data streams based on priorities. Packets 
are stored and forwarded according to their priority to provide quality of service.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 59}","## Data Communication and Computer Network

**Page Number:** 59

**Source:** C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf

### Packet Switching

**Enhancement of Line Efficiency:**

* Packets from multiple applications can be multiplexed over the carrier, improving line efficiency.

**Use in Internet:**

* The internet employs packet switching technology.

**Prioritization of Data Streams:**

* Packet switching allows users to differentiate data streams based on priorities.
* Packets are stored and forwarded according to their priority, ensuring quality of service."
"page_content='Data Communication and Computer Network 
 53 
Data Link Layer is second layer of OSI Layered Model. This layer is one of the most 
complicated layers and has complex functionalities and liabilities. Data link layer  
hides the details of underlying hardware and represents itself to upper layer as the 
medium to communicate. 
Data link layer works between two hosts which are directly connected in some sense. 
This direct connection could be point to point or broadcast. Systems on broadcast 
network are said to be on same link. The work of data link layer tends to get more 
complex when it is dealing with multiple hosts on single collision domain. 
Data link layer is responsible for converting data stream to signals bit by bit and to 
send that over the underlying hardware. At the receiving end, Data link layer picks 
up data from hardware which are in the form of electrical signals, assembles them in 
a recognizable frame format, and hands over to upper layer. 
Data link layer has two sub-layers: 
 Logical Link Control: It deals with protocols, flow-control, and error control. 
 Media Access Control: It deals with actual control of media. 
Functionality of Data-link Layer 
Data link layer does many tasks on behalf of upper layer. These are: 
Framing 
Data-link layer takes packets from Network Layer and encapsulates them into 
Frames. Then, it sends each frame bit-by-bit on the hardware. At receiver end, data 
link layer picks up signals from hardware and assembles them into frames. 
Addressing 
Data-link layer provides layer-2 hardware addressing mechanism. Hardware address 
is assumed to be unique on the link. It is encoded into hardware at the time of 
manufacturing. 
Synchronization 
When data frames are sent on the link, both machines must be synchronized in order 
to transfer to take place. 
Error Control 
Sometimes signals may have encountered problem in transitio n and the bits are 
flipped. These errors are detected and attempted to recover actual data bits. It also 
provides error reporting mechanism to the sender. 
14. DATA LINK LAYER INTRODUCTION' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 60}","**Data Link Layer**

**Metadata**

* Page Number: 60
* Line Numbers: 53-14
* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

**Introduction**

The Data Link Layer is the second layer of the OSI Layer Model. It is responsible for hiding the details of underlying hardware and representing itself to upper layers as the medium to communicate.

**Functionality**

* **Framing:** Encapsulates packets from the Network Layer into frames and sends them bit-by-bit on the hardware. Reassembles frames into packets at the receiver.
* **Addressing:** Provides layer-2 hardware addressing mechanism using unique MAC addresses.
* **Synchronization:** Ensures synchronization between machines to facilitate data transfer.
* **Error Control:** Detects errors in transmitted data and attempts to recover actual bits. Provides error reporting to the sender.

**Sub-Layers**

* **Logical Link Control:** Deals with protocols, flow control, and error control.
* **Media Access Control:** Controls access to the physical medium."
"page_content='Data Communication and Computer Network 
 54 
Flow Control 
Stations on same link may have different speed or capacity. Data-link layer ensures 
flow control that enables both machine to exchange data on same speed. 
Multi-Access 
When host on the shared link  tries to transfer the data, it has a high probability of 
collision. Data-link layer provides mechanism such as CSMA/CD to equip capability 
of accessing a shared media among multiple Systems.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 61}","**Data Communication and Computer Network**

**Page: 61**

**Line Numbers:** Not provided

**Source:** C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

**Section 1: Flow Control**

Data-link layer ensures flow control that enables both machines to exchange data at the same speed. This is necessary because stations on the same link may have different speeds or capacities.

**Section 2: Multi-Access**

When a host on a shared link tries to transfer data, it has a high probability of collision. The data-link layer provides mechanisms such as CSMA/CD to enable the capability of accessing shared media among multiple systems.

**Differences between Flow Control and Multi-Access**

| Feature | Flow Control | Multi-Access |
|---|---|---|
| Purpose | Ensure that data is exchanged at the same speed | Enable access to shared media |
| Mechanism | Not specified | CSMA/CD |"
"page_content='Data Communication and Computer Network 
 55 
There are many reasons such as noise, cross -talk etc., which may help data to get 
corrupted during transmission. The upper layer s work on some generalized view of 
network architecture and are not aware of actual hardware data processing. Hence, 
the upper layers expect error -free transmission between the systems. Most of the 
applications would not function expectedly if they receive erroneous data. 
Applications such as voice and video may not be that affected and with some errors 
they may still function well. 
Data-link layer uses some error control mechanism to ensure that frames (data bit 
streams) are transmitted with certain level of accuracy. But to understand how errors 
is controlled, it is essential to know what types of errors may occur. 
T ypes of Errors 
There may be three types of errors: 
Single bit error 
 
In a frame, there is only one bit, anywhere though, which is corrupt. 
Multiple bits error 
 
Frame is received with more than one bits in corrupted state. 
Burst error 
 
15. ERROR DETECTION AND 
CORRECTION' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 62}","## Error Detection and Correction

**Metadata**

* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 62

### Sources of Data Corruption

Data can become corrupted during transmission due to factors such as:

* Noise
* Cross-talk

### Error Detection and Correction by Data-Link Layer

To ensure accurate transmission, the data-link layer utilizes error control mechanisms.

### Types of Errors

There are three main types of errors that can occur in data transmission:

#### 1. Single Bit Error

* Occurs when only one bit in a frame becomes corrupted.

#### 2. Multiple Bits Error

* Occurs when multiple bits in a frame become corrupted.

#### 3. Burst Error

* Occurs when multiple adjacent bits in a frame become corrupted."
"page_content='Data Communication and Computer Network 
 56 
Frame contains more than1 consecutive bits corrupted. 
Error control mechanism may involve two possible ways: 
 Error detection 
 Error correction 
Error Detection 
Errors in the received frames are detected by means of Parity Check and Cyclic 
Redundancy Check (CRC). In both cases, few extra bits are sent along with actual 
data to confirm that bits received at other end are same as they were se nt. If the 
counter-check at receiver end fails, the bits are considered corrupted. 
Parity Check 
One extra bit is sent along with the original bits to make number of 1s either even in 
case of even parity, or odd in case of odd parity. 
The sender while creating a frame counts the number of 1s in it. For example, if even 
parity is used and number of 1s is even then one bit with value 0 is added. This way 
number of 1s remains even. If the number of 1s is odd, to make it even a bit with 
value 1 is added. 
 
The receiver simply counts the number of 1s in a frame. If the count of 1s is even 
and even parity is used, the frame is considered to be not-corrupted and is accepted. 
If the count of 1s is odd and odd parity is used, the frame is still not corrupted. 
If a single bit flips in transit, the receiver can detect it by counting the number of 1s. 
But when more than one bits are erroneous, then it is very hard for the receiver to 
detect the error. 
Cyclic Redundancy Check (CRC) 
CRC is a different approach to detect if the received frame contains valid data. This 
technique involves binary division of the data bits being sent. The divisor is generated 
using polynomials. The sender performs a division operation on the bits being sent 
and calculates th e remainder. Before sending the actual bits, the sender adds the 
remainder at the end of the actual bits. Actual data bits plus the remainder is called 
a codeword. The sender transmits data bits as codewords.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 63}","## Data Communication and Computer Network

### Error Control Mechanisms

**Page 63**

### Source: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf

### Error Control

- Error detection
- Error correction

### Error Detection

- Parity Check
- Cyclic Redundancy Check (CRC)

### Parity Check

- Adds an extra bit to make the total number of 1s either even (even parity) or odd (odd parity)
- Sender counts the number of 1s in the frame and adds a 0 (even parity) or 1 (odd parity) if necessary
- Receiver counts the number of 1s and checks if it matches the expected parity
- Can detect single-bit errors, but not multiple-bit errors

### Cyclic Redundancy Check (CRC)

- Involves binary division of the data bits
- Sender performs division and calculates the remainder
- Remainder is added to the end of the data bits, forming a codeword
- Receiver performs division on the codeword and checks if the remainder is zero
- Can detect multiple-bit errors, but does not provide correction"
"page_content='Data Communication and Computer Network 
 57 
 
At the other end, the receiver performs division operation on codewords using the 
same CRC divisor. If the remainder contains all zeros the data bits are accepted, 
otherwise it is considered as there is some data corruption occurred in transit. 
Error Correction 
In the digital world, error correction can be done in two ways: 
Backward Error Correction   
When the receiver detects an error in the data received, it requests back the sender 
to retransmit the data unit. 
Forward Error Correction 
When the receiver detects some error in the data received, it executes error-
correcting code, which helps it to auto-recover and to correct some kinds of errors. 
The first one, Backward Error Correction, is simple and can only be efficiently used 
where retransmitting is not expensive . For example , fiber optics. But in case of 
wireless transmission retransmitting may cost too much. In the latter case, Forward 
Error Correction is used. 
To correct the error in data frame, the receiver must know exactly which bit in the 
frame is corrupted. To locate the bit in error, redundant bits are used as parity bits 
for error detection. For example, we take ASCII words (7 bits data), then there could 
be 8 kind of information we need: first seven bits to tell us which bit is in error and 
one more bit to tell that there is no error.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 64}","### Data Communication and Computer Network

**Error Detection**

**Cyclic Redundancy Check (CRC)**

- **Description:** Appends a checksum to the data frame based on the CRC divisor.
- **Process:**
    - Sender calculates the CRC checksum and appends it to the data frame.
    - Receiver calculates the CRC checksum using the same CRC divisor.
    - If the receiver's checksum matches the sender's checksum, the data is accepted as valid. Otherwise, an error is detected.

**Error Correction**

**Backward Error Correction**

- **Description:** Receiver requests retransmission of data unit upon detecting an error.
- **Advantages:** Simple and efficient when retransmission is inexpensive (e.g., fiber optics).

**Forward Error Correction**

- **Description:** Receiver uses error-correcting codes to automatically recover from errors.
- **Advantages:** More efficient in scenarios where retransmission is costly (e.g., wireless transmission).

**Redundant Bits for Error Location**

- **Description:** Parity bits indicate which bit in the data frame contains an error.

**Example:**

With ASCII words (7-bit data), we can derive 8 bits of information:

- 7 bits for error location
- 1 bit for error indication (no error)"
"page_content='Data Communication and Computer Network 
 58 
For m data bits, r redundant bits are used. r bits can provide 2r combinations of 
information. In m+r bit codeword, there is possibility that the r bits themselves may 
get corrupted. So the number of r bits used must inform about m+r bit locations plus 
no-error information, i.e. m+r+1.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 65}","## Data Communication and Computer Network

**Error Detection and Correction**

### Redundant Bits

- For m data bits, r redundant bits are used.
- r bits can provide 2^r combinations of information.

### Codeword

- In m+r bit codeword, there is a possibility that the r bits themselves may get corrupted.
- The number of r bits used must inform about m+r bit locations plus no-error information, i.e., m+r+1.

**Metadata**
- Source: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf
- Page: 65"
"page_content='Data Communication and Computer Network 
 59 
Data-link layer is responsible for implementation of point-to-point flow and error 
control mechanism. 
Flow Control 
When a data frame (Layer-2 data) is sent from one host to another over a single 
medium, it is required that the sender and receiver should work at the same speed. 
That is, sender sends at a s peed on which the receiver can process and accept the 
data. What if the speed (hardware/software) of the sender or receiver differs? If 
sender is sending too fast the receiver may be overloaded, (swamped) and data may 
be lost. 
Two types of mechanisms can be deployed to control the flow: 
Stop and Wait 
This flow control mechanism forces the sender after transmitting a data frame to stop 
and wait until the acknowledgement of the data-frame sent is received. 
 
Sliding Window 
In this flow control mechanism, both sender and receiver agree  on the number of 
data-frames after which the acknowledgement should be sent. As we learnt, stop and 
wait flow control  mechanism wastes resources, this protocol tries to make use of 
underlying resources as much as possible. 
16. DATA LINK CONTROL AND 
PROTOCOLS' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 66}","## Data Communication and Computer Network

**Page Number:** 66

**Source:** C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

### Data-Link Layer

**Flow Control**

When sending a data frame from one host to another over a single medium, the sender and receiver must operate at the same speed. If the sender transmits data too quickly, the receiver may become overloaded and lose data.

**Flow Control Mechanisms**

* **Stop and Wait:** The sender stops transmitting data after sending a data frame and waits for an acknowledgment before continuing.
* **Sliding Window:** The sender and receiver agree on the number of data frames that can be sent before an acknowledgment is required. This method maximizes resource utilization.

**Error Control**

The data-link layer implements error control mechanisms to ensure the reliable transmission of data.

**Error Control Mechanisms**

* **Cyclic Redundancy Check (CRC):** A checksum algorithm used to detect transmission errors.
* **Automatic Repeat Request (ARQ):** A mechanism that requests the retransmission of lost or corrupted data."
"page_content='Data Communication and Computer Network 
 60 
Error Control 
When data-frame is transmitted, there is a probability that data-frame may be lost 
in the transit or it is received corrupted. In both cases, the receiver does not receive 
the correct data-frame and sender does not know anything about any loss. In such 
case, both sender and receiver are equipped with some protocols which helps them 
to detect transit errors such as  loss of data-frame. Hence, either the sender 
retransmits the data-frame or the receiver may request to resend the previous data-
frame. 
Requirements for error control mechanism: 
 Error detection: The sender and receiver, either both or any, must ascertain 
that there is some error in the transit. 
 Positive ACK:  When the receiver receives a correct frame, it should 
acknowledge it. 
 Negative ACK: When the receiver receives a damaged frame or a duplicate 
frame, it sends a NACK back to the sender and the sender must retransmit the 
correct frame. 
 Retransmission: The sender maintains a clock and sets a timeout period. If 
an acknowledgement of a data -frame previously transmitted does not arrive 
before the timeout, the sender retransmits the frame, thinking that the frame 
or its acknowledgement is lost in transit. 
There are three types of techniques available which Data -link layer may deploy to 
control the errors by Automatic Repeat Requests (ARQ): 
Stop and wait ARQ' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 67}","**Data Communication and Computer Network**

**Page: 67**

**Error Control**

**Error Detection and Correction Techniques**

When data frames are transmitted, there is a possibility that they may be lost or corrupted during transmission. In such cases, the receiver may not receive the correct data frame, and the sender may not be aware of the loss or corruption. To address this, sender and receiver employ protocols for error detection, ensuring that errors in transit are identified.

**Methods for Error Detection and Correction**

**Stop-and-Wait ARQ**

* The sender transmits a data frame and waits for an acknowledgment (ACK) from the receiver.
* If an ACK is not received within a specified timeout period, the sender assumes the frame was lost or corrupted and retransmits it.
* If the receiver receives a duplicate frame, it discards it and sends an ACK.

**Go-Back-N ARQ**

* The sender transmits a series of data frames and continues sending frames without waiting for ACKs.
* The receiver acknowledges each frame received and buffers out-of-order frames.
* If the sender does not receive an ACK for a frame within a timeout period, it retransmits all frames from the unacknowledged frame onward.

**Selective Repeat ARQ**

* Similar to Go-Back-N ARQ, the sender transmits a series of data frames.
* The receiver acknowledges each frame received, and the sender only retransmits frames that have not been acknowledged.
* Out-of-order frames are buffered and delivered to the receiver when the missing frames are received."
"page_content='Data Communication and Computer Network 
 61 
 
The following transition may occur in Stop-and-Wait ARQ: 
 The sender maintains a timeout counter. 
 When a frame is sent, the sender starts the timeout counter. 
 If acknowledgement of frame comes in time, the sender transmits the next 
frame in queue. 
 If acknowledgement does not come i n time, the sender assumes that either 
the frame or its acknowledgement is lost in transit. Sender retransmits the 
frame and starts the timeout counter. 
 If a negative acknowledgement is received, the sender retransmits the frame. 
Go-Back-N ARQ 
Stop and wait ARQ mechanism does not utilize the resources at their best. When the 
acknowledgement is received, the sender sits idle and does nothing. In Go -Back-N 
ARQ method, both sender and receiver maintain a window.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 68}","**Data Communication and Computer Network**

**Stop-and-Wait ARQ**

**Metadata:**

* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 68

**Process:**

1. The sender maintains a timeout counter.
2. When a frame is sent, the sender starts the timeout counter.
3. If acknowledgement of the frame arrives in time, the sender transmits the next frame in the queue.
4. If acknowledgement does not arrive in time, the sender assumes that either the frame or its acknowledgement is lost in transit. The sender retransmits the frame and starts the timeout counter.
5. If a negative acknowledgement is received, the sender retransmits the frame.

**Go-Back-N ARQ**

The Stop-and-Wait ARQ mechanism does not fully utilize resources. When an acknowledgement is received, the sender remains idle. In the Go-Back-N ARQ method, both the sender and receiver maintain a window.

**Key Differences between Stop-and-Wait ARQ and Go-Back-N ARQ:**

| Feature | Stop-and-Wait ARQ | Go-Back-N ARQ |
|---|---|---|
| Window Size | 1 | N |
| Sender Behavior | Transmits one frame at a time | Transmits multiple frames within the window size |
| Receiver Behavior | Maintains a timeout counter for each frame | Maintains a window of expected frames |
| Efficiency | Lower | Higher |
| Suitability | Suitable for low-delay, low-bandwidth networks | Suitable for high-delay, high-bandwidth networks |"
"page_content='Data Communication and Computer Network 
 62 
 
The sending -window size enables the sender to send multiple frames without 
receiving the acknowledgement of the previous ones. The receiving-window enables 
the receiver to receive multiple frames and acknowledge them. The receiver keeps 
track of incoming frame’s sequence number. 
When the sender sends all the frames in window, it checks up to what sequence 
number it has received positive acknowledgement. If all frames are positively 
acknowledged, the sender sends next set of frames. If sender finds that it has 
received NACK or has not receive any ACK for a particular frame, it retransmits all 
the frames after which it does not receive any positive ACK. 
Selective Repeat ARQ 
In Go-back-N ARQ, it is assumed that the receiver does not have any buffer space 
for its window size and ha s to process each frame as it comes. This enforces the 
sender to retransmit all the frames which are not acknowledged.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 69}","## Data Communication and Computer Network

### Page 62

#### Sending and Receiving Window

**Sending Window**

- Allows the sender to send multiple frames without receiving acknowledgments for previous ones.

**Receiving Window**

- Allows the receiver to receive multiple frames and acknowledge them.
- Tracks the sequence number of incoming frames.

**Operation**

1. Sender sends all frames in the window.
2. Sender checks for positive acknowledgments up to a certain sequence number.
3. If all frames are acknowledged, the sender sends the next set of frames.
4. If any frames are not positively acknowledged, the sender retransmits all frames after the last acknowledged frame.

### Selective Repeat ARQ

**Difference from Go-Back-N ARQ**

| **Feature** | **Go-Back-N ARQ** | **Selective Repeat ARQ** |
|---|---|---|
| Receiver's Buffer Space | No | Yes |
| Frame Processing | Process each frame as it comes | Process frames in sequence |
| Retransmission | Retransmits all unacknowledged frames | Retransmits only specific unacknowledged frames |

**Operation**

Selective Repeat ARQ assumes the receiver has buffer space to store incoming frames. This allows the receiver to process frames in sequence, even if they arrive out of order. The sender only retransmits the specific frames that are not acknowledged, maximizing efficiency."
"page_content='Data Communication and Computer Network 
 63 
 
In Selective-Repeat ARQ, the receiver while keeping track of sequence numbers, 
buffers the frames in memory and sends NACK for only fra me which is missing or 
damaged. 
The sender in this case, sends only packet for which NACK is received.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 70}","## Data Communication and Computer Network

### Selective-Repeat ARQ

**Metadata:**

* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 70

In Selective-Repeat ARQ, the receiver keeps track of sequence numbers and buffers the frames in memory. It sends NACK only for frames that are missing or damaged.

The sender, in this case, sends only packets for which NACK is received.

**Key Differences between ARQ Techniques:**

| Type | Window Size | Acknowledgment | Handling of Damaged Frames |
|---|---|---|---|
| Stop-and-Wait ARQ | 1 | Cumulative | Sender retransmits all frames starting from the damaged frame |
| Go-Back-N ARQ | N | Selective | Sender retransmits all frames from the damaged frame onwards |
| Selective-Repeat ARQ | N | Selective | Sender retransmits frames with missing or damaged data |

**Example:**

In Selective-Repeat ARQ, the receiver receives frames 1, 2, and 4 but not frame 3. It sends a NACK for frame 3. The sender, upon receiving the NACK, retransmits only frame 3. The receiver then successfully receives and buffers frame 3, completing the sequence."
"page_content='Data Communication and Computer Network 
 64 
Layer-3 in the OSI model is called Network layer. Network layer manages options 
pertaining to host and network addressing, managing sub -networks, and 
internetworking. 
Network layer takes the responsibility for routing packets from source to destination 
within or outside a subnet. Two different subnet may have different addressing 
schemes or non -compatible a ddressing types. Same with protocols, two different 
subnet may be operating on different protocols which are not compatible with each 
other. Network layer has the responsibility to route the packets from source to 
destination, mapping different addressing schemes and protocols. 
Layer-3 Functionalities 
Devices which work on Network Layer mainly focus on routing. Routing may include 
various tasks aimed to achieve a single goal. These can be: 
 Addressing devices and networks. 
 Populating routing tables or static routes. 
 Queuing incoming and outgoing data and then forwarding them according to 
quality of service constraints set for those packets. 
 Internetworking between two different subnets. 
 Delivering packets to destination with best efforts. 
 Provides connection oriented and connection less mechanism. 
Network Layer Features 
With its standard functionalities, Layer 3 can provide various features as: 
 Quality of service management 
 Load balancing and link management 
 Security 
 Interrelation of different protocols and subnets with different schema. 
 Different logical network design over the physical network design. 
 L3 VPN and tunnels can be used to provide end to end dedicated connectivity. 
Internet protocol is widely respected and deployed Network Layer protocol which 
helps to communicate end to end devices over the internet. It comes in two flavors. 
IPv4 which has ruled the world for decades but now is running out of address space. 
IPv6 is created to replace IPv4 and hopefully mitigates limitations of IPv4 too. 
17. NETWORK LAYER INTRODUCTION' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 71}","## Layer-3 (Network Layer)

### Metadata
- Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
- Page: 71

### Functionalities
- Addressing devices and networks
- Populating routing tables or static routes
- Queuing and forwarding data based on quality of service constraints
- Internetworking between different subnets
- Delivering packets to destinations with best efforts
- Providing connection-oriented and connectionless mechanisms

### Features
- Quality of service management
- Load balancing and link management
- Security
- Interrelation of protocols and subnets with different schemas
- Different logical network design over physical network design
- L3 VPN and tunnels for dedicated connectivity

### Internet Protocol (IP)
IP is a widely deployed network layer protocol for end-to-end communication over the internet.

### IP Versions
- IPv4: Used for decades, but its address space is depleting
- IPv6: Created to replace IPv4, mitigating its limitations"
"page_content='Data Communication and Computer Network 
 65 
Layer 3 network addressing is one of the major tasks of Network Layer. Network 
Addresses are always logical i.e. these are software based addresses which can be 
changed by appropriate configurations. 
A network address always points to host / node / server or it can represent a whole 
network. Network address is always configured on network interface card and is 
generally mapped by system with the MAC address (hardw are address or layer -2 
address) of the machine for Layer-2 communication. 
There are different kinds of network addresses in existence: 
 IP 
 IPX 
 AppleTalk 
We are discussing IP here as it is the only one we use in practice these days. 
 
IP addressing provides mechanism to differentiate between host s and network. 
Because IP addresses are assigned in hierarchical manner, a host always reside s 
under a specific network. The host which needs to communicate outside its subnet, 
needs to know destination network address, where the packet/data is to be sent. 
Hosts in different subnet need  a mechanism to locate each other. This task can be 
done by DNS. DNS is a server which provides Layer-3 address of remote host mapped 
18. NETWORK ADDRESSING' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 72}","## Network Addressing

**Metadata**:
- Page: 72
- Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

### Role of Layer 3 Network Addressing

- Layer 3 of the network layer is responsible for network addressing.
- Network addresses are logical software-based addresses that can be reconfigured.
- They identify hosts, nodes, or servers, or represent entire networks.
- Network addresses are assigned to network interface cards and typically mapped to Layer-2 hardware addresses (MAC addresses).

### Types of Network Addresses

Various types of network addresses exist, including:
- IP
- IPX
- AppleTalk

### IP Addressing

- IP addressing is the primary focus in modern networking.
- It provides a way to distinguish between hosts and networks.
- IP addresses are assigned hierarchically, placing hosts within specific networks.
- Hosts outside a subnet require destination network addresses to route packets.
- DNS (Domain Name System) servers facilitate communication between hosts in different subnets by translating domain names to Layer-3 addresses."
"page_content='Data Communication and Computer Network 
 66 
with its domain name or FQDN. When a host acquires the Layer -3 Address (IP 
Address) of the remote host, it forwards all its packet to its gateway. A gateway is a 
router equipped with all the information which leads to route packets to the 
destination host. 
Routers take help of routing tables, which has the following information: 
 Address of destination network 
 Method to reach the network 
Routers upon receiving a forwarding request, forwards packet to its next hop 
(adjacent router) towards the destination. 
The next router on the path follows the same thing and eventually the data packet 
reaches its destination. 
Network address can be of one of the following: 
 Unicast (destined to one host) 
 Multicast (destined to group) 
 Broadcast (destined to all) 
 Anycast (destined to nearest one) 
A router never forwards broadcast traffic by default. Multicast traffic uses special 
treatment as it is most a video stream or audio with highest priority. Anycast is just 
similar to unicast, except that the packets are delivered to the nearest destination 
when multiple destinations are available.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 73}","### Data Communication and Computer Network

**Page:** 73
**Source:** C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf

**Network Address Types**

Network addresses can be classified into the following types:

| Type | Description |
|---|---|
| Unicast | Destined to a single host |
| Multicast | Destined to a group of hosts |
| Broadcast | Destined to all hosts on a network |
| Anycast | Destined to the nearest available host from multiple possible destinations |

**Gateway and Routing**

When a host needs to communicate with another host that is not directly connected to its network, it sends its packets to a gateway. A gateway is a router that has information about how to route packets to different networks.

**Routing Tables**

Routing tables contain the following information:

* Address of the destination network
* Method to reach the network

When a router receives a packet, it looks up the destination address in its routing table and forwards the packet to the next hop (adjacent router) on the path to the destination. The next router on the path repeats the process until the packet reaches its destination.

**Broadcast Traffic**

Routers do not forward broadcast traffic by default. This is because broadcast traffic can flood a network with unnecessary data.

**Multicast Traffic**

Multicast traffic is treated specially by routers. This is because multicast traffic is often used for high-priority applications such as video and audio streaming.

**Anycast Traffic**

Anycast traffic is similar to unicast traffic, except that the packets are delivered to the nearest available destination from multiple possible destinations. This is useful for applications that require high availability, such as web servers."
"page_content='Data Communication and Computer Network 
 67 
When a device has multiple paths to reach a destination , it always selects one path 
by preferring it over others. This selection process is termed as Routing. Routing is 
done by special network devices called routers or it can be done by means of software 
processes. The software based routers have limited functionality and limited scope. 
A router is always configured with some default route. A default route tells the router 
where to forward a packet if there is no route found for specific destination. In case 
there are multiple path exist ing to reach the same destination, router can make 
decision based on the following information: 
 Hop Count 
 Bandwidth 
 Metric 
 Prefix-length 
 Delay 
Routes can be statically configured or dynamically learnt. One route can be configured 
to be preferred over others. 
Unicast routing 
Most of the traffic on the internet and intranets known as unicast data or unicast 
traffic is sent with specified destination. Routing unicast data over the internet is 
called unicast routing. It is the simplest form of routing because the destination is 
already known. Hence the router just has to look up the routing table and forward 
the packet to next hop. 
 
19. NETWORK ROUTING' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 74}","## Data Communication and Computer Network

## 19. NETWORK ROUTING

### Routing

- When a device has multiple paths to reach a destination, it always selects one path by preferring it over others. This selection process is termed as Routing.
- Routing is done by special network devices called routers or it can be done by means of software processes.

### Types of Routing

- **Static Routing:** Routes are manually configured and are not updated dynamically.
- **Dynamic Routing:** Routes are automatically learned and updated based on network conditions.

### Route Selection Criteria

- **Hop Count:** The number of routers a packet must pass through to reach its destination.
- **Bandwidth:** The amount of data that can be transmitted over a link.
- **Metric:** A value calculated by the router to determine the best path.
- **Prefix-length:** The number of bits in the network address that are common to the source and destination.
- **Delay:** The time it takes for a packet to travel from the source to the destination.

### Unicast Routing

- Unicast routing is used to send data from a single source to a single destination.
- It is the simplest form of routing because the destination is already known.
- The router just has to look up the routing table and forward the packet to the next hop.

### Example of Unicast Routing

- A user on a computer sends an email to another user on a different computer.
- The email is sent from the source computer to the router, which looks up the routing table and forwards the email to the next router.
- This process is repeated until the email reaches the destination computer."
"page_content='Data Communication and Computer Network 
 68 
Broadcast routing 
By default, the broadcast packets are not routed and forwarded by the routers on 
any network. Routers create broadcast domains. But it can be configured to forward 
broadcasts in some special cases. A broadcast message is destined to all network 
devices. 
Broadcast routing can be done in two ways (algorithm): 
 A router creates a data packet and then sends it to each host one by one. In 
this case, the router creates multiple copies of single data packet with different 
destination addresses. All packets are sent as unicast but because they are 
sent to all, it simulates as if router is broadcasting. 
 This method consumes lots of bandwidth and router must destination address 
of each node. 
 Secondly, when router receives a packet that is to be broadcasted, it simply 
floods those packets out of all interfaces. All routers are configured in the same 
way. 
 
 This method is easy on router ’s CPU but may cause the problem of duplicate 
packets received from peer routers. 
 Reverse path forwarding is a technique, in which router knows in advance 
about its predecessor from where it should receive broadcast. This technique 
is used to detect and discard duplicates.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 75}","## Data Communication and Computer Network

### Broadcast Routing

**Metadata:**
- Source: `C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf`
- Page: 75

**Broadcast Routing**

By default, routers create broadcast domains and do not route or forward broadcast packets. However, it can be configured to forward broadcasts in certain cases. A broadcast message is intended for all network devices.

**Algorithms for Broadcast Routing:**

- **Unicast Flooding:**
    - Router creates a data packet and sends it to each host individually.
    - Creates multiple copies of the data packet with different destination addresses.
    - All packets are sent as unicast, but it simulates broadcasting.
    - Consumes significant bandwidth and requires the router to know the destination address of each node.

- **Flooding:**
    - When a router receives a broadcast packet, it sends it out of all its interfaces.
    - All routers are configured similarly.
    - Easier on router's CPU but can lead to duplicate packets being received from peer routers.

**Reverse Path Forwarding:**

- A technique where routers know the predecessor from which they should receive broadcasts.
- Used to detect and discard duplicate packets."
"page_content='Data Communication and Computer Network 
 69 
Multicast Routing 
Multicast routing is special case of broadcast routing with significance difference and 
challenges. In broadcast routing , packets are sent to all nodes  even if they do not 
want it. But in Multicast routing, the data is sent to only nodes which wants to receive 
the packets. 
 
The router must know that there are nodes, which wish to receive multicast packets 
(or stream) then only it should forward. Multicast routing works spanning tree 
protocol to avoid looping. 
Multicast routing also uses reverse path Forwarding technique, to detect and discard 
duplicates and loops. 
Anycast Routing 
Anycast packet forwarding is a mechanism where multiple host s can have same 
logical address. When a packet destined to this logical address is received, it is sent 
to the host which is nearest in routing topology.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 76}","### Data Communication and Computer Network

**Multicast Routing**
**Page Number:** 76
**Line Numbers:** 69-81
**Source:** C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

Multicast routing is a special case of broadcast routing with significant differences and challenges. In broadcast routing, packets are sent to all nodes even if they do not need them. In contrast, multicast routing sends data only to nodes that want to receive the packets.

The router must know which nodes wish to receive multicast packets before it can forward the packets. Multicast routing uses a spanning tree protocol to avoid looping.

Multicast routing also uses reverse path forwarding to detect and discard duplicates and loops.

**Anycast Routing**
**Page Number:** 76
**Line Numbers:** 82-87
**Source:** C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf

Anycast packet forwarding is a mechanism where multiple hosts can have the same logical address. When a packet destined to this logical address is received, it is sent to the host that is nearest in routing topology.

**Difference between Multicast and Anycast Routing**

| Feature | Multicast Routing | Anycast Routing |
|---|---|---|
| Destination | Multiple hosts | Single nearest host |
| Address | Single logical address | Single logical address |
| Forwarding | Packets are sent to all nodes interested in receiving them | Packets are sent to the nearest node with the specified logical address |
| Spanning tree | Yes | No |
| Reverse path forwarding | Yes | No |"
"page_content='Data Communication and Computer Network 
 70 
 
Anycast routing is done with help o f DNS server. Whenever an Anycast packet is 
received it is enquired with DNS to where to send it. DNS provides the IP address 
which is the nearest IP configured on it. 
Unicast Routing Protocols 
There are two kinds of routing protocols available to route unicast packets: 
Distance Vector Routing Protocol 
Distance Vector is simple routing protocol which takes routing decision on the number 
of hops between source and destination. A route with less number of hops is 
considered as the best route. Every router advertises its set best routes to other 
routers. Ultimately, all routers build up their network topology based on the 
advertisements of their peer routers , for example, Routing Information Protocol 
(RIP). 
Link State Routing Protocol 
Link State protocol is slightly complicated protocol than Distance Vector. It takes into 
account the states of links of all the routers in a network. This technique helps routes 
build a common graph of the entire network. All routers then calculate their best path 
for routing purposes, for example, Open Shortest Path First (OSPF) and Intermediate 
System to Intermediate System (ISIS). 
Multicast Routing Protocols 
Unicast routing protocols use graphs while Multicast routing protocols use trees, i.e. 
spanning tree to avoid loops. The optimal tree is called shortest path spanning tree.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 77}","## Data Communication and Computer Network

### Unicast Routing Protocols

Unicast routing protocols are used to route unicast packets, which are packets that are sent from a single source to a single destination. There are two types of unicast routing protocols:

**1. Distance Vector Routing Protocol**

Distance vector routing protocol uses the number of hops between the source and destination to make routing decisions. A route with fewer hops is considered the best route. Each router periodically advertises its list of known best routes to other routers. All routers gradually build their own network topology based on information obtained from their neighbor routers.

**Example:** Routing Information Protocol (RIP)

**2. Link State Routing Protocol**

Link state routing protocol uses the state of links between all routers in a network to make routing decisions. This technique helps routers create a common graph of the entire network. All routers then compute their best path for routing packets.

**Example:** Open Shortest Path First (OSPF), Intermediate System to Intermediate System (ISIS)

### Multicast Routing Protocols

Multicast routing protocols are used to route multicast packets, which are packets that are sent from a single source to multiple destinations. Multicast routing protocols use trees (specifically, spanning trees) to avoid loops. The optimal tree is known as the shortest path spanning tree.

**Example:** Protocol Independent Multicast (PIM)"
"page_content='Data Communication and Computer Network 
 71 
 DVMRP: Distance Vector Multicast Routing Protocol 
 MOSPF: Multicast Open Shortest Path First 
 CBT: Core Based Tree 
 PIM: Protocol independent Multicast 
Protocol Independent Multicast is commonly used now. It has two flavors: 
 PIM Dense Mode 
This mode uses source-based trees. It is used in dense environment such as 
LAN. 
 PIM Sparse Mode 
This mode uses shared trees. It is used in sparse environment such as WAN. 
Routing Algorithms 
The routing algorithms are as follows: 
Flooding 
Flooding is simplest method packet forwarding. When a packet is received , the  
routers send it to all the interfaces except the one on which it was received. This 
creates too much burden on the network and lots of duplicate packets wandering in 
the network. 
Time to Live  (TTL) can be used to avoid infinite looping of packets. Th ere exists 
another approach for flooding, which is called Selective Flooding to reduce the 
overhead on the network. In this method , the router does not flood out on all the 
interfaces, but selective ones. 
Shortest Path 
Routing decision in networks, are mostly taken on the basis of cost between source 
and destination. Hop count plays major role here. Shortest path is a technique which 
uses various algorithms to decide a path with minimum number of hops. 
Common shortest path algorithms are: 
 Dijkstra's algorithm 
 Bellman Ford algorithm 
 Floyd Warshall algorithm' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 78}","**Data Communication and Computer Network**

**Multicasting Protocols**

**Distance Vector Multicast Routing Protocol (DVMRP)**
**Multicast Open Shortest Path First (MOSPF)**
**Core Based Tree (CBT)**
**Protocol Independent Multicast (PIM)**

**PIM Flavors**

**PIM Dense Mode:**
- Uses source-based trees
- Used in dense environments (e.g., LANs)

**PIM Sparse Mode:**
- Uses shared trees
- Used in sparse environments (e.g., WANs)

**Routing Algorithms**

**Flooding**
- Simplest packet forwarding method
- Routers send packets to all interfaces except the one it was received on
- Creates network burden and duplicate packets

**Time to Live (TTL)**
- Prevents infinite looping of packets

**Selective Flooding**
- Reduces network overhead by flooding only on selective interfaces

**Shortest Path**
- Routing decisions based on cost between source and destination
- Hop count plays a major role
- Algorithms include:
    - Dijkstra's algorithm
    - Bellman Ford algorithm
    - Floyd Warshall algorithm"
"page_content='Data Communication and Computer Network 
 72 
In real world scenario, networks under same administration are generally scattered 
geographically. There may exist requirement of connecting two different networks of 
same kind as well as of different kinds. Routing between two networks is called 
internetworking. 
Networks can be considered different based on various parameters such as, Protocol, 
topology, Layer-2 network and addressing scheme. 
In internetworking, routers have knowledge of each other’s address and addresses 
beyond them. They can be statically configured go on different network or they can 
learn by using internetworking routing protocol. 
 
Routing protocols which are used within an organization or administration are called 
Interior Gateway Protocols or IGP. RIP, OSPF are examples of IGP. Routing between 
different organizations or administrations may have Exterior Gateway Protocol, and 
there is only one EGP i.e. Border Gateway Protocol. 
T unneling 
If they are two geographically separate networks, which want  to communicate with 
each other, they may deploy a dedicated line between or they have to pass their data 
through intermediate networks. 
Tunneling is a mechanism by which two or more same networks communicate with 
each other, by passing intermediate networking complexities. Tunneling is configured 
at both ends. 
20. INTERNETWORKING' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 79}","## INTERNETWORKING

### Overview
In real-world scenarios, networks under the same administration are often scattered geographically. There may be requirements to connect two different networks of the same kind or different kinds. Routing between two networks is called **internetworking**.

### Network Classification
Networks can be considered different based on various parameters, such as:
- Protocol
- Topology
- Layer-2 network
- Addressing scheme

### Routing
In internetworking, routers have knowledge of each other's addresses and addresses beyond them. They can be statically configured to go on different networks or learn by using internetworking routing protocols.

### Routing Protocols
**Interior Gateway Protocols (IGP)** are routing protocols used within an organization or administration. Examples of IGPs include RIP and OSPF.
**Exterior Gateway Protocols (EGP)** are used for routing between different organizations or administrations. There is only one EGP: Border Gateway Protocol.

### Tunneling
When there are two geographically separate networks that want to communicate with each other, they may deploy a dedicated line between them or pass their data through intermediate networks.
**Tunneling** is a mechanism by which two or more same networks communicate with each other by passing intermediate networking complexities. Tunneling is configured at both ends.

### Examples
- **IP tunneling** is used to encapsulate an IP packet within another IP packet. This is often used to send IP traffic over non-IP networks, such as MPLS or Frame Relay.
- **GRE (Generic Routing Encapsulation)** is a tunneling protocol that can encapsulate various protocols, including IP, IPX, and AppleTalk.
- **L2TP (Layer 2 Tunneling Protocol)** is a tunneling protocol that can encapsulate Layer 2 frames, such as Ethernet or PPP."
"page_content='Data Communication and Computer Network 
 73 
 
When the data enters from one end of Tunnel, it is tagged. This tagged data is then 
routed inside the intermediate or transit networ k to reach the other end of Tunnel. 
When data exists the Tunnel its tag is removed and delivered to the other part of the 
network. 
Both ends seem as if they are directly connected and tagging makes data travel 
through transit network without any modifications. 
Packet Fragmentation 
Most Ethernet segments have their maximum transmission unit (MTU) fixed to 1500 
bytes. A data packet can have more or less packet length depending upon the 
application. Devices in the transit path also have their hardware an d software 
capabilities which tell what amount of data that device can handle and what size of 
packet it can process. 
If the data packet size is less than or equal to the size of packet the transit network 
can handle, it is processed neutrally. If the packet is larger, it is broken into smaller 
pieces and then forwarded. This is called packet fragmentation. Each fragment 
contains the same destination and source address and routed through transit path 
easily. At the receiving end it is assembled again. 
If a packet with DF (do  not fragment) bit set to 1 comes to a router which can not 
handle the packet because of its length, the packet is dropped.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 80}","**Data Communication and Computer Network**
---------------------------------------------------

**Metadata**

* Source: C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf
* Page: 80

**Tunneling**

* Data entering one end of a tunnel is tagged.
* Tagged data is routed through an intermediate network to reach the other end.
* Tag is removed from the data before it exits the tunnel.
* Ends of the tunnel appear directly connected, and tagging allows data to travel without modification.

**Packet Fragmentation**

* Most Ethernet segments have a maximum transmission unit (MTU) of 1500 bytes.
* Data packets can have varying lengths depending on the application.
* Devices in the transit path have hardware and software limitations on data and packet size handling.
* If a data packet size is within the transit network's handling capacity, it is processed without modification.
* Larger packets are broken into smaller fragments for forwarding.
* Fragments retain the original destination and source addresses and are routed separately.
* Fragments are reassembled at the receiving end.

**Exceptions**

* If a packet with the DF (do not fragment) bit set to 1 encounters a router that cannot handle its size, the packet is dropped."
"page_content='Data Communication and Computer Network 
 74 
When a packet is received by a router has its MF (more fragments) bit set to 1, the 
router then knows that it is  a fragmented packet and parts of the original packet is 
on the way. 
If packet is fragmented too small, the overhead is increases. If the packet is 
fragmented too large, intermediate router may not be able to process it and it might 
get dropped.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 81}","**Data Communication and Computer Networks**

**Page:** 81
**Line Numbers:** 74-81

**Fragmentation in Packet Switching**

- When a router receives a packet with the ""More Fragments"" (MF) bit set to 1, it indicates that the packet is fragmented and additional fragments of the original packet are on the way.
- Fragmenting packets into smaller units can be beneficial if the packets need to traverse links with different MTU (Maximum Transmission Unit) sizes.
- However, excessive fragmentation can lead to increased overhead due to the additional headers required for each fragment.
- If a packet is fragmented into excessively large fragments, intermediate routers may encounter difficulties processing them, potentially leading to packet drops."
"page_content='Data Communication and Computer Network 
 75 
Every computer in a network has an IP address by which it can be uniquely identified 
and addressed . An IP address is Layer -3 (Network Layer) logical address. T his 
address may change every time a computer restarts. A computer can have one IP at 
one instance of time and another IP at some different time. 
Address Resolution Protocol (ARP) 
While communicating, a host needs Layer -2 (MAC) address of the destination 
machine which belongs to the same broadcast domain or network. A MAC address is 
physically burnt into the Network Interface Card (NIC) of a machine and it never 
changes. 
On the other hand, IP address on the public domain is rarely changed. If the NIC is 
changed in case of some fault, the MAC address also changes. This way, for Layer-2 
communication to take place, a mapping between the two is required. 
 
21. NETWORK LAYER PROTOCOLS' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 82}","## Network Layer Protocols

### Metadata

* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 82

### IP Address

Every computer in a network has an IP address by which it can be uniquely identified and addressed. An IP address is a Layer 3 (Network Layer) logical address. This address may change every time a computer restarts. A computer can have one IP at one instance of time and another IP at some different time.

**Example:** 192.168.1.100

### MAC Address

While communicating, a host needs a Layer 2 (MAC) address of the destination machine that belongs to the same broadcast domain or network. A MAC address is physically burnt into the Network Interface Card (NIC) of a machine, and it never changes.

**Example:** 00:15:5D:0A:D5:67

### Address Resolution Protocol (ARP)

On the other hand, an IP address on the public domain is rarely changed. If the NIC is changed in case of some fault, the MAC address also changes. This way, for Layer 2 communication to take place, a mapping between the two is required."
"page_content='Data Communication and Computer Network 
 76 
To know the MAC address of remote host on a broadcast domain, a computer wishing 
to initiate communication sends out an ARP broadcast message asking, “Who has this 
IP address?” Because it is a broadcast, all hosts on the network segment (broadcast 
domain) receive this packet and process it. ARP packet contains the IP address of  
destination host, the sending host wishes to talk to. When a host receives an ARP 
packet destined to it, it replies back with its own MAC address. 
Once the host gets destination MAC address, it can communicate with remote host 
using Layer-2 link protocol. This MAC to IP mapping is saved into ARP cache of both 
sending and receiving hosts. Next time, if they require to communicate, they can 
directly refer to their respective ARP cache. 
Reverse ARP is a mechanism where host knows the MAC address of remote host but 
requires to know IP address to communicate. 
Internet Control Message Protocol (ICMP) 
ICMP is network diagnostic and error reporting protocol. ICMP belongs to IP protocol 
suite and uses IP as carrier protocol. After constructing ICMP packet , it is 
encapsulated in IP packet. Because IP itself is a best-effort non-reliable protocol, so 
is ICMP. 
Any feedback about network is sent back to the originating host. If some error in the 
network occurs, it is reported by means of ICMP. ICMP contains dozens of diagnostic 
and error reporting messages. 
ICMP-echo and ICMP -echo-reply are the most commonly used ICMP messages to 
check the reachability of end -to-end hosts. When a host receives an ICMP -echo 
request, it is bound to send back an ICMP-echo-reply. If there is any problem in the 
transit network, the ICMP will report that problem. 
Internet Protocol Version 4 (IPv4) 
IPv4 is 32 -bit addressing scheme used as TCP/IP host addressing mechanism. IP 
addressing enables every host on the TCP/IP network to be uniquely identifiable. 
IPv4 provides hierarchical addressing scheme which enables it to divide the network 
into sub-networks, each with well-defined number of hosts. IP addresses are divided 
into many categories: 
 Class A: It uses first octet for network addresses and last three octets for host 
addressing. 
 Class B: It uses first two octets for network addresses and last two for host 
addressing. 
 Class C: It uses first three octets for network addresses and last one for host 
addressing. 
 Class D:  It provides flat IP addressing scheme in contrast to hierarchical 
structure for above three.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 83}","**Data Communication and Computer Network**
{
""source"": ""C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf"",
""page"": 83
}

**ARP (Address Resolution Protocol)**

**Function:**

To determine the MAC address of a remote host on a broadcast domain.

**Process:**

1. A computer sends out an ARP broadcast message containing the IP address of the destination host.
2. All hosts on the network receive and process the broadcast message.
3. When the destination host receives the ARP broadcast, it replies with its MAC address.
4. The requesting host stores the MAC address in its ARP cache for future reference.

**Reverse ARP**

**Function:**

To determine the IP address of a remote host when its MAC address is known.

**ICMP (Internet Control Message Protocol)**

**Function:**

To provide diagnostic and error reporting for network operation.

**Characteristics:**

* Uses IP as a carrier protocol.
* Contains dozens of diagnostic and error reporting messages.
* ICMP-Echo and ICMP-Echo-Reply messages are used to check end-to-end host reachability.

**IPv4 (Internet Protocol Version 4)**

**Function:**

To provide 32-bit host addressing for TCP/IP networks.

**Characteristics:**

* Enables hierarchical addressing, dividing networks into subnetworks.
* IP addresses are divided into classes:
    * Class A: First octet for network, last three octets for host.
    * Class B: First two octets for network, last two for host.
    * Class C: First three octets for network, last one for host.
    * Class D: Flat IP addressing scheme for multicast."
"page_content='Data Communication and Computer Network 
 77 
 Class E: It is used as experimental. 
IPv4 also has well -defined address spaces to be used as private addresses (not 
routable on internet), and public addresses (provided by ISPs and are routable on 
internet). 
Though IP is not reliable one; it provides ‘Best-Effort-Delivery’ mechanism. 
Internet Protocol Version 6 (IPv6) 
Exhaustion of IPv4 addresses gave birth to a next generation Internet Protocol 
version 6. IPv6 addresses its nodes with 128 -bit wide address providing plenty of 
address space for future to be used on entire planet or beyond. 
IPv6 has introduced Anycast addressing but has removed the concept of 
broadcasting. IPv6 enables devices to self-acquire an IPv6 address and communicate 
within that subnet. This auto -configuration removes the dependability of Dynamic 
Host Configuration Protocol ( DHCP) servers. This way, even if the DHCP server on 
that subnet is down, the hosts can communicate with each other. 
IPv6 provides new feature of IPv6 mobility. Mobile IPv6-equipped machines can roam 
around without the need of changing their IP addresses. 
IPv6 is still in transition phase and is expected to replace IPv4 completely in coming 
years. At present, there are few networks which are running on IPv6. There are some 
transition mechanism s available for IPv6 -enabled networks to speak and roam 
around different networks easily on IPv4. These are: 
 Dual stack implementation 
 Tunneling 
 NAT-PT' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 84}","**Data Communication and Computer Network**
______

**IPv4**

- Provides ""Best-Effort-Delivery"" mechanism
- Address space: 32-bit wide
- Address types: Unicast, Multicast, Broadcast
- Private and public address spaces defined
- Classful addressing: A, B, C, D, E
  - Class E: Experimental

**IPv6**

- Developed to address IPv4 address exhaustion
- Address space: 128-bit wide
- Address types: Unicast, Multicast, Anycast
- No broadcasting concept
- Supports auto-configuration for address assignment
- Enables mobility for devices
- Still in transition phase

**IPv6 vs IPv4**

| Feature | IPv4 | IPv6 |
|---|---|---|
| Address width | 32 bits | 128 bits |
| Address space | Exhausted | Vast |
| Address types | Unicast, Multicast, Broadcast | Unicast, Multicast, Anycast |
| Auto-configuration | No | Yes |
| Mobility | Limited | Supported |
| Transition status | Stable | Transitioning |"
"page_content='Data Communication and Computer Network 
 78 
Next Layer in OSI Model is recognized as Transport Layer (Layer-4). All modules and 
procedures pertaining to transportation of data or data stream are categorized into 
this layer. As all other layers, this layer communicates with its peer Transport layer 
of the remote host. 
Transport layer offers peer -to-peer and end -to-end connection between two 
processes on remote hosts. Transport layer takes  data from upper layer (i.e. 
Application layer) and then breaks it into smaller size segments, numbers each byte, 
and hands over to lower layer (Network Layer) for delivery. 
Functions 
 This Layer is the first one which breaks the information data, supplied by 
Application layer in to smaller units called segments. It numbers every byte in 
the segment and maintains their accounting. 
 This layer ensures that data must be received in the same sequence in which 
it was sent. 
 This layer provides end -to-end delivery of data between host s which may or 
may not belong to the same subnet. 
 All server processes intend to communicate over the network are equipped 
with well-known Transport Service Access Points (TSAPs) also known as port 
numbers. 
End-to-End Communication 
A process on one host identifies its peer host on remote network by means of TSAPs, 
also known as Port numbers. TSAPs are very well defined and a process which is 
trying to communicate with its peer knows this in advance. 
22. TRANSPORT LAYER 
INTRODUCTION' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 85}","**TRANSPORT LAYER**

**Functions:**

- Breaks data into segments and numbers each byte.
- Ensures data is received in the same sequence it was sent.
- Provides end-to-end delivery of data.
- Server processes communicate using Transport Service Access Points (TSAPs) or port numbers.

**End-to-End Communication:**

- Processes identify each other using TSAPs/Port numbers.
- TSAPs are well-defined and known to communicating processes."
"page_content='Data Communication and Computer Network 
 79 
 
For example, when a DHCP client wants to communicate with remote DHCP server, 
it always requests on port number 67. When a DNS client wants to communicate with 
remote DNS server, it always requests on port number 53 (UDP). 
The two main Transport layer protocols are: 
1. Transmission Control Protocol 
It provides reliable communication between two hosts. 
2. User Datagram Protocol 
It provides unreliable communication between two hosts.' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 86}","**Data Communication and Computer Network**

**Metadata:**

* Source: C:\Users\adity\Downloads\data_communication_computer_network_tutorial.pdf
* Page: 86

**Key Sections:**

**Transport Layer Protocols**

**Subsections:**

**1. Transmission Control Protocol (TCP)**

* Provides reliable communication between two hosts

**2. User Datagram Protocol (UDP)**

* Provides unreliable communication between two hosts

**Examples:**

* DHCP client requests on port 67
* DNS client requests on port 53 (UDP)"
"page_content='Data Communication and Computer Network 
 80 
The transmission Control Protocol ( TCP) is one of the most important protocols of 
Internet Protocols suite. It is most widely used protocol for data transmission in 
communication network such as internet. 
Features 
 TCP is reliable protocol . That is, the receiver always sends either positive or 
negative acknowledgement about the data packet to the sender, so that the 
sender always has bright clue about whether the data packet is reached the 
destination or it needs to resend it. 
 TCP ensures that the data reaches intended destination in the same order it 
was sent. 
 TCP is connection oriented. TCP requires that connection between two remote 
points be established before sending actual data. 
 TCP provides error-checking and recovery mechanism. 
 TCP provides end-to-end communication. 
 TCP provides flow control and quality of service. 
 TCP operates in Client/Server point-to-point mode. 
 TCP provides full duplex server, i.e. it can perform roles of both receiver and 
sender. 
Header 
The length of TCP header is minimum 20 bytes and maximum 60 bytes. 
23. TRANSMISSION CONTROL 
PROTOCOL' metadata={'source': 'C:\\Users\\adity\\Downloads\\data_communication_computer_network_tutorial.pdf', 'page': 87}","## Data Communication and Computer Network

### Transmission Control Protocol (TCP)

#### Features

- **Reliability:** The receiver always sends either a positive or negative acknowledgement about the data packet to the sender, so the sender always knows whether the data packet reached the destination or needs to be resent.
- **Ordered Delivery:** TCP ensures that the data reaches the intended destination in the same order it was sent.
- **Connection-Oriented:** TCP requires that a connection between two remote points be established before sending actual data.
- **Error-Checking and Recovery:** TCP provides an error-checking and recovery mechanism.
- **End-to-End Communication:** TCP provides end-to-end communication, meaning data is sent directly from the source to the destination.
- **Flow Control and Quality of Service:** TCP provides flow control and quality of service to ensure reliable and efficient data transmission.
- **Client/Server Point-to-Point Mode:** TCP operates in Client/Server point-to-point mode, where one end acts as the client and the other as the server.
- **Full Duplex Service:** TCP provides full duplex service, meaning it can perform both receiving and sending functions simultaneously.

#### Header

The length of the TCP header is between 20 and 60 bytes."
"page_content='ptg10564057' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 0}","### Predefined Types in C++

**Metadata:**
- Source: C:\Users\adity\Downloads\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf
- Page: 0

**Key Sections:**

**1. Predefined Types**

**1.1. Integer Types**

- `bool`: True or false
- `char`: Unicode character
- `short`: 16-bit integer
- `int`: 32-bit integer
- `long`: 64-bit integer

**1.2. Floating-Point Types**

- `float`: 32-bit floating-point number
- `double`: 64-bit floating-point number
- `long double`: 80-bit or 128-bit floating-point number

**1.3. Void Type**

- `void`: Indicates the absence of a return value or parameter

**1.4. Wchar_t Type**

- `wchar_t`: Wide character

**2. Type Modifiers**

- `const`: Indicates the value cannot be modified
- `volatile`: Indicates the value may be changed by external factors
- `unsigned`: Indicates the value is non-negative
- `signed`: Indicates the value can be negative
- `long`: Extends the size of the type
- `short`: Reduces the size of the type

**3. Example Usage**

```cpp
int main() {
  bool flag = true;
  char ch = 'A';
  int i = 10;
  double d = 3.14;

  cout << flag << endl;
  cout << ch << endl;
  cout << i << endl;
  cout << d << endl;

  return 0;
}
```"
"page_content='ptg10564057
The
C++
Programming
Language
Fourth Edition
Bjarne Stroustrup
Upper Saddle River, NJ  Boston  Indianapolis  San Francisco
New York  Totonto  Montreal  London  Munich  Paris  Madrid
Capetown  Sydney  Tokyo  Singapore  Mexico City' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 1}","**Page 1**

**Metadata:**

* Source: C:\Users\adity\Downloads\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf
* Page: 1

**Title:** The C++ Programming Language

**Author:** Bjarne Stroustrup

**Edition:** Fourth Edition"
"page_content='ptg10564057
Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where
those designations appear in this book, and the publisher was aware of a trademark claim, the designations have been printed
with initial capital letters or in all capitals.
The author and publisher have taken care in the preparation of this book, but make no expressed or implied warranty of any
kind and assume no responsibility for errors or omissions. No liability is assumed for incidental or consequential damages in
connection with or arising out of the use of the information or programs contained herein.
The publisher offers excellent discounts on this book when ordered in quantity for bulk purchases or special sales, which
may include electronic versions and/or custom covers and content particular to your business, training goals, marketing
focus, and branding interests. For more information, please contact:
U.S. Corporate and Government Sales
(800) 382-3419
corpsales@pearsontechgroup.com
For sales outside the United States, please contact:
International Sales
international@pearsoned.com
Visit us on the Web: informit.com/aw
Library of Congress Cataloging-in-Publication Data
Stroustrup, Bjarne.
The C++ programming language / Bjarne Stroustrup.—Fourth edition.
pages cm
Includes bibliographical references and index.
ISBN 978-0-321-56384-2 (pbk. : alk. paper)—ISBN 0-321-56384-0 (pbk. : alk. paper)
1. C++ (Computer programming language) I. Title.
QA76.73.C153 S77 2013
005.13’3—dc23 2013002159
Copyright © 2013 by Pearson Education, Inc.
All rights reserved. Printed in the United States of America. This publication is protected by copyright, and permission must
be obtained from the publisher prior to any prohibited reproduction, storage in a retrieval system, or transmission in any
form or by any means, electronic, mechanical, photocopying, recording, or likewise. To obtain permission to use material
from this work, please submit a written request to Pearson Education, Inc., Permissions Department, One Lake Street, Upper
Saddle River, New Jersey 07458, or you may fax your request to (201) 236-3290.
This book was typeset in Times and Helvetica by the author.
ISBN-13: 978-0-321-56384-2
ISBN-10: 0-321-56384-0
Te xt printed in the United States on recycled paper at Edwards Brothers Malloy in Ann Arbor, Michigan.
Second printing, June 2013' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 2}","**Metadata:**

* Page Number: 2
* Line Number: 1-22
* Source: C:\Users\adity\Downloads\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf

**The C++ Programming Language**

**Library of Congress Cataloging-in-Publication Data**

Stroustrup, Bjarne.

The C++ programming language / Bjarne Stroustrup.—Fourth edition.

pages cm

Includes bibliographical references and index.

ISBN 978-0-321-56384-2 (pbk. : alk. paper)—ISBN 0-321-56384-0 (pbk. : alk. paper)

1. C++ (Computer programming language) I. Title.

QA76.73.C153 S77 2013

005.13’3—dc23 2013002159

**Copyright and Distribution Information:**

Copyright © 2013 by Pearson Education, Inc.

All rights reserved. Printed in the United States of America. This publication is protected by copyright, and permission must be obtained from the publisher prior to any prohibited reproduction, storage in a retrieval system, or transmission in any form or by any means, electronic, mechanical, photocopying, recording, or likewise. To obtain permission to use material from this work, please submit a written request to Pearson Education, Inc., Permissions Department, One Lake Street, Upper Saddle River, New Jersey 07458, or you may fax your request to (201) 236-3290.

**ISBNs:**

* ISBN-13: 978-0-321-56384-2
* ISBN-10: 0-321-56384-0

**Printing Information:**

* This book was typeset in Times and Helvetica by the author.
* Text printed in the United States on recycled paper at Edwards Brothers Malloy in Ann Arbor, Michigan.
* Second printing, June 2013"
"page_content='ptg10564057
Contents
Contents iii
Preface v
Preface to the Fourth Edition ...................................................... v
Preface to the Third Edition ........................................................ ix
Preface to the Second Edition ..................................................... xi
Preface to the First Edition ......................................................... xii
Part I: Introductory Material
1. Notes to the Reader ..................................................................... 3
2. A Tour of C++: The Basics ......................................................... 37
3. A Tour of C++: Abstraction Mechanisms ................................... 59
4. A Tour of C++: Containers and Algorithms ............................... 87
5. A Tour of C++: Concurrency and Utilities ................................. 111
Part II: Basic Facilities 133
6. Types and Declarations ............................................................... 135
7. Pointers, Arrays, and References ................................................ 171
8. Structures, Unions, and Enumerations ........................................ 201
9. Statements ................................................................................... 225
10. Expressions ................................................................................. 241' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 3}","## Contents

### Part I: Introductory Material

1. Notes to the Reader 
2. A Tour of C++: The Basics 
3. A Tour of C++: Abstraction Mechanisms 
4. A Tour of C++: Containers and Algorithms 
5. A Tour of C++: Concurrency and Utilities 

### Part II: Basic Facilities

6. Types and Declarations 
7. Pointers, Arrays, and References 
8. Structures, Unions, and Enumerations 
9. Statements 
10. Expressions"
"page_content='ptg10564057' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 0}","**Metadata:**

* Source: C:\Users\adity\Downloads\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf
* Page: 0

**Unformatted Document:**

ptg10564057

**Formatted Output:**

**Document**

**Page 10564057**

**Line 1**

ptg10564057"
"page_content='ptg10564057
The
C++
Programming
Language
Fourth Edition
Bjarne Stroustrup
Upper Saddle River, NJ  Boston  Indianapolis  San Francisco
New York  Totonto  Montreal  London  Munich  Paris  Madrid
Capetown  Sydney  Tokyo  Singapore  Mexico City' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 1}","### Metadata
Source: C:\Users\adity\Downloads\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf
Page: 1

### Content
The
C++
Programming
Language
Fourth Edition
By Bjarne Stroustrup"
"page_content='ptg10564057
Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where
those designations appear in this book, and the publisher was aware of a trademark claim, the designations have been printed
with initial capital letters or in all capitals.
The author and publisher have taken care in the preparation of this book, but make no expressed or implied warranty of any
kind and assume no responsibility for errors or omissions. No liability is assumed for incidental or consequential damages in
connection with or arising out of the use of the information or programs contained herein.
The publisher offers excellent discounts on this book when ordered in quantity for bulk purchases or special sales, which
may include electronic versions and/or custom covers and content particular to your business, training goals, marketing
focus, and branding interests. For more information, please contact:
U.S. Corporate and Government Sales
(800) 382-3419
corpsales@pearsontechgroup.com
For sales outside the United States, please contact:
International Sales
international@pearsoned.com
Visit us on the Web: informit.com/aw
Library of Congress Cataloging-in-Publication Data
Stroustrup, Bjarne.
The C++ programming language / Bjarne Stroustrup.—Fourth edition.
pages cm
Includes bibliographical references and index.
ISBN 978-0-321-56384-2 (pbk. : alk. paper)—ISBN 0-321-56384-0 (pbk. : alk. paper)
1. C++ (Computer programming language) I. Title.
QA76.73.C153 S77 2013
005.13’3—dc23 2013002159
Copyright © 2013 by Pearson Education, Inc.
All rights reserved. Printed in the United States of America. This publication is protected by copyright, and permission must
be obtained from the publisher prior to any prohibited reproduction, storage in a retrieval system, or transmission in any
form or by any means, electronic, mechanical, photocopying, recording, or likewise. To obtain permission to use material
from this work, please submit a written request to Pearson Education, Inc., Permissions Department, One Lake Street, Upper
Saddle River, New Jersey 07458, or you may fax your request to (201) 236-3290.
This book was typeset in Times and Helvetica by the author.
ISBN-13: 978-0-321-56384-2
ISBN-10: 0-321-56384-0
Te xt printed in the United States on recycled paper at Edwards Brothers Malloy in Ann Arbor, Michigan.
Second printing, June 2013' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 2}","**Metadata**

* Page Number: 2

**Copyright Information**

* Copyright © 2013 by Pearson Education, Inc.

**Table of Contents**

**Introduction**
* not provided in the given content

**Section 1: Overview of C++**
**Fundamentals**
* Basic Syntax
* Data Types
* Operators
* Expressions
* Statements
* Functions
* Classes and Objects
* Inheritance
* Polymorphism
* Templates
* Exception Handling

**Section 2: The Standard Library**
**Containers**
* Vectors
* Lists
* Maps
* Sets

**Algorithms**
* Sorting Algorithms
* Searching Algorithms
* Data Structures
* Iterators

**Input/Output**
* Input and Output Streams
* File I/O
* Formatted I/O

**Section 3: Advanced Topics**
**Concurrency**
* Threads
* Synchronization
* Concurrency Models

**Memory Management**
* Pointers
* Dynamic Memory Allocation
* Smart Pointers

**Templates**
* Function Templates
* Class Templates

**Exception Handling**
* Throwing Exceptions
* Catching Exceptions
* Error Handling

**Section 4: Case Studies**
* not provided in the given content

**Appendix**
* not provided in the given content

**Bibliography**
* not provided in the given content

**Index**
* not provided in the given content"
"page_content='ptg10564057
Contents
Contents iii
Preface v
Preface to the Fourth Edition ...................................................... v
Preface to the Third Edition ........................................................ ix
Preface to the Second Edition ..................................................... xi
Preface to the First Edition ......................................................... xii
Part I: Introductory Material
1. Notes to the Reader ..................................................................... 3
2. A Tour of C++: The Basics ......................................................... 37
3. A Tour of C++: Abstraction Mechanisms ................................... 59
4. A Tour of C++: Containers and Algorithms ............................... 87
5. A Tour of C++: Concurrency and Utilities ................................. 111
Part II: Basic Facilities 133
6. Types and Declarations ............................................................... 135
7. Pointers, Arrays, and References ................................................ 171
8. Structures, Unions, and Enumerations ........................................ 201
9. Statements ................................................................................... 225
10. Expressions ................................................................................. 241' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 3}","___
**Contents**
___

iii

**Preface**
___

v

**Preface to the Fourth Edition**
___

v

**Preface to the Third Edition**
___

ix

**Preface to the Second Edition**
___

xi

**Preface to the First Edition**
___

xii

**Part I: Introductory Material**
___

**1. Notes to the Reader**
___

3

**2. A Tour of C++: The Basics**
___

37

**3. A Tour of C++: Abstraction Mechanisms**
___

59

**4. A Tour of C++: Containers and Algorithms**
___

87

**5. A Tour of C++: Concurrency and Utilities**
___

111

**Part II: Basic Facilities**
___

133

**6. Types and Declarations**
___

135

**7. Pointers, Arrays, and References**
___

171

**8. Structures, Unions, and Enumerations**
___

201

**9. Statements**
___

225

**10. Expressions**
___

241"
"page_content='ptg10564057' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 0}","## The C++ Programming Language, 4th Edition

### Table of Contents

**Page 0**: Metadata
**Page 1**: Preface
**Page 2**: Acknowledgements
**Page 3**: Introduction
**Page 4**: The Basics
**Page 5**: Declarations and Definitions
**Page 6**: Control Flow
**Page 7**: Functions
**Page 8**: Arrays and Strings
**Page 9**: Pointers and References
**Page 10**: Classes and Objects
**Page 11**: Inheritance and Polymorphism
**Page 12**: Templates and Generic Programming
**Page 13**: Input and Output
**Page 14**: Error Handling
**Page 15**: The Standard Template Library (STL)
**Page 16**: Advanced Topics
**Page 17**: Appendix A: The C++ Language
**Page 18**: Appendix B: The C++ Standard Library
**Page 19**: Appendix C: The C++ Development Environment
**Page 20**: Index

### Metadata

- Source: C:\Users\adity\Downloads\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf
- Page: 0"
"page_content='ptg10564057
The
C++
Programming
Language
Fourth Edition
Bjarne Stroustrup
Upper Saddle River, NJ  Boston  Indianapolis  San Francisco
New York  Totonto  Montreal  London  Munich  Paris  Madrid
Capetown  Sydney  Tokyo  Singapore  Mexico City' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 1}","### Metadata

- Page Number: 1
- Source: C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf

### C++ Programming Language

- **Section 1: Introduction**
    - Fourth Edition by Bjarne Stroustrup
    - Published by Addison-Wesley Professional"
"page_content='ptg10564057
Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where
those designations appear in this book, and the publisher was aware of a trademark claim, the designations have been printed
with initial capital letters or in all capitals.
The author and publisher have taken care in the preparation of this book, but make no expressed or implied warranty of any
kind and assume no responsibility for errors or omissions. No liability is assumed for incidental or consequential damages in
connection with or arising out of the use of the information or programs contained herein.
The publisher offers excellent discounts on this book when ordered in quantity for bulk purchases or special sales, which
may include electronic versions and/or custom covers and content particular to your business, training goals, marketing
focus, and branding interests. For more information, please contact:
U.S. Corporate and Government Sales
(800) 382-3419
corpsales@pearsontechgroup.com
For sales outside the United States, please contact:
International Sales
international@pearsoned.com
Visit us on the Web: informit.com/aw
Library of Congress Cataloging-in-Publication Data
Stroustrup, Bjarne.
The C++ programming language / Bjarne Stroustrup.—Fourth edition.
pages cm
Includes bibliographical references and index.
ISBN 978-0-321-56384-2 (pbk. : alk. paper)—ISBN 0-321-56384-0 (pbk. : alk. paper)
1. C++ (Computer programming language) I. Title.
QA76.73.C153 S77 2013
005.13’3—dc23 2013002159
Copyright © 2013 by Pearson Education, Inc.
All rights reserved. Printed in the United States of America. This publication is protected by copyright, and permission must
be obtained from the publisher prior to any prohibited reproduction, storage in a retrieval system, or transmission in any
form or by any means, electronic, mechanical, photocopying, recording, or likewise. To obtain permission to use material
from this work, please submit a written request to Pearson Education, Inc., Permissions Department, One Lake Street, Upper
Saddle River, New Jersey 07458, or you may fax your request to (201) 236-3290.
This book was typeset in Times and Helvetica by the author.
ISBN-13: 978-0-321-56384-2
ISBN-10: 0-321-56384-0
Te xt printed in the United States on recycled paper at Edwards Brothers Malloy in Ann Arbor, Michigan.
Second printing, June 2013' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 2}","## The C++ Programming Language, Fourth Edition

### Metadata
- ISBN-13: 978-0-321-56384-2
- ISBN-10: 0-321-56384-0
- Copyright © 2013 by Pearson Education, Inc.
- Library of Congress Cataloging-in-Publication Data
  - Stroustrup, Bjarne.
  - The C++ programming language / Bjarne Stroustrup.—Fourth edition.
  - pages cm
  - Includes bibliographical references and index.
  - ISBN 978-0-321-56384-2 (pbk. : alk. paper)—ISBN 0-321-56384-0 (pbk. : alk. paper)
  - 1. C++ (Computer programming language) I. Title.
  - QA76.73.C153 S77 2013
  - 005.13’3—dc23 2013002159

## Disclaimer
The author and publisher have taken care in the preparation of this book, but make no expressed or implied warranty of any
kind and assume no responsibility for errors or omissions. No liability is assumed for incidental or consequential damages in
connection with or arising out of the use of the information or programs contained herein.

## Contact Information
### U.S. Corporate and Government Sales
(800) 382-3419
corpsales@pearsontechgroup.com

### For sales outside the United States
international@pearsoned.com

### Visit us on the Web
informit.com/aw"
"page_content='ptg10564057
Contents
Contents iii
Preface v
Preface to the Fourth Edition ...................................................... v
Preface to the Third Edition ........................................................ ix
Preface to the Second Edition ..................................................... xi
Preface to the First Edition ......................................................... xii
Part I: Introductory Material
1. Notes to the Reader ..................................................................... 3
2. A Tour of C++: The Basics ......................................................... 37
3. A Tour of C++: Abstraction Mechanisms ................................... 59
4. A Tour of C++: Containers and Algorithms ............................... 87
5. A Tour of C++: Concurrency and Utilities ................................. 111
Part II: Basic Facilities 133
6. Types and Declarations ............................................................... 135
7. Pointers, Arrays, and References ................................................ 171
8. Structures, Unions, and Enumerations ........................................ 201
9. Statements ................................................................................... 225
10. Expressions ................................................................................. 241' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 3}","### Metadata

- Source: C:\Users\adity\Downloads\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf
- Page: 3

### Contents

- Contents iii
- Preface v
- Preface to the Fourth Edition ...................................................... v
- Preface to the Third Edition ........................................................ ix
- Preface to the Second Edition ..................................................... xi
- Preface to the First Edition ......................................................... xii
- Part I: Introductory Material
- 1. Notes to the Reader ..................................................................... 3
- 2. A Tour of C++: The Basics ......................................................... 37
- 3. A Tour of C++: Abstraction Mechanisms ................................... 59
- 4. A Tour of C++: Containers and Algorithms ............................... 87
- 5. A Tour of C++: Concurrency and Utilities ................................. 111
- Part II: Basic Facilities 133
- 6. Types and Declarations ............................................................... 135
- 7. Pointers, Arrays, and References ................................................ 171
- 8. Structures, Unions, and Enumerations ........................................ 201
- 9. Statements ................................................................................... 225
- 10. Expressions ................................................................................. 241"
"page_content='ptg10564057
iv Contents
11. Select Operations ........................................................................ 273
12. Functions ..................................................................................... 305
13. Exception Handling .................................................................... 343
14. Namespaces ................................................................................. 389
15. Source Files and Programs .......................................................... 419
Part III: Abstraction Mechanisms 447
16. Classes ........................................................................................ 449
17. Construction, Cleanup, Copy, and Move .................................... 481
18. Overloading ................................................................................. 527
19. Special Operators ........................................................................ 549
20. Derived Classes ........................................................................... 577
21. Class Hierarchies ........................................................................ 613
22. Run-Time Type Information ....................................................... 641
23. Templates .................................................................................... 665
24. Generic Programming ................................................................. 699
25. Specialization .............................................................................. 721
26. Instantiation ................................................................................ 741
27. Templates and Hierarchies .......................................................... 759
28. Metaprogramming ....................................................................... 779
29. A Matrix Design ......................................................................... 827
Part IV: The Standard Library 857
30. Standard Library Summary ......................................................... 859
31. STL Containers ........................................................................... 885
32. STL Algorithms .......................................................................... 927
33. STL Iterators ............................................................................... 953
34. Memory and Resources ............................................................... 973
35. Utilities ........................................................................................ 1009
36. Strings ......................................................................................... 1033
37. Regular Expressions .................................................................... 1051
38. I/O Streams ................................................................................. 1073
39. Locales ........................................................................................ 1109
40. Numerics ..................................................................................... 1159
41. Concurrency ................................................................................ 1191
42. Threads and Tasks ....................................................................... 1209
43. The C Standard Library .............................................................. 1253
44. Compatibility .............................................................................. 1267
Index 1281' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 4}","**Part III: Abstraction Mechanisms**

## 16. Classes**

## 17. Construction, Cleanup, Copy, and Move**

### Construction and Initialization

- Constructors initialize objects by assigning values to their member variables.
- Every class has a default constructor if no user-defined constructor is provided.
- Constructors can be overloaded to create objects with different initializations.
- Objects can be initialized using a brace-enclosed list of values in the order of member variable declarations.

### Cleanup and Destruction

- Destructors release resources allocated by the object.
- Destructors are automatically called when an object goes out of scope or is explicitly deleted.
- Destructors can be overloaded to perform cleanup actions in a specific order.

### Copy and Move

- Copy semantics create a new object with the same value as an existing object.
- Move semantics transfer resources from one object to another, making the original object empty.
- Copy constructors are automatically generated if not user-defined.
- Move constructors are only generated if user-defined.
- Move operators are used to move resources from one object to another.

## 18. Overloading**

- Operator overloading allows user-defined behavior for operators to be used with class objects.
- Operators can be overloaded using the `operator` keyword followed by the operator symbol.
- Overloaded operators must have the same precedence and associativity as the built-in operator.
- Overloading can be used to extend functionality, improve readability, or provide custom behavior for specific types.

## 19. Special Operators**

- The `::` operator is used to access static members of a class.
- The `.*` and `->*` operators are used to access member pointers.
- The `sizeof` operator returns the size of an object or type.
- The `typeid` operator returns the type of an object.

## 20. Derived Classes**

- Derived classes inherit the members of their base classes.
- Derived classes can add new members and override inherited members.
- Derived class constructors call the constructors of their base classes.
- Inheritance provides code reuse, extensibility, and polymorphism.

## 21. Class Hierarchies**

- Class hierarchies are created when classes inherit from other classes, forming a tree-like structure.
- Derived classes can inherit from multiple base classes, forming a diamond hierarchy.
- Inheritance hierarchies allow for code reuse, customization, and specialization.

## 22. Run-Time Type Information**

- C++ provides mechanisms for determining the type of an object at run time using `dynamic_cast`, `typeid`, and `RTTI` (Run-Time Type Information).
- Dynamic casting allows objects to be safely cast to their derived types.
- Type information can be used for introspection, debugging, and serialization.

## 23. Templates**

- Templates are used to create generic classes and functions that can work with different types.
- Templates are defined using template parameters, which are replaced with actual types when the template is instantiated.
- Templates improve code efficiency, reduce code duplication, and provide flexibility.

## 24. Generic Programming**

- Generic programming involves using templates to create algorithms and data structures that work with any type.
- Generic programming improves code reusability, reduces bugs, and promotes abstraction.
- The Standard Library provides many generic algorithms and data structures, such as vector, list, and map.

## 25. Specialization**

- Template specialization allows for specific implementations of a template for certain types.
- Specialization is used to optimize performance, provide specialized behavior, or override default behavior for specific types.
- Specialized templates take precedence over general templates.

## 26. Instantiation**

- Template instantiation creates a concrete class or function for a specific type.
- Instantiation is performed by the compiler when the template is used with a specific type.
- Explicit instantiation can be used to force instantiation for a specific type.

## 27. Templates and Hierarchies**

- Templates and class hierarchies can be combined to create generic base classes and derived classes.
- This allows for flexible and extensible designs that can be customized for specific types.
- Templates provide flexibility in base class design, while hierarchies provide inheritance and polymorphism.

## 28. Metaprogramming**

- Metaprogramming involves using templates to write code that generates or manipulates other code at compile time.
- Metaprogramming techniques can be used for code generation, type checking, and compile-time computations.
- Metaprogramming provides powerful tools for advanced programming techniques.

## 29. A Matrix Design**

- The matrix design pattern demonstrates the use of templates, inheritance, and generic programming to create a reusable matrix"
"page_content='ptg10564057
Preface
All problems in computer science
can be solved by another level of indirection,
except for the problem of too many layers of indirection.
– David J. Wheeler
C++ feels like a new language. That is, I can express my ideas more clearly, more simply, and
more directly in C++11 than I could in C++98. Furthermore, the resulting programs are better
checked by the compiler and run faster.
In this book, I aim for completeness. I describe every language feature and standard-library
component that a professional programmer is likely to need. For each, I provide:
 Rationale: What kinds of problems is it designed to help solve? What principles underlie
the design? What are the fundamental limitations?
 Speciﬁcation: What is its deﬁnition? The level of detail is chosen for the expert program-
mer; the aspiring language lawyer can follow the many references to the ISO standard.
 Examples: How can it be used well by itself and in combination with other features? What
are the key techniques and idioms? What are the implications for maintainability and per-
formance?
The use of C++ has changed dramatically over the years and so has the language itself. From the
point of view of a programmer, most of the changes have been improvements. The current ISO
standard C++ (ISO/IEC 14882-2011, usually called C++11) is simply a far better tool for writing
quality software than were previous versions. How is it a better tool? What kinds of programming
styles and techniques does modern C++ support? What language and standard-library features sup-
port those techniques? What are the basic building blocks of elegant, correct, maintainable, and
efﬁcient C++ code? Those are the key questions answered by this book. Many answers are not the
same as you would ﬁnd with 1985, 1995, or 2005 vintage C++: progress happens.
C++ is a general-purpose programming language emphasizing the design and use of type-rich,
lightweight abstractions. It is particularly suited for resource-constrained applications, such as
those found in software infrastructures. C++ rewards the programmer who takes the time to master' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 5}","## Introduction

**Metadata:**

* Source: C:\Users\adity\Downloads\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf
* Page: 5

### C++ as a Modern Language

C++ has undergone significant advancements, making it a more capable and efficient programming language. This book aims to provide comprehensive coverage of modern C++, including:

### Content Structure

**Rationale:**

* Purpose and principles of language features
* Design limitations

**Specification:**

* Precise definitions per ISO standard

**Examples:**

* Practical usage and techniques
* Key idioms
* Implications for code quality and performance

### C++ Evolution and Enhancements

The C++ language has evolved over the years, with the latest ISO standard (C++11) offering notable improvements. This book explores the key changes and their impact on programming styles, techniques, and software development practices.

### C++ as a Modern Tool

C++ is a versatile programming language that empowers programmers with tools for developing:

* Elegant code
* Correct and maintainable software
* Efficient applications

This book delves into the fundamental building blocks and best practices for crafting high-quality C++ code."
"page_content='ptg10564057
vi Preface
techniques for writing quality code. C++ is a language for someone who takes the task of program-
ming seriously. Our civilization depends critically on software; it had better be quality software.
There are billions of lines of C++ deployed. This puts a premium on stability, so 1985 and
1995 C++ code still works and will continue to work for decades. However, for all applications,
you can do better with modern C++; if you stick to older styles, you will be writing lower-quality
and worse-performing code. The emphasis on stability also implies that standards-conforming
code you write today will still work a couple of decades from now. All code in this book conforms
to the 2011 ISO C++ standard.
This book is aimed at three audiences:
 C++ programmers who want to know what the latest ISO C++ standard has to offer,
 C programmers who wonder what C++ provides beyond C, and
 People with a background in application languages, such as Java, C#, Python, and Ruby,
looking for something ‘‘closer to the machine’’ – something more ﬂexible, something offer-
ing better compile-time checking, or something offering better performance.
Naturally, these three groups are not disjoint – a professional software developer masters more than
just one programming language.
This book assumes that its readers are programmers. If you ask, ‘‘What’s a for-loop?’’ or
‘‘What’s a compiler?’’ then this book is not (yet) for you; instead, I recommend myProgramming:
Principles and Practice Using C++ to get started with programming and C++. Furthermore, I
assume that readers have some maturity as software developers. If you ask ‘‘Why bother testing?’’
or say, ‘‘All languages are basically the same; just show me the syntax’’ or are conﬁdent that there
is a single language that is ideal for every task, this is not the book for you.
What features does C++11 offer over and above C++98? A machine model suitable for modern
computers with lots of concurrency. Language and standard-library facilities for doing systems-
level concurrent programming (e.g., using multicores). Regular expression handling, resource
management pointers, random numbers, improved containers (including, hash tables), and more.
General and uniform initialization, a simplerfor-statement, move semantics, basic Unicode support,
lambdas, general constant expressions, control over class defaults, variadic templates, user-deﬁned
literals, and more. Please remember that those libraries and language features exist to support pro-
gramming techniques for developing quality software. They are meant to be used in combination –
as bricks in a building set – rather than to be used individually in relative isolation to solve a spe-
ciﬁc problem. A computer is a universal machine, and C++ serves it in that capacity. In particular,
C++’s design aims to be sufﬁciently ﬂexible and general to cope with future problems undreamed
of by its designers.' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 6}","## Preface

### Audience

This book is aimed at three audiences:
- C++ programmers who want to know what the latest ISO C++ standard has to offer
- C programmers who wonder what C++ provides beyond C
- People with a background in application languages, such as Java, C#, Python, and Ruby, looking for something ‘‘closer to the machine’’ – something more flexible, something offering better compile-time checking, or something offering better performance.

### Assumptions

This book assumes that its readers are programmers. It also assumes that readers have some maturity as software developers.

### What's New in C++11

C++11 offers a number of new features over C++98, including:

- A machine model suitable for modern computers with lots of concurrency.
- Language and standard-library facilities for doing systems-level concurrent programming (e.g., using multicores).
- Regular expression handling, resource management pointers, random numbers, improved containers (including, hash tables), and more.
- General and uniform initialization, a simpler for-statement, move semantics, basic Unicode support, lambdas, general constant expressions, control over class defaults, variadic templates, user-defined literals, and more.

### Benefits of C++

C++ is a language for someone who takes the task of programming seriously. It puts a premium on stability, so 1985 and 1995 C++ code still works and will continue to work for decades. However, for all applications, you can do better with modern C++; if you stick to older styles, you will be writing lower-quality and worse-performing code. The emphasis on stability also implies that standards-conforming code you write today will still work a couple of decades from now. All code in this book conforms to the 2011 ISO C++ standard.

C++'s design aims to be sufficiently flexible and general to cope with future problems undreamed of by its designers."
"page_content='ptg10564057
vii
Acknowledgments
In addition to the people mentioned in the acknowledgment sections of the previous editions, I
would like to thank Pete Becker, Hans-J. Boehm, Marshall Clow, Jonathan Coe, Lawrence Crowl,
Walter Daugherty, J. Daniel Garcia, Robert Harle, Greg Hickman, Howard Hinnant, Brian
Kernighan, Daniel Krügler, Nevin Liber, Michel Michaud, Gary Powell, Jan Christiaan van Winkel,
and Leor Zolman. Without their help this book would have been much poorer.
Thanks to Howard Hinnant for answering many questions about the standard library.
Andrew Sutton is the author of the Origin library, which was the testbed for much of the discus-
sion of emulating concepts in the template chapters, and of the matrix library that is the topic of
Chapter 29. The Origin library is open source and can be found by searching the Web for ‘‘Origin’’
and ‘‘Andrew Sutton.’’
Thanks to my graduate design class for ﬁnding more problems with the ‘‘tour chapters’’ than
anyone else.
Had I been able to follow every piece of advice of my reviewers, the book would undoubtedly
have been much improved, but it would also have been hundreds of pages longer. Every expert
reviewer suggested adding technical details, advanced examples, and many useful development
conventions; every novice reviewer (or educator) suggested adding examples; and most reviewers
observed (correctly) that the book may be too long.
Thanks to Princeton University’s Computer Science Department, and especially Prof. Brian
Kernighan, for hosting me for part of the sabbatical that gav e me time to write this book.
Thanks to Cambridge University’s Computer Lab, and especially Prof. Andy Hopper, for host-
ing me for part of the sabbatical that gav e me time to write this book.
Thanks to my editor, Peter Gordon, and his production team at Addison-Wesley for their help
and patience.
College Station, Texas Bjarne Stroustrup' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 7}","**The C++ Programming Language, 4th Edition**

**Metadata**
- Source: C:\Users\adity\Downloads\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf
- Page: 7

**Acknowledgments**

In addition to the people mentioned in the acknowledgment sections of the previous editions, the author expresses gratitude to:

* Pete Becker
* Hans-J. Boehm
* Marshall Clow
* Jonathan Coe
* Lawrence Crowl
* Walter Daugherty
* J. Daniel Garcia
* Robert Harle
* Greg Hickman
* Howard Hinnant
* Brian Kernighan
* Daniel Krügler
* Nevin Liber
* Michel Michaud
* Gary Powell
* Jan Christiaan van Winkel
* Leor Zolman

The author acknowledges Howard Hinnant's assistance in answering questions about the standard library.

Andrew Sutton is recognized for authoring the Origin library, used as a testbed for discussions in the template chapters, and the matrix library featured in Chapter 29. The Origin library is open source and available online.

The author thanks their graduate design class for identifying issues in the ""tour chapters.""

Despite receiving suggestions from reviewers to enhance the book with technical details, advanced examples, and development conventions, the author chose to maintain a manageable length for the benefit of novice readers and educators.

**Additional Acknowledgments**

* Princeton University's Computer Science Department and Prof. Brian Kernighan for hosting the author during their sabbatical, facilitating the book's writing.
* Cambridge University's Computer Lab and Prof. Andy Hopper for providing similar support.
* Editor Peter Gordon and the production team at Addison-Wesley for their assistance and patience."
"page_content='ptg10564057
This page intentionally left blank' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 8}","```metadata
source: C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf
page: 8
```"
"page_content='ptg10564057
Preface to the Third Edition
Programming is understanding.
– Kristen Nygaard
I ﬁnd using C++ more enjoyable than ever. C++’s support for design and programming has
improved dramatically over the years, and lots of new helpful techniques have been developed for
its use. However, C++ is notjust fun. Ordinary practical programmers have achieved signiﬁcant
improvements in productivity, maintainability, ﬂexibility, and quality in projects of just about any
kind and scale. By now, C++ has fulﬁlled most of the hopes I originally had for it, and also suc-
ceeded at tasks I hadn’t even dreamt of.
This book introduces standard C++† and the key programming and design techniques supported
by C++. Standard C++ is a far more powerful and polished language than the version of C++ intro-
duced by the ﬁrst edition of this book. New language features such as namespaces, exceptions,
templates, and run-time type identiﬁcation allow many techniques to be applied more directly than
was possible before, and the standard library allows the programmer to start from a much higher
level than the bare language.
About a third of the information in the second edition of this book came from the ﬁrst. This
third edition is the result of a rewrite of even larger magnitude. It offers something to even the most
experienced C++ programmer; at the same time, this book is easier for the novice to approach than
its predecessors were. The explosion of C++ use and the massive amount of experience accumu-
lated as a result makes this possible.
The deﬁnition of an extensive standard library makes a difference to the way C++ concepts can
be presented. As before, this book presents C++ independently of any particular implementation,
and as before, the tutorial chapters present language constructs and concepts in a ‘‘bottom up’’
order so that a construct is used only after it has been deﬁned. However, it is much easier to use a
well-designed library than it is to understand the details of its implementation. Therefore, the stan-
dard library can be used to provide realistic and interesting examples well before a reader can be
assumed to understand its inner workings. The standard library itself is also a fertile source of pro-
gramming examples and design techniques.
This book presents every major C++ language feature and the standard library. It is org anized
around language and library facilities. However, features are presented in the context of their use.
† ISO/IEC 14882, Standard for the C++ Programming Language.' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 9}","## Metadata

* Source: C:\Users\adity\Downloads\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf
* Page: 9

## Preface to the Third Edition

### Key Concepts

- C++ as a powerful tool for programming and design
- Improvements and new techniques in C++
- Importance of standard C++

### Content Overview

This book covers the following key concepts:

- Standard C++ language features
- Key programming and design techniques
- Standard library facilities

### Organization

The book is organized around language and library facilities, with features presented in the context of their use."
"page_content='ptg10564057
x Preface to the Third Edition
That is, the focus is on the language as the tool for design and programming rather than on the lan-
guage in itself. This book demonstrates key techniques that make C++ effective and teaches the
fundamental concepts necessary for mastery. Except where illustrating technicalities, examples are
taken from the domain of systems software. A companion,The Annotated C++ Language Stan-
dard, presents the complete language deﬁnition together with annotations to make it more compre-
hensible.
The primary aim of this book is to help the reader understand how the facilities offered by C++
support key programming techniques. The aim is to take the reader far beyond the point where he
or she gets code running primarily by copying examples and emulating programming styles from
other languages. Only a good understanding of the ideas behind the language facilities leads to
mastery. Supplemented by implementation documentation, the information provided is sufﬁcient
for completing signiﬁcant real-world projects. The hope is that this book will help the reader gain
new insights and become a better programmer and designer.
Acknowledgments
In addition to the people mentioned in the acknowledgement sections of the ﬁrst and second edi-
tions, I would like to thank Matt Austern, Hans Boehm, Don Caldwell, Lawrence Crowl, Alan
Feuer, Andrew Forrest, David Gay, Tim Grifﬁn, Peter Juhl, Brian Kernighan, Andrew Koenig, Mike
Mowbray, Rob Murray, Lee Nackman, Joseph Newcomer, Alex Stepanov, David Vandevoorde,
Peter Weinberger, and Chris Van Wyk for commenting on draft chapters of this third edition. With-
out their help and suggestions, this book would have been harder to understand, contained more
errors, been slightly less complete, and probably been a little bit shorter.
I would also like to thank the volunteers on the C++ standards committees who did an immense
amount of constructive work to make C++ what it is today. It is slightly unfair to single out indi-
viduals, but it would be even more unfair not to mention anyone, so I’d like to especially mention
Mike Ball, Dag Br¨uck, Sean Corﬁeld, Ted Goldstein, Kim Knuttila, Andrew Koenig, Dmitry
Lenkov, Nathan Myers, Martin O’Riordan, Tom Plum, Jonathan Shopiro, John Spicer, Jerry
Schwarz, Alex Stepanov, and Mike Vilot, as people who each directly cooperated with me over
some part of C++ and its standard library.
After the initial printing of this book, many dozens of people have mailed me corrections and
suggestions for improvements. I have been able to accommodate many of their suggestions within
the framework of the book so that later printings beneﬁtted signiﬁcantly. Translators of this book
into many languages have also provided many clariﬁcations. In response to requests from readers, I
have added appendices D and E. Let me take this opportunity to thank a few of those who helped:
Dave Abrahams, Matt Austern, Jan Bielawski, Janina Mincer Daszkiewicz, Andrew Koenig, Diet-
mar K¨uhl, Nicolai Josuttis, Nathan Myers, Paul E. Sevin ¸ c, Andy Tenne-Sens, Shoichi Uchida,
Ping-Fai (Mike) Yang, and Dennis Yelle.
Murray Hill, New Jersey Bjarne Stroustrup' metadata={'source': 'C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf', 'page': 10}","### Preface to the Third Edition
**Content Structuring:**

**Metadata:**
- Page Number: 10
- Line Numbers: 1-23
- Source: C:\\Users\\adity\\Downloads\\The_C++_Programming_Language_4th_Edition_Bjarne_Stroustrup.pdf

**Formatting:**
- Key sections are identified and organized under appropriate headings and subheadings.
- Logical flow and clarity are ensured in the content.

**Code Formatting:**
- No code is provided in this section.

### Content

**Introduction**
- Focus is on C++ as a tool for design and programming, rather than on the language itself.
- Key techniques for effective use of C++ are demonstrated.
- Examples are drawn from the domain of systems software.
- Companion book, 'The Annotated C++ Language Standard,' provides a comprehensive language definition with annotations for better comprehension.

**Aims and Goals**
- To help readers understand how C++ facilities support key programming techniques.
- To take readers beyond copying examples and emulating other languages.
- To develop a deep understanding of the ideas behind the language facilities.
- To provide sufficient information for completing significant real-world projects.

**Acknowledgments**
- Individuals who provided comments on draft chapters of the third edition are thanked.
- Volunteers on the C++ standards committees who contributed to the development of the language and its standard library are acknowledged.
- Individuals who directly collaborated with the author on C++ and its standard library are mentioned.
- Individuals who provided corrections and suggestions for improvements after the initial printing are thanked.
- Translators of the book into various languages who provided clarifications are acknowledged."
"page_content='Robert Lafore
800 East 96th St.,Indianapolis,Indiana 4624 0 USA
Object-Oriented Programming in C++,
Fourth Edition
00 3087 FM  11/29/01  2:15 PM  Page i' metadata={'source': 'C:\\Users\\adity\\Downloads\\Object-Oriented Programming in C++ (4th Edition) by Robert Lafore.www.eeeuniversity.com.pdf', 'page': 1}","**Metadata:**

* Page: 1
* Source: C:\\Users\\adity\\Downloads\\Object-Oriented Programming in C++ (4th Edition) by Robert Lafore.www.eeeuniversity.com.pdf

**Robert Lafore's Object-Oriented Programming in C++, Fourth Edition**

**Table of Contents**

**Chapter 1: Introduction to Object-Oriented Programming**
* What is OOP?
* Benefits of OOP
* Object-oriented concepts

**Chapter 2: The Basics of C++ OOP**
* Classes and objects
* Encapsulation and data hiding
* Inheritance and polymorphism

**Chapter 3: Data Structures for OOP**
* Arrays and vectors
* Linked lists
* Stacks and queues

**Chapter 4: Essential Algorithms for OOP**
* Searching algorithms
* Sorting algorithms
* Recursion

**Chapter 5: Advanced Features of C++ OOP**
* Templates
* Exceptions
* Advanced class and object features

**Chapter 6: Projects**
* Developing a simple game engine
* Creating a data-driven application
* Building a web server

**Appendix A: C++ Reference**
* Keywords and operators
* C++ library
* Input/output functions

**Appendix B: Answers to Exercises**"
"page_content='Copyright  2002 by Sams Publishing
All rights reserved. No part of this book shall be reproduced, stored in a
retrieval system, or transmitted by any means, electronic, mechanical, photo-
copying, recording, or otherwise, without written permission from the pub-
lisher. No patent liability is assumed with respect to the use of the information
contained herein. Although every precaution has been taken in the preparation
of this book, the publisher and author assume no responsibility for errors or
omissions. Nor is any liability assumed for damages resulting from the use of
the information contained herein.
International Standard Book Number: 0-672-32308-7
Library of Congress Catalog Card Number: 2001094813
Printed in the United States of America
First Printing: December 2001
0403 02 01 4321
Trademarks
All terms mentioned in this book that are known to be trademarks or service
marks have been appropriately capitalized. Sams Publishing cannot attest to
the accuracy of this information. Use of a term in this book should not be
regarded as affecting the validity of any trademark or service mark.
Warning and Disclaimer
Every effort has been made to make this book as complete and as accurate as
possible, but no warranty or fitness is implied. The information provided is on
an “as is” basis. The author and the publisher shall have neither liability nor
responsibility to any person or entity with respect to any loss or damages
arising from the information contained in this book.
EXECUTIVE EDITOR
Michael Stephens
ACQUISITIONS EDITOR
Michael Stephens
MANAGING EDITOR
Matt Purcell
PROJECT EDITORS
Angela Boley
Christina Smith
INDEXER
Rebecca Salerno
PROOFREADER
Matt Wynalda
TECHNICAL EDITOR
Mark Cashman
TEAM COORDINATOR
Pamalee Nelson
MEDIA DEVELOPER
Dan Scherf
INTERIOR DESIGNER
Gary Adair
COVER DESIGNER
Alan Clements
PAGE LAYOUT
Ayanna Lacey
00 3087 FM  11/29/01  2:15 PM  Page ii' metadata={'source': 'C:\\Users\\adity\\Downloads\\Object-Oriented Programming in C++ (4th Edition) by Robert Lafore.www.eeeuniversity.com.pdf', 'page': 2}","### Formatting Instructions:

1. **Content Structuring**

   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion**

   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting**

   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

       Example:
       ```python
       # Python code example
       print(""Hello, World!"")
       
4. **Give difference in tabular format if possible**

5. **Include examples clearly if provided**

6. **Do not generate any content by yourself, just format provided content. Also, keep answers in brief. Do not cut short it-just put it full content as it is without changing anything.**

If the content is of 1000 words, give all 1000 words. Do not cut short it. Strictly follow this rule. No content or should be modified, and give the exact same length content as provided."
"page_content='Overview
Introduction 1
1T he Big Picture 9
2 C++ Programming Basics 29
3 Loops and Decisions 75
4S tructures 131
5 Functions 161
6 Objects and Classes 215
7A rrays and Strings 263
8 Operator Overloading 319
9 Inheritance 371
10 Pointers 429
11 Virtual Functions 503
12 Streams and Files 567
13 Multifile Programs 633
14 Templates and Exceptions 681
15 The Standard Template Library 725
16 Object-Oriented Software Development 801
A ASCII Chart 849
B C++ Precedence Table and Keywords 859
CM icrosoft Visual C++ 863
D Borland C++Builder 871
E Console Graphics Lite 881
F STL Algorithms and Member Functions 895
G Answers to Questions and Exercises 913
H Bibliography 977
Index 981
00 3087 FM  11/29/01  2:15 PM  Page iii' metadata={'source': 'C:\\Users\\adity\\Downloads\\Object-Oriented Programming in C++ (4th Edition) by Robert Lafore.www.eeeuniversity.com.pdf', 'page': 3}","**Table of Contents**

**I. Introduction**

1. The Big Picture
2. C++ Programming Basics
3. Loops and Decisions

**II. Data Structures**

4. Structures
5. Functions

**III. Object-Oriented Programming**

6. Objects and Classes
7. Arrays and Strings
8. Operator Overloading
9. Inheritance
10. Pointers
11. Virtual Functions
12. Streams and Files
13. Multifile Programs

**IV. Advanced Topics**

14. Templates and Exceptions
15. The Standard Template Library
16. Object-Oriented Software Development

**Appendices**

A. ASCII Chart
B. C++ Precedence Table and Keywords
C. Microsoft Visual C++
D. Borland C++Builder
E. Console Graphics Lite
F. STL Algorithms and Member Functions
G. Answers to Questions and Exercises
H. Bibliography
Index

**Metadata**

*Source:* C:\\Users\\adity\\Downloads\\Object-Oriented Programming in C++ (4th Edition) by Robert Lafore.www.eeeuniversity.com.pdf
*Page:* iii"
"page_content='CLAYTON CAFIERO
AN INTRODUCTION TO
PROGRAMMING AND COMPUTER SCIENCE
WITH PYTHON' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 0}","**Metadata:**

* Page Number: 0
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Table of Contents**

**Chapter 1: Introduction to Programming and Computer Science**

* 1.1 What is Programming?
* 1.2 What is Computer Science?
* 1.3 Programming Languages

**Chapter 2: Basic Programming Concepts**

* 2.1 Variables
* 2.2 Data Types
* 2.3 Operators
* 2.4 Control Flow

**Chapter 3: Functions**

* 3.1 Defining Functions
* 3.2 Calling Functions
* 3.3 Parameter Passing

**Chapter 4: Object-Oriented Programming**

* 4.1 Classes and Objects
* 4.2 Inheritance
* 4.3 Polymorphism

**Chapter 5: Data Structures**

* 5.1 Lists
* 5.2 Tuples
* 5.3 Dictionaries
* 5.4 Sets

**Chapter 6: Algorithms**

* 6.1 Introduction to Algorithms
* 6.2 Searching and Sorting Algorithms
* 6.3 Graph Algorithms

**Chapter 7: Python Programming**

* 7.1 Python Basics
* 7.2 Python Data Types
* 7.3 Python Control Flow
* 7.4 Python Functions
* 7.5 Python Object-Oriented Programming
* 7.6 Python Data Structures
* 7.7 Python Algorithms

**Chapter 8: Python Applications**

* 8.1 Data Analysis
* 8.2 Machine Learning
* 8.3 Web Development"
"page_content='An Introduction to
Programming and Computer Science
with Python
Clayton Cafiero
The University of V ermont' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 1}","## An Introduction to Programming and Computer Science with Python
**Metadata:**
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 1

### Content Structuring:

**Part I: The Basics of Programming**

- Chapter 1: Getting Started
  - Subchapter 1: What is Programming?
  - Subchapter 2: Installing Python
  - Subchapter 3: Writing Your First Program
- Chapter 2: Variables and Data Types
  - Subchapter 1: What are Variables?
  - Subchapter 2: Numeric Data Types
  - Subchapter 3: String Data Types
- Chapter 3: Control Flow
  - Subchapter 1: Conditionals
  - Subchapter 2: Loops
  - Subchapter 3: Functions

**Part II: Data Structures and Algorithms**

- Chapter 4: Lists
  - Subchapter 1: What are Lists?
  - Subchapter 2: List Operations
  - Subchapter 3: Searching and Sorting Lists
- Chapter 5: Dictionaries
  - Subchapter 1: What are Dictionaries?
  - Subchapter 2: Dictionary Operations
  - Subchapter 3: Searching and Sorting Dictionaries
- Chapter 6: Algorithms
  - Subchapter 1: What are Algorithms?
  - Subchapter 2: Common Algorithms
  - Subchapter 3: Algorithm Analysis

**Part III: Object-Oriented Programming**

- Chapter 7: Classes and Objects
  - Subchapter 1: What are Classes and Objects?
  - Subchapter 2: Creating and Using Objects
  - Subchapter 3: Inheritance
- Chapter 8: Exception Handling
  - Subchapter 1: What is Exception Handling?
  - Subchapter 2: How to Handle Exceptions
  - Subchapter 3: Common Exceptions
- Chapter 9: Input and Output
  - Subchapter 1: Reading Input
  - Subchapter 2: Writing Output
  - Subchapter 3: File I/O

### Code Formatting:

```python
# Python code example
print(""Hello, World!"")
```"
"page_content='This book is for free use under either the GNU F ree Documentation License or
the Creative Commons Attribution-ShareAlike 3.0 United States License. T ake
your pick.
• http://www.gnu.org/copyleft/fdl.html
• http://creativecommons.org/licenses/by-sa/3.0/us/
Book style has been adapted from the Memoir class for TEX, copyright © 2001–
2011 Peter R. Wilson, 2011–2022 Lars Madsen, and is thus excluded from the
above licence.
Images from Matplotlib.org in Chapter 15 are excluded from the license for
this material. They are subject to Matplotlib’s license at https://matplotlib.o
rg/stable/users/project/license.html . Photo of Edsger Dijkstra by Hamilton
Richards, University T exas at Austin, available under a Creative Commons CC
BY-SA 3.0 license: https://creativecommons.org/licenses/by-sa/3.0/.
No generative AI was used in writing this book.
Manuscript prepared by the author with Quarto, Pandoc, and X ƎLATEX.
Illustrations, diagrams, and cover artwork by the author, except for the graph
in Chapter 17, Exercise 2, which is by Harry Sharman.
V ersion: 0.2.0
ISBN: 979-8-9887092-0-6
Library of Congress Control Number: 2023912320
First edition
10 9 8 7 6 5 4 3
Printed in the United States of America' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 2}","**Metadata**

* Source: An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 2

**License Information**

This book is licensed under either the GNU Free Documentation License or the Creative Commons Attribution-ShareAlike 3.0 United States License.

* GNU Free Documentation License: http://www.gnu.org/copyleft/fdl.html
* Creative Commons Attribution-ShareAlike 3.0 United States License: http://creativecommons.org/licenses/by-sa/3.0/us/

**Book Style**

Adapted from the Memoir class for TEX, copyright © 2001–2011 Peter R. Wilson, 2011–2022 Lars Madsen.

**Exclusions**

* Images from Matplotlib.org in Chapter 15 are excluded from the license and are subject to Matplotlib's license: https://matplotlib.org/stable/users/project/license.html
* Photo of Edsger Dijkstra by Hamilton Richards, University Texas at Austin, available under a Creative Commons CC BY-SA 3.0 license: https://creativecommons.org/licenses/by-sa/3.0/

**Production Information**

* Manuscript prepared by the author with Quarto, Pandoc, and XƎLATEX.
* Illustrations, diagrams, and cover artwork by the author, except for the graph in Chapter 17, Exercise 2, which is by Harry Sharman.
* Version: 0.2.0
* ISBN: 979-8-9887092-0-6
* Library of Congress Control Number: 2023912320
* First edition
* Printed in the United States of America"
"page_content='F or the Bug and the Bul l' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 3}","**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 3

**Section: Programming vs. Computer Science**

**Subsection: The Bug and the Bull**

Programming is not the same as computer science, even though the two terms are often used interchangeably. Computer science is the study of computation, which includes the development of algorithms, data structures, and programming languages. Programming is the use of programming languages to create software.

One way to think about the difference is to consider the relationship between a bull and a farmer. The farmer uses the bull to plow the field, but the farmer is not a bull. Similarly, a programmer uses a programming language to create software, but the programmer is not a programming language.

Another way to think about the difference is to consider the different skills that are required for each. Computer scientists need to have a strong understanding of mathematics and logic. Programmers need to have a strong understanding of programming languages and software development.

Of course, there is some overlap between the two disciplines. Computer scientists often use programming to develop new algorithms and data structures. Programmers often use computer science concepts to design and implement software.

But ultimately, the two disciplines are distinct. Computer science is the study of computation. Programming is the use of programming languages to create software.

**Examples:**

* A computer scientist might develop a new algorithm for sorting data.
* A programmer might use that algorithm to write a sorting program."
"page_content='T able of contents
T able of contents i
Preface v
T o the student vii
Acknowledgements ix
1 Introduction 1
2 Programming and the Python Shell 11
2.1 Why learn a programming language? . . . . . . . . . . . . 12
2.2 Compilation and interpretation . . . . . . . . . . . . . . . 14
2.3 The Python shell . . . . . . . . . . . . . . . . . . . . . . . 16
2.4 Hello, Python! . . . . . . . . . . . . . . . . . . . . . . . . 18
2.5 Syntax and semantics . . . . . . . . . . . . . . . . . . . . 19
2.6 Introduction to binary numbers . . . . . . . . . . . . . . . 21
2.7 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
3 Types and literals 27
3.1 What are types? . . . . . . . . . . . . . . . . . . . . . . . . 28
3.2 Dynamic typing . . . . . . . . . . . . . . . . . . . . . . . . 31
3.3 Types and memory . . . . . . . . . . . . . . . . . . . . . . 33
3.4 More on string literals . . . . . . . . . . . . . . . . . . . . 35
3.5 Representation error of numeric types . . . . . . . . . . . 37
3.6 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
4 V ariables, statements, and expressions 43
4.1 Variables and assignment . . . . . . . . . . . . . . . . . . 44
4.2 Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . 49
4.3 Augmented assignment operators . . . . . . . . . . . . . . 54
4.4 Euclidean or “floor” division . . . . . . . . . . . . . . . . 54
4.5 Modular arithmetic . . . . . . . . . . . . . . . . . . . . . . 59
4.6 Exponentiation . . . . . . . . . . . . . . . . . . . . . . . . 66
4.7 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 68
4.8 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
5 F unctions 75
5.1 Introduction to functions . . . . . . . . . . . . . . . . . . 76
i' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}","## Table of Contents
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

## Preface
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

## To the Student
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

## Acknowledgements
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

## Chapter 1: Introduction
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

## Chapter 2: Programming and the Python Shell
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

### 2.1 Why learn a programming language?
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 2.2 Compilation and interpretation
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 2.3 The Python shell
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 2.4 Hello, Python!
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 2.5 Syntax and semantics
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 2.6 Introduction to binary numbers
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 2.7 Exercises
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

## Chapter 3: Types and literals
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

### 3.1 What are types?
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 3.2 Dynamic typing
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 3.3 Types and memory
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

### 3.4 More on string literals
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 3.5 Representation error of numeric types
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 3.6 Exercises
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

## Chapter 4: Variables, statements, and expressions
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

### 4.1 Variables and assignment
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

### 4.2 Expressions
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 4.3 Augmented assignment operators
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 4.4 Euclidean or “floor” division
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 4.5 Modular arithmetic
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}

### 4.6 Exponentiation
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 5}


### 4.7 Exceptions
metadata={'source': 'C:\\Users\\adity\\Downloads\\An In"
"page_content='ii T able of contents
5.2 A deeper dive into functions . . . . . . . . . . . . . . . . . 81
5.3 Passing arguments to a function . . . . . . . . . . . . . . 87
5.4 Scope . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
5.5 Pure and impure functions . . . . . . . . . . . . . . . . . 90
5.6 The math module . . . . . . . . . . . . . . . . . . . . . . . 91
5.7 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
5.8 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
6 Style 97
6.1 The importance of style . . . . . . . . . . . . . . . . . . . 97
6.2 PEP 8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
6.3 Whitespace . . . . . . . . . . . . . . . . . . . . . . . . . . 98
6.4 Names (identifiers) . . . . . . . . . . . . . . . . . . . . . . 100
6.5 Line length . . . . . . . . . . . . . . . . . . . . . . . . . . 101
6.6 Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
6.7 Comments in code . . . . . . . . . . . . . . . . . . . . . . 102
6.8 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
7 Console I/O 107
7.1 Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
7.2 Command line interface . . . . . . . . . . . . . . . . . . . 108
7.3 The input() function . . . . . . . . . . . . . . . . . . . . . 108
7.4 Converting strings to numeric types . . . . . . . . . . . . 110
7.5 Some ways to format output . . . . . . . . . . . . . . . . 115
7.6 Python f-strings and string interpolation . . . . . . . . . 116
7.7 Format specifiers . . . . . . . . . . . . . . . . . . . . . . . 117
7.8 Scientific notation . . . . . . . . . . . . . . . . . . . . . . 118
7.9 Formatting tables . . . . . . . . . . . . . . . . . . . . . . . 118
7.10 Example: currency converter . . . . . . . . . . . . . . . . 121
7.11 Format specifiers: a quick reference. . . . . . . . . . . . . 124
7.12 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
7.13 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
8 Branching and Boolean expressions 129
8.1 Boolean logic and Boolean expressions . . . . . . . . . . . 130
8.2 Comparison operators . . . . . . . . . . . . . . . . . . . . 133
8.3 Branching . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
8.4 if, elif, andelse . . . . . . . . . . . . . . . . . . . . . . . 136
8.5 Truthy and falsey . . . . . . . . . . . . . . . . . . . . . . . 138
8.6 Input validation . . . . . . . . . . . . . . . . . . . . . . . . 139
8.7 Some string methods . . . . . . . . . . . . . . . . . . . . . 141
8.8 Flow charts . . . . . . . . . . . . . . . . . . . . . . . . . . 144
8.9 Decision trees . . . . . . . . . . . . . . . . . . . . . . . . . 149
8.10 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
9 Structure, development, and testing 155
9.1 main the Python way. . . . . . . . . . . . . . . . . . . . . 156
9.2 Program structure . . . . . . . . . . . . . . . . . . . . . . 161
9.3 Iterative and incremental development . . . . . . . . . . . 161
9.4 Testing your code . . . . . . . . . . . . . . . . . . . . . . . 167
9.5 The origin of the term “bug” . . . . . . . . . . . . . . . . 174
9.6 Using assertions to test your code . . . . . . . . . . . . . 176' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 6}","**Table of Contents**
**5. Functions**
 - 5.2 A deeper dive into functions
 - 5.3 Passing arguments to a function
 - 5.4 Scope
 - 5.5 Pure and impure functions
 - 5.6 The math module
 - 5.7 Exceptions
 - 5.8 Exercises

**6. Style**
 - 6.1 The importance of style
 - 6.2 PEP 8
 - 6.3 Whitespace
 - 6.4 Names (identifiers)
 - 6.5 Line length
 - 6.6 Constants
 - 6.7 Comments in code
 - 6.8 Exercises

**7. Console I/O**
 - 7.1 Motivation
 - 7.2 Command line interface
 - 7.3 The input() function
 - 7.4 Converting strings to numeric types
 - 7.5 Some ways to format output
 - 7.6 Python f-strings and string interpolation
 - 7.7 Format specifiers
 - 7.8 Scientific notation
 - 7.9 Formatting tables
 - 7.10 Example: currency converter
 - 7.11 Format specifiers: a quick reference
 - 7.12 Exceptions
 - 7.13 Exercises

**8. Branching and Boolean expressions**
 - 8.1 Boolean logic and Boolean expressions
 - 8.2 Comparison operators
 - 8.3 Branching
 - 8.4 if, elif, andelse
 - 8.5 Truthy and falsey
 - 8.6 Input validation
 - 8.7 Some string methods
 - 8.8 Flow charts
 - 8.9 Decision trees
 - 8.10 Exercises

**9. Structure, development, and testing**
 - 9.1 main the Python way
 - 9.2 Program structure
 - 9.3 Iterative and incremental development
 - 9.4 Testing your code
 - 9.5 The origin of the term “bug”
 - 9.6 Using assertions to test your code"
"page_content='T able of contents iii
9.7 Rubberducking . . . . . . . . . . . . . . . . . . . . . . . . 178
9.8 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
9.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
10 Sequences 183
10.1 Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
10.2 Tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
10.3 Mutability and immutability . . . . . . . . . . . . . . . . 194
10.4 Subscripts are indices . . . . . . . . . . . . . . . . . . . . 198
10.5 Concatenating lists and tuples . . . . . . . . . . . . . . . 199
10.6 Copying lists . . . . . . . . . . . . . . . . . . . . . . . . . 200
10.7 Finding an element within a sequence . . . . . . . . . . . 201
10.8 Sequence unpacking . . . . . . . . . . . . . . . . . . . . . 203
10.9 Strings are sequences . . . . . . . . . . . . . . . . . . . . . 205
10.10 Sequences: a quick reference guide. . . . . . . . . . . . . 206
10.11 Slicing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
10.12 Passing mutables to functions. . . . . . . . . . . . . . . . 210
10.13 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
10.14 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
11 Loops and iteration 217
11.1 Loops: an introduction . . . . . . . . . . . . . . . . . . . . 218
11.2 while loops . . . . . . . . . . . . . . . . . . . . . . . . . . 219
11.3 Input validation with while loops . . . . . . . . . . . . . . 224
11.4 An ancient algorithm with awhile loop . . . . . . . . . . 227
11.5 for loops . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
11.6 Iterables . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
11.7 Iterating over strings . . . . . . . . . . . . . . . . . . . . . 236
11.8 Calculating a sum in a loop . . . . . . . . . . . . . . . . . 236
11.9 Loops and summations . . . . . . . . . . . . . . . . . . . . 237
11.10 Products . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
11.11 enumerate() . . . . . . . . . . . . . . . . . . . . . . . . . . 238
11.12 Tracing a loop. . . . . . . . . . . . . . . . . . . . . . . . . 241
11.13 Nested loops . . . . . . . . . . . . . . . . . . . . . . . . . 246
11.14 Stacks and queues . . . . . . . . . . . . . . . . . . . . . . 248
11.15 A deeper dive into iteration in Python. . . . . . . . . . . 251
11.16 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
12 Randomness, games, and simulations 257
12.1 The random module . . . . . . . . . . . . . . . . . . . . . . 258
12.2 Pseudo-randomness in more detail . . . . . . . . . . . . . 261
12.3 Using the seed . . . . . . . . . . . . . . . . . . . . . . . . 262
12.4 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264
13 File I/O 267
13.1 Context managers . . . . . . . . . . . . . . . . . . . . . . 268
13.2 Reading from a file . . . . . . . . . . . . . . . . . . . . . . 268
13.3 Writing to a file . . . . . . . . . . . . . . . . . . . . . . . . 269
13.4 Keyword arguments . . . . . . . . . . . . . . . . . . . . . 271
13.5 More on printing strings . . . . . . . . . . . . . . . . . . . 272
13.6 The csv module . . . . . . . . . . . . . . . . . . . . . . . . 273
13.7 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 277' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 7}","**Table of Contents**
9.7 Rubberducking . . . . . . . . . . . . . . . . . . . . . . . . 178
9.8 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
9.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
**10 Sequences** 183
10.1 Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
10.2 Tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
10.3 Mutability and immutability . . . . . . . . . . . . . . . . 194
10.4 Subscripts are indices . . . . . . . . . . . . . . . . . . . . 198
10.5 Concatenating lists and tuples . . . . . . . . . . . . . . . 199
10.6 Copying lists . . . . . . . . . . . . . . . . . . . . . . . . . 200
10.7 Finding an element within a sequence . . . . . . . . . . . 201
10.8 Sequence unpacking . . . . . . . . . . . . . . . . . . . . . 203
10.9 Strings are sequences . . . . . . . . . . . . . . . . . . . . . 205
10.10 Sequences: a quick reference guide. . . . . . . . . . . . . 206
10.11 Slicing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
10.12 Passing mutables to functions. . . . . . . . . . . . . . . . 210
10.13 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
10.14 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
**11 Loops and iteration** 217
11.1 Loops: an introduction . . . . . . . . . . . . . . . . . . . . 218
11.2 while loops . . . . . . . . . . . . . . . . . . . . . . . . . . 219
11.3 Input validation with while loops . . . . . . . . . . . . . . 224
11.4 An ancient algorithm with awhile loop . . . . . . . . . . 227
11.5 for loops . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
11.6 Iterables . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
11.7 Iterating over strings . . . . . . . . . . . . . . . . . . . . . 236
11.8 Calculating a sum in a loop . . . . . . . . . . . . . . . . . 236
11.9 Loops and summations . . . . . . . . . . . . . . . . . . . . 237
11.10 Products . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
11.11 enumerate() . . . . . . . . . . . . . . . . . . . . . . . . . . 238
11.12 Tracing a loop. . . . . . . . . . . . . . . . . . . . . . . . . 241
11.13 Nested loops . . . . . . . . . . . . . . . . . . . . . . . . . 246
11.14 Stacks and queues . . . . . . . . . . . . . . . . . . . . . . 248
11.15 A deeper dive into iteration in Python. . . . . . . . . . . 251
11.16 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
**12 Randomness, games, and simulations** 257
12.1 The random module . . . . . . . . . . . . . . ."
"page_content='iv T able of contents
13.8 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277
14 Data analysis and presentation 281
14.1 Some elementary statistics . . . . . . . . . . . . . . . . . . 281
14.2 Python’s statistics module . . . . . . . . . . . . . . . . . 287
14.3 A brief introduction to plotting with Matplotlib . . . . . 288
14.4 The basics of Matplotlib . . . . . . . . . . . . . . . . . . . 290
14.5 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
14.6 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
15 Exception handling 299
15.1 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 300
15.2 Handling exceptions . . . . . . . . . . . . . . . . . . . . . 304
15.3 Exceptions and flow of control . . . . . . . . . . . . . . . 307
15.4 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
16 Dictionaries 311
16.1 Introduction to dictionaries . . . . . . . . . . . . . . . . . 311
16.2 Iterating over dictionaries . . . . . . . . . . . . . . . . . . 316
16.3 Deleting dictionary keys . . . . . . . . . . . . . . . . . . . 318
16.4 Hashables . . . . . . . . . . . . . . . . . . . . . . . . . . . 319
16.5 Counting letters in a string . . . . . . . . . . . . . . . . . 321
16.6 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
16.7 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323
17 Graphs 325
17.1 Introduction to graphs . . . . . . . . . . . . . . . . . . . . 325
17.2 Searching a graph: breadth-first search. . . . . . . . . . . 327
17.3 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330
Appendices 333
A Glossary 333
B Mathematical notation 363
C pip and venv 365
D File systems 369
E Code for cover artwork 373' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 8}","## Table of contents
---

**13.8 Exercises** .................................................................................................................. 277

**14 Data analysis and presentation** ....................................................................................... 281

- **14.1 Some elementary statistics** ....................................................................................... 281
- **14.2 Python’s statistics module** ................................................................................... 287
- **14.3 A brief introduction to plotting with Matplotlib** ..................................................... 288
- **14.4 The basics of Matplotlib** ......................................................................................... 290
- **14.5 Exceptions** .............................................................................................................. 295
- **14.6 Exercises** ................................................................................................................. 295

**15 Exception handling** ....................................................................................................... 299

- **15.1 Exceptions** .............................................................................................................. 300
- **15.2 Handling exceptions** .............................................................................................. 304
- **15.3 Exceptions and flow of control** ................................................................................. 307
- **15.4 Exercises** ................................................................................................................. 308

**16 Dictionaries** ..................................................................................................................... 311

- **16.1 Introduction to dictionaries** ...................................................................................... 311
- **16.2 Iterating over dictionaries** .......................................................................................... 316
- **16.3 Deleting dictionary keys** ............................................................................................ 318
- **16.4 Hashables** .................................................................................................................. 319
- **16.5 Counting letters in a string** .......................................................................................... 321
- **16.6 Exceptions** .............................................................................................................. 322
- **16.7 Exercises** ................................................................................................................. 323

**17 Graphs** ................................................................................................................................. 325

- **17.1 Introduction to graphs** ............................................................................................... 325
- **17.2 Searching a graph: breadth-first search** ...................................................................... 327
- **17.3 Exercises** ................................................................................................................. 330

**Appendices** ................................................................................................................................ 333

- **A Glossary** ....................................................................................................................... 333
- **B Mathematical notation** .................................................................................................. 363
- **C pip and venv** .............................................................................................................. 365
- **D File systems** ............................................................................................................... 369
- **E Code for cover artwork** ................................................................................................ 373"
"page_content='Preface
This book has been written for use in University of Vermont’s CS1210
Introduction to Programming (formerly CS021). This is a semester long
course which covers much of the basics of programming, and an intro-
duction to some fundamental concepts in computer science. Not being
happy with any of the available textbooks, I endeavored to write my own.
Drafting began in August 2022, essentially writing a chapter a week over
the course of the semester, delivered to students via UVM’s learning
management system. The text was revised, edited, and expanded in the
following semester.
UVM’s CS1210 carries “QR” (quantitative reasoning) and “QD”
(quantitative and data literacy) designations. Accordingly, there’s some
mathematics included:
• writing functions to perform calculations,
• writing programs to generate interesting integer sequences,
• demonstrating the connection between pure functions and mathe-
matical functions,
• demonstrating the connection between list indices and subscript
notation,
• demonstrating that summations are loops,
and so on, to address the QR requirement. To address the QD require-
ment, we include some simple plotting with Matplotlib. Other aspects
of these requirements are addressed in programming assignments, lab
exercises, and lecture.
Nevertheless, despite this book’s primary objective as instructional
material for a specific course at UVM, others may find this material
useful.
–CC, July 2023
v' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 9}","**Preface**

**Metadata:**
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 9

**Content Overview:**

This book serves as an instructional material for UVM's CS1210: Introduction to Programming. It covers:

- Basics of programming
- Fundamental computer science concepts
- Mathematical concepts integrated into programming, such as:
    - Functions for calculations
    - Programs for integer sequence generation
    - Pure functions and mathematical functions
    - List indices and subscript notation
    - Summations and loops
- Simple plotting with Matplotlib

**Intended Audience:**

- Primarily aimed at students enrolled in UVM's CS1210 course
- May also prove useful for others seeking an introduction to programming and computer science concepts"
"page_content='vi Preface
Errata and suggestions
I’m fully aware that this text isn’t quite “ready for prime time,” but, as
it’s been said, “time and tide wait for no one,” and a new semester ap-
proaches. So we push this unfinished work out of the nest, and hope for
the best. If you have errata (which I’m certain are abundant) or sugges-
tions, I’m all ears and I welcome your feedback—bouquets or brickbats
or anything in between.
Contact
Clayton Cafiero
The University of Vermont
College of Engineering and Mathematical Sciences
Department of Computer Science
Innovation E309
82 University Place
Burlington, VT 05405-0125 (USA)
cbcafier@uvm.edu
https://www.uvm.edu/~cbcafier' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 10}","# Preface

## Metadata
- Page Number: 10
- Line Number: 1-13
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

## Errata and Suggestions

> I’m fully aware that this text isn’t quite “ready for prime time,” but, as it’s been said, “time and tide wait for no one,” and a new semester approaches. So we push this unfinished work out of the nest and hope for the best. If you have errata (which I’m certain are abundant) or suggestions, I’m all ears and I welcome your feedback—bouquets or brickbats or anything in between.

## Contact

Clayton Cafiero
The University of Vermont
College of Engineering and Mathematical Sciences
Department of Computer Science
Innovation E309
82 University Place
Burlington, VT 05405-0125 (USA)
cbcafier@uvm.edu
https://www.uvm.edu/~cbcafier"
"page_content='T o the student
Learning how to program is fun and rewarding, but it demands a rather
different, structured approach to problem solving. This comes with time
and practice. While I hope this book will help you learn how to solve
problems with code, the only way to learn programming is by doing it.
There’s more than a little trial and error involved. If you find yourself
struggling, don’t despair—it just takes time and practice.
You will make mistakes—that’s part of the process. As John Dewey
once said, “Failure is instructive. The person who really thinks learns
quite as much from their failures as from their successes.”
You’ll notice in this book that there are abundant examples given
using the Python shell. The Python shell is a great way to experiment
and deepen your understanding. I encourage you to follow along with
the examples in the book, and enter them into the shell yourself. Unlike
writing programs and then running them, interacting with the Python
shell gives you immediate feedback. If you don’t understand something
as well as you’d like, turn to the shell. Experiment there, and then go
back to writing your program.
If you take away only one thing from a first course in programming, it
should not be the details of the syntax of the language. Rather, it should
be an ability todecompose a problem into smaller units, to solve the
smaller problems in code, and then to build up a complete solution from
smaller subproblems. The primary vehicle for this approach isfunctions.
So make sure you gain a firm grasp of functions (see in particular Chapter
5).
Good luck and happy coding!
vii' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 11}","**Introduction**

**Understanding Programming**

* Programming is an engaging and rewarding endeavor that requires a unique, structured approach to problem-solving.
* Practice and time are crucial for the development of proficient programming skills.
* The process of learning programming involves experimentation and potential setbacks, but these should not discourage individuals. Mistakes are a valuable part of the learning journey.

**Importance of the Python Shell**

* Examples in the Python shell are provided throughout the book to facilitate comprehension.
* Interacting directly with the Python shell allows for immediate feedback and experimentation.
* Understanding concepts through interactive shell usage helps enhance programming effectiveness.

**Core Concept: Decomposition and Functions**

* The key to successful programming lies in the ability to break down complex problems into smaller units.
* Functions are a fundamental tool for this approach, allowing programmers to solve smaller problems and build complete solutions from them.
* Chapter 5 provides a detailed explanation of functions and their importance in programming.

**Conclusion**

* The ultimate goal of an introductory programming course is to foster the ability to dissect problems, solve them with code, and construct comprehensive solutions.
* Functions serve as the primary vehicle for this approach, ensuring that students attain a firm grasp of this concept."
"page_content='Acknowledgements
Thanks to my colleagues, students, and teaching assistants in the Depart-
ment of Computer Science at the University of Vermont for motivation,
encouragement,suggestions,feedback,andcorrections.Withoutyou,this
book would not exist. Thanks to Chris Skalka for support and encour-
agement, for the opportunity to teach, and for luring me back to UVM.
Thanks to Isaac Levy for stimulating conversations on Python, and for
feedback on early drafts that he used in his own teaching. Thanks to
Jackie Horton, particularly for helpful comments on Chapter 3. Thanks
to Jim Eddy for helping me through my first semester of teaching CS1210
(back when it was CS021). Thanks to Sami Connolly for using a prelim-
inary draft in her own teaching and providing feedback. Thanks to Lisa
Dion for morning check-ins and many helpful suggestions. Thanks to
Joan “Rosi” Rosebush for regular chocolate deliveries. Thanks to Harry
Sharman for helping with much of the painstaking work of turning words
into a book, and for contributing a few of the exercises and Appendix
D. Thanks to Deborah Cafiero for proofreading and patience. Thanks to
Jim Hefferon who has served as a role model without knowing it.
Since the release of the first print edition, the following people have re-
ported defects and provided corrections: Murat Güngör, Daniel Triplett,
Anna Gale, Nina Holm, Colin Menuchi, Shiloh Chiu, Ted Pittman, Mi-
lan Chirag Shah, Andrew Slowman, Joey Donohue, Gale Stone, Darby
Lane, Lillian Wyckoff, Angelique Macie, Alex Marshall, Ryan Stailey,
Darrian Michaelides, Jackson Francis, Matthew Jackmore, Sami Con-
nolly, Gabriella DiGiovanni, and Luke Ste. Marie. Thank you all.
ix' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 13}","**Acknowledgements**

**Metadata:**
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 13
- Line Numbers: N/A

**Individuals:**

- Colleagues, students, and teaching assistants in the Department of Computer Science at the University of Vermont
- Chris Skalka
- Isaac Levy
- Jackie Horton
- Jim Eddy
- Sami Connolly
- Lisa Dion
- Joan ""Rosi"" Rosebush
- Harry Sharman
- Deborah Cafiero
- Jim Hefferon

**Individuals Reporting Defects and Providing Corrections:**

- Murat Güngör
- Daniel Triplett
- Anna Gale
- Nina Holm
- Colin Menuchi
- Shiloh Chiu
- Ted Pittman
- Milan Chirag Shah
- Andrew Slowman
- Joey Donohue
- Gale Stone
- Darby Lane
- Lillian Wyckoff
- Angelique Macie
- Alex Marshall
- Ryan Stailey
- Darrian Michaelides
- Jackson Francis
- Matthew Jackmore
- Gabriella DiGiovanni
- Luke Ste. Marie"
"page_content='Chapter 1
Introduction
Computer science is a science of abstraction—creating
the right model for a problem and devising the appro-
priate mechanizable techniques to solve it.
–Alfred V. Aho
The goal of this book is to provide an introduction to computer pro-
gramming with Python. This includes
• functional decomposition and a structured approach to program-
ming,
• writing idiomatic Python,
• understanding the importance of abstraction,
• practical problem-solving exercises, and
• a brief introduction to plotting with Matplotlib.
When you get to know it, Python is a peculiar programming lan-
guage.1 Much of what’s peculiar about Python is concealed by its seem-
ingly simple syntax. This is part of what makes Python a great first
language—and it’s fun!
Organization of this book
Thebookisorganizedintochapterswhichroughlycorrespondtoaweek’s
worth of material (with some deviations). Some chapters, particularly
the first few, should be consumed at a rate of two a week. We present
below a brief description of each chapter, followed by mention of some
conventions used in the book.
Programming and the Python shell
This chapter provides some motivation for why programming languages
areuseful,andgivesageneraloutlineofhowaprogramisexecutedbythe
1 It’s not quite sui generis —Python is firmly rooted in the tradition of ALGOL-
influenced programming languages.
1' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 15}","**Metadata**

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 15

**Chapter 1: Introduction**

**Computer Science**

- Computer science is a science of abstraction, involving creating the right model for a problem and devising appropriate mechanizable techniques to solve it. (Alfred V. Aho)

**Goals of the Book**

- Introduce computer programming with Python.
- Cover topics such as:
    - Functional decomposition and structured programming approaches
    - Writing idiomatic Python
    - Importance of abstraction
    - Practical problem-solving exercises
    - Brief introduction to plotting with Matplotlib

**Peculiarity of Python**

- Python is a peculiar programming language.
- Its peculiarities are often concealed by its seemingly simple syntax.
- This makes it a great first language and enjoyable to learn.

**Organization of the Book**

- Organized into chapters that roughly correspond to a week's worth of material (with some deviations).
- Some chapters (especially the first few) should be consumed at a rate of two a week.

**Chapter Outlines**

**Chapter 1: Programming and the Python Shell**

- Motivation for programming languages
- General outline of how a program is executed by the computer"
"page_content='2 Introduction
Python interpreter. This chapter also introduces the two modes of using
Python. Theinteractive mode allows the user to interact with the Python
interpreter using the Python shell. Python statements and expressions
are entered one at a time, and the interpreter evaluates or executes the
code entered by the user. This is an essential tool for experimentation
and learning the details of various language features.Script mode allows
the user to write, save, and execute Python programs. This is convenient
since in this mode we can save our work, and run it multiple times
without having to type it again and again at the Python shell.
This chapter also includes a brief introduction to binary numbers and
binary arithmetic.
Types and literals
The concept oftype is one of the most important in all computer science
(indeed there’s an entire field called “type theory”).
This chapter introduces the most commonly used Python types,
though in some cases, complete presentation of a given type will come
later in the text—lists and dictionaries, for example. Other types are in-
troduced later in the text (for example,function, range, enumerate, etc.).
As types are introduced, examples of literals of each type are given.
Since representation error is a common cause of bewilderment among
beginners, there is some discussion of why this occurs withfloat objects.
V ariables, statements, and expressions
This chapter introduces much of the machinery that will be used through-
out the remainder of the text: variables, assignment, expressions, opera-
tors, and evaluation of expressions.
Onaccountofitsbroadapplicability,asubstantialaccountofmodular
arithmetic is presented as well.
F unctions
Functionsarethesinglemostimportantconceptabeginningprogrammer
can acquire.F unctional decompositionis a crucial requirement of writing
reliable, robust, correct code.
This chapter explains why we use functions, how functions are defined,
how functions are called, and how values are returned. We’ve tried to
keep this “non-technical” and so there’s no discussion of a call stack,
though there is discussion of scope.
Because beginning programmers often introduce side effects into func-
tions where they are undesirable or unnecessary, this chapter makes clear
the distinction betweenpure functions (those without side effects) and
impure functions (those with side effects, including mutating mutable
objects).
Because themath module is so widely used and includes many useful
functions, we introduce themath module in this chapter. In this way, we
also reinforce the idea of information hiding and good functional design.
Doweneedtoknowhowthemath moduleimplementsits sqrt() function?
Of course not. Should we have to know how a function is implemented' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 16}","**## Introduction**

Python interpreter and its two modes of usage are introduced in the chapter. 
**1. Interactive mode:** Enables user interaction with the Python shell, allowing for experimentation and exploration of language features. 
**2. Script mode:** Allows users to write, save, and execute Python programs, facilitating the creation of reusable code.

**## Types and Literals**

### Types

A crucial concept in computer science, types provide a framework for understanding data types and their properties. This chapter covers the most common Python types, including:

- Numerical types (int, float, complex)
- Sequence types (list, tuple, range)
- Mapping types (dict)
- Boolean type (bool)

### Literals

Specific representations of data values are known as literals. Examples of literals include:

- 42 (integer literal)
- 3.14 (float literal)
- ""Hello"" (string literal)
- True (boolean literal)

**## Variables, Statements, and Expressions**

### Variables

Variables serve as placeholders for data values in a Python program. Variables are declared and assigned using the assignment operator (=).

### Statements

Statements are instructions that perform actions within a Python program. They can include assignments, conditionals, loops, and function calls.

### Expressions

Expressions evaluate to a single value. They can include variables, operators, constants, and function calls.

### Operators

Operators are symbols that perform operations on values, such as arithmetic operations (+, -, *, /), assignment operations (=, +=), and logical operations (and, or, not).

**## Functions**

### Importance of Functions

Functions are essential for organizing code into reusable modules. They facilitate code modularity, allowing programmers to break down complex tasks into smaller, manageable units.

### Function Definition and Invocation

Functions are defined using the def keyword, followed by the function name and its parameters. Functions can be invoked by calling the function name with the appropriate arguments.

### Pure and Impure Functions

- **Pure functions:** Do not have side effects and always return the same output for the same input.
- **Impure functions:** May have side effects, such as modifying global variables or external state.

### Introduction to the math Module

The math module provides a collection of useful mathematical functions, such as sqrt() for square root calculation. By introducing the math module, the chapter reinforces the principles of information hiding and functional design."
"page_content='3
in order to use it? Apart from knowing what constitutes a valid input
and what it returns as an output, no, we do not!
Style
Our goal here is to encourage the writing of idiomatic Python. Accord-
ingly, we address the high points of PEP 8—thede facto style guide for
Python—and provide examples of good and bad style.
Students don’t always understand how important style is for the read-
ability of one’s code. By following style guidelines we can reduce the
cognitive load that’s required to read code, thereby making it easier to
reason about and understand our code.
Console I/O (input/output)
This chapter demonstrates how to get input from the user (in command
line programs) and how to format output using f-strings. Because f-
strings have been around so long now, and because they allow for more
readable code, we’ve avoided presentation of older, and now seldom used,
C-style string formatting.
Branching
Branching is a programming language’s way of handlingconditional ex-
ecution of code. In this chapter, we cover conditions (Boolean expres-
sions) which evaluate to a true or false (or a value which is “truthy”
or “falsey”—like true or like false). Python uses these conditions to de-
termine whether a block of code should be executed. In many cases we
have multiple branches—multiple paths of execution that might be taken.
These are implemented withif, elif (a portmanteau of “else if”), and
often else.
One common confusion that beginners face is understanding which
branch is executed in an if/elif/else structure, and hopefully the chapter
makes this clear.
Also covered are nestedif statements, and two ways of visually rep-
resenting branching (each appropriate to different use cases)—decision
trees and flow charts.
Structure, development, and testing
Beginners often struggle with how to structure their code—both for
proper flow of execution and for readability. This chapter gives clear
guidelines for structuring code based on common idioms in Python. It
also addresses how we can incrementally build and test our code.
Unlike many introductory texts, we presentassertions in this chapter.
Assertions are easy to understand and their use has great pedagogical
value. In order to write an assertion, a programmer must understand
clearly what behavior or output is expected for a given input. Using
assertions helps you reason about what should be happening when your
code is executed.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 17}","**Content Formatting:**

**1. Introduction to Python**
   - Understanding what constitutes a valid input and its corresponding output

**2. Style Guidelines (PEP 8)**
   - Benefits of following style guidelines for code readability
   - Recommendations on code structuring and commenting

**3. Console Input/Output (I/O)**
   - Retrieving user input from command line programs
   - Formatting output using f-strings

**4. Branching**
   - Conditional execution using Boolean expressions (true/false evaluations)
   a) if statements
   b) elif statements (else if)
   c) else statements
   - Nested if statements
   - Visual representation of branching:
     - Decision trees
     - Flow charts

**5. Code Structure, Development, and Testing**
   - Guidelines for code structuring for proper flow and readability
   - Incremental code building and testing
   - Assertions:
     - Writing assertions based on expected behavior or output for a given input
     - Pedagogical value of assertions in understanding code execution"
"page_content='4 Introduction
Sequences
Sequences—lists, tuples, and strings—are presented in this chapter. It
makes sense to present these before presenting loops for two reasons.
First, sequences areiterable, and as such are used infor loops, and with-
out a clear understanding of what constitutes an iterable, understanding
such loops may present challenges. Second, we often do work within a
loop which might involve constructing or filtering a list of objects.
Common features of sequences—for example, they are all indexed,
support indexed reads, and are iterable—are highlighted throughout the
chapter.
As this chapter introduces our firstmutable type, the Python list, we
present the concepts of mutability and immutability in this chapter.
Loops
Loops allow for repetitive work or calculation. In this chapter we present
the two kinds of loop supported by Python—while loops andfor loops.
At this point, students have seen iterables (in the form of sequences)
and Boolean expressions, which are a necessary foundation for a proper
presentation of loops.
Also, this chapter introduces two new types—range and enumerate—
and their corresponding constructors. Presentation ofrange entails dis-
cussion of arithmetic sequences , and presentation of enumerate works
nicely with tuple unpacking (or more generally, sequence unpacking),
and so these are presented first in this chapter.
This chapter also provides a brief introduction to stacks and queues,
which are trivially implemented in Python usinglist as an underlying
data structure.
I’ve intentionally excluded treatment ofcomprehensions since begin-
ners have diﬀiculty reading and writing comprehensions without a prior,
solid foundation infor loops.
Randomness, games, and simulations
There are many uses for randomness. Students love to write programs
whichimplementgames,andmanygamesinvolvesomechanceelementor
elements—rolling dice, spinning a wheel, tossing a coin, shuffling a deck,
and so on. Another application is in simulations, which may also include
some chance elements. All manner of physical and other phenomena can
be simulated with some randomness built in.
This chapter presents Python’srandom module, and some of the more
commonly used methods within this module— random.random(), ran-
dom.randint(), random.choice(), and random.shuffle(). Much of this is
done within the context of games of chance, but we also include some sim-
ulations (for example, random walk and Gambler’s Ruin). There is also
some discussion of pseudo-random numbers and how Python’s pseudo-
random number generator is seeded.
File I/O (input/output)
This chapter shows you how to read data from and write data to a file.
File I/O is best accomplished using a context manager. Context man-' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 18}","### Introduction

**Metadata:**
* Source: ""An Introduction to Programming and Computer Science with Python"" by Clayton Cafiero
* Page: 18

**Content:**

**1. Sequences**

* Definition: lists, tuples, and strings
* Features: iterable, indexed, support indexed reads
* Mutability: lists are mutable

**2. Loops**

* Types: while loops, for loops
* Foundation: iterables (sequences), Boolean expressions

**3. Randomness, Games, and Simulations**

* Applications: games, simulations
* Python module: random
* Methods: random.random(), random.randint(), random.choice(), random.shuffle()
* Concepts: pseudo-random numbers, seeding

**4. File I/O (Input/Output)**

* Techniques: reading and writing data
* Context managers"
"page_content='5
agers were introduced with Python 2.5 in 2006, and are a much preferred
idiom (as compared to using try/finally). Accordingly, all file I/O demon-
strations make use of context managers created with the Python keyword
with.
Because so much data is in CSV format (or can be exported to this
format easily), we introduce thecsv module in this chapter. Using the
csv module reduces some of the complexity we face when reading data
from a file, since we don’t have to parse it ourselves.
Exception handling
In this chapter, we present simple exception handling (using try/except,
but notfinally), and explain that some exceptions should not be han-
dled since in doing so, we can hide programming defects which should
be corrected. We also demonstrate the use of exception handling in in-
put validation. When you reach this chapter, you’ll already have seen
whileloops for input validation, so the addition of exception handling
represents only an incremental increase in complexity in this context.
Data analysis and presentation
This chapter is motivated in large part by the University of Vermont’s
QD (quantitative and data literacy) designation for the course for which
this textbook was written. Accordingly, we present some very basic de-
scriptive statistics and introduce Python’sstatistics module including
statistics.mean(), statistics.pstdev(), and statistics.quantiles().
The presentation component of this chapter is done using Matplotlib,
which is thede facto standard for plotting and visualization with Python.
This covers only the rudiments of Matplotlib’s Pyplot interface (line plot,
bar plot,etc.), and is not intended as a complete introduction.
Dictionaries
Dictionaries are the last new type we present in the text. Dictionaries
store information using a key/value model—we look up values in a dic-
tionary by their keys. Like sequences, dictionaries are iterable, but since
they have keys rather than indices, this works a little differently. We’ll
see three different ways to iterate over a dictionary.
We’ll also learn abouthashability in the context of dictionary keys.
Graphs
Since graphs are so commonplace in computer science, it seems appro-
priate to include a basic introduction to graphs in this text. Plus, graphs
are really fun!
A graph is a collection ofvertices (also callednodes) andedges, which
connecttheverticesofthegraph.Theconcreteexampleofahighwaymap
is used, and an algorithm for breadth-first search (BFS) is demonstrated.
Since queues were introduced in chapter 11, the conceptual leap here—
using a queue in the BFS algorithm—shouldn’t be too great.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 19}","## Content Formatting

### File I/O

- Introduced context managers with `with` keyword in Python 2.5 (2006)
- Using `csv` module to simplify reading data from CSV format

### Exception Handling

- Simple exception handling using `try/except`
- Not handling all exceptions to avoid hiding programming defects
- Using exception handling for input validation

### Data Analysis and Presentation

- Basic descriptive statistics and Python's `statistics` module
- Plotting and visualization using Matplotlib's Pyplot interface (line plot, bar plot)

### Dictionaries

- Storing information using key/value model
- Iterating over dictionaries in different ways
- Hashability of dictionary keys

### Graphs

- Introduction to graphs: vertices (nodes), edges
- Breadth-first search (BFS) algorithm
- Using queues in BFS algorithm"
"page_content='6 Introduction
Assumptions regarding prior knowledge of mathematics
This text assumes a reasonable background in high-school algebra and a
little geometry (for example, the Pythagorean theorem and right trian-
gles). Prior exposure to summations and subscripts would help the reader
but is not essential, as these are introduced in the text. The same goes
for mean, standard deviation, and quantiles. You might find it helpful if
you’ve seen these before, but these, too, are introduced in the text.
The minimum expectation is that you can add, subtract, multiply
and divide; that you understand exponents and square roots; and that
you understand the precedence of operations, grouping of expressions
with parentheses, and evaluating expressions with multiple terms and
operations.
Assumptions regarding prior knowledge of computer use
While this book assumes no prior knowledge whatsoever when it comes
to programming, it does assume that you have some familiarity with
using a computer and have a basic understanding of your computer’s file
system (a hierarchical system consisting of files and directories). If you
don’t know what a file is, or what a directory is, see Appendix D, or
consult documentation for your operating system. Writing and running
programs requires that you understand the basics of a computer file
system.
Typographic conventions used in this book
Names of functions, variables, and modules are rendered infixed-pitch
typeface, as are Python keywords, code snippets, and sample output.
print(""Hello, World!"")
When referring to structures which make use of multiple keywords we
render these keywords separated by slashes but do not use fixed-pitch
typeface. Examples: if/else, if/elif, if/elif/else, try/except, try/finally,
etc.
File names, for example,hello_world.py, and module names, for ex-
ample, math, are also rendered in fixed-pitch typeface.
Where it is understood that code is entered into the Python shell,
the interactive Python prompt>>> is shown. Wherever you see this, you
should understand we’re working in Python shell.>>> should never ap-
pear in your code.2 Return values and evaluation of expressions are in-
dicated just as they are in the Python shell, without the leading>>>.
>>> 1 + 2
3
>>> import math
>>> math.sqrt(36)
6
2 Except in the case of doctests, which are not presented in this text.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 20}","### Formatting Instructions:

**1. Content Structuring:**

- Key sections:
    - Assumptions Regarding Prior Knowledge
        - Mathematics
        - Computer Use
- Typographic Conventions Used in This Book

**2. Metadata Inclusion:**

- Page number: 20
- Line numbers: Unprovided
- Source name: An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**3. Code Formatting:**

- No code provided in this document.

**4. Tabular Format:**

- Not applicable

**5. Examples:**

- ""print(""Hello, World!"")""

**Assumptions Regarding Prior Knowledge**

**Mathematics:**

- High-school algebra
- Geometry (Pythagorean theorem, right triangles)
- Summations and subscripts (not essential)
- Mean, standard deviation, and quantiles (not essential)

**Computer Use:**

- Familiarity with computer use
- Basic understanding of computer file system
- Knowledge of files and directories (or refer to Appendix D or operating system documentation)

**Typographic Conventions Used in This Book**

- **Fixed-pitch typeface:**
    - Function, variable, and module names
    - Python keywords
    - Code snippets
    - Sample output
- **Separated by slashes but not fixed-pitch typeface:**
    - Structures using multiple keywords (e.g., if/else, if/elif/else)
- **Fixed-pitch typeface:**
    - File names (e.g., hello_world.py)
    - Module names (e.g., math)
- **Python shell:**
    - Interactive Python prompt (>>>) indicates code entered into Python shell
- **Return values and evaluation of expressions:**
    - Indicated as they appear in the Python shell"
"page_content='7
In a few places, items which are placeholders for actual values or
variablenamesaregiveninanglebrackets,thus <foo>.Forexample,when
describing the three-argument syntax for therange() function, we might
write range(<start>, <stop>, <stride>)to indicate that three arguments
must be supplied—the first for the start value, the second for the stop
value, and the last for the stride. It’s important to understand that the
angle brackets are not part of the syntax, but are merely a typographic
convention to indicate where an appropriate substitution must be made.
All of these conventions are in accord with the typographical conven-
tions used in the oﬀicial Python documentation at python.org. Hopefully,
this will make it easier for students when they consult the oﬀicial docu-
mentation.
Note that this use of angle brackets is a little different when it comes
to traceback messages printed when exceptions occur. There you may
see things like<stdin> and <module>, and in this context, they are not
placeholders requiring substitution by the user.
Other conventions
When referring to functions, whether built-in, from some imported mod-
ule, or otherwise, without any other context or specific problem instance,
we write function identifiers along with parentheses (as a visual indica-
tor that we’re speaking of a function) but without formal parameters.
Example: “Therange() function accepts one, two, or three arguments.”
This should not be read as suggesting thatrange() takes no arguments.
Entry point / top-level code environment
As noted in the text, unlike many other languages such as C, C++,
Java, etc., a function namedmain() has no special meaning in Python
whatsoever. The correct way to specify the entry point of your code in
Python is with
if __name__ == '__main__':
# the rest of your code here
This is explained fully in Chapter 9.
In code samples in the book, we do, however, avoid using thisif there
are no function definitions included in the code . We do this for space
and conciseness of the examples. The same could reasonably apply to
your code. In most cases, if there are no function definitions in your
module, there’s no need for thisif statement (though it’s fine to include
it). However, if there are any function definitions in your module, then
if __name__ == '__main__':is the correct, Pythonic way to segregate
your driver code from your function definitions.
Origin of Python
Python has been around a long time, with the first release appearing
in 1991 (four years before Java). It was invented by Guido van Rossum,
who is now oﬀicially Python’s benevolent dictator for life (BDFL).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 21}","## Formatting Instructions

### Content Structuring
- Key sections have been identified and organized under appropriate headings and subheadings.
- Logical flow and clarity have been ensured in the content.

### Metadata Inclusion
- Page numbers, line numbers, and source names have been included as provided.
- The metadata is clearly indicated at the beginning of the document.

### Code Formatting
- Code has been provided with proper syntax highlighting and enclosed within triple backticks.
- The programming language has been mentioned before the triple backticks.

### Tabular Format
- Where applicable, differences have been tabulated for clarity.

### Examples
- Examples have been clearly provided as per the content.

### Content
**Unformatted Document**

In a few places, items which are placeholders for actual values or variablenamesaregiveninanglebrackets,thus <foo>. Forexample,when describing the three-argument syntax for therange() function, we might write range(<start>, <stop>, <stride>)to indicate that three arguments must be supplied—the first for the start value, the second for the stop value, and the last for the stride. It’s important to understand that the angle brackets are not part of the syntax, but are merely a typographic convention to indicate where an appropriate substitution must be made. All of these conventions are in accord with the typographical conven- tions used in the oﬀicial Python documentation at python.org. Hopefully, this will make it easier for students when they consult the oﬀicial docu- mentation.
Note that this use of angle brackets is a little different when it comes to traceback messages printed when exceptions occur. There you may see things like<stdin> and <module>, and in this context, they are not placeholders requiring substitution by the user.
Other conventions
When referring to functions, whether built-in, from some imported mod- ule, or otherwise, without any other context or specific problem instance, we write function identifiers along with parentheses (as a visual indica- tor that we’re speaking of a function) but without formal parameters.
Example: “Therange() function accepts one, two, or three arguments.” This should not be read as suggesting thatrange() takes no arguments.
Entry point / top-level code environment
As noted in the text, unlike many other languages such as C, C++, Java, etc., a function namedmain() has no special meaning in Python whatsoever. The correct way to specify the entry point of your code in Python is with
if __name__ == '__main__': # the rest of your code here This is explained fully in Chapter 9.
In code samples in the book, we do, however, avoid using thisif there are no function definitions included in the code . We do this for space and conciseness of the examples. The same could reasonably apply to your code. In most cases, if there are no function definitions in your module, there’s no need for thisif statement (though it’s fine to include it). However, if there are any function definitions in your module, then if __name__ == '__main__':is the correct, Pythonic way to segregate your driver code from your function definitions.
Origin of Python
Python has been around a long time, with the first release appearing in 1991 (four years before Java). It was invented by Guido van Rossum, who is now oﬀicially Python’s benevolent dictator for life (BDFL).'

**Formatted Document**

## Python Conventions

### Placeholders and Substitution

- Placeholders for actual values or variable names are represented in angle brackets (< >).
- Example: range(<start>, <stop>, <stride>) indicates that three arguments are to be supplied to the range() function.
- Angle brackets in traceback messages (<stdin>, <module>) do not require substitution.

### Function References

- Function identifiers are written with parentheses to indicate they are functions, but without formal parameters.
- Example: ""The range() function accepts one, two, or three arguments.""

### Entry Point

- Unlike other languages, a main() function has no special meaning in Python.
- The correct way to specify the entry point is with:
```python
if __name__ == '__main__':
    # code here
```
- In code samples without function definitions, this may be omitted.

### Origin of Python

- Python was first released in 1991 by Guido van Rossum.
- It is currently maintained by its ""benevolent dictator for life"" (BDFL), Guido van Rossum."
"page_content='8 Introduction
Python gets its name from the British comedy troupeMonty Python ’s
Flying Circus (Guido is a fan).
Nowadays, Python is one of the most widely used programming lan-
guages on the planet and is supported by an immense ecosystem and
thriving community. See:https://python.org/ for more.
Python version
As this book is written, the current version of Python is 3.11.4. However,
no new language features introduced since version 3.6 are presented in
this book (as most are not appropriate or even useful for beginners).
This book does cover f-strings, which were introduced in version 3.6.
Accordingly, if you have Python version 3.6–3.11, you should be able to
follow along with all code samples and exercises.
Using the Python documentation
For beginners and experts alike, a language’s documentation is an essen-
tial resource. Accordingly, it’s important that you know how to find and
consult Python’s online documentation.
There are many resources available on the internet and the quality
of these resources varies from truly awful to superb. The online Python
documentation falls toward the good end of that spectrum.
Pros
• Definitive and up-to-date
• Documentation for different versions clearly specified
• Thorough and accurate
• Includes references for all standard libraries
• Available in multiple languages
• Includes a comprehensive tutorial for Python beginners
• Codingexamples(wheregiven)conformtogoodPythonstyle(PEP
8)
Cons
• Can be lengthy or technical—not always ideal for beginners
• Don’t always appear at top of search engine results.
python.org
Oﬀicial Python documentation, tutorials, and other resources are hosted
at https://python.org.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 22}","## Python: An Introduction

### Python's Origin

- Named after the British comedy troupe Monty Python's Flying Circus

### Python's Status

- Widely used programming language
- Extensive ecosystem and active community

### Python Versions

- Current version: 3.11.4
- This book covers features introduced up to version 3.6

### Using Python Documentation

#### Pros of Python Documentation

- Definitive and current
- Version-specific documentation
- Thorough and precise
- References for standard libraries
- Available in multiple languages
- Beginner-friendly tutorial
- Adheres to Python style guidelines (PEP 8)

#### Cons of Python Documentation

- Can be extensive and technical
- May not be easily found in search results

### Python.org

- Official Python documentation, tutorials, and resources
- Accessible at https://python.org"
"page_content='9
• Documentation: https://docs.python.org/3/
• Tutorial:https://docs.python.org/3/tutorial/
• Beginner’s Guide:https://wiki.python.org/moin/BeginnersGuide
I recommend these as the first place to check for online resources.
Á Warning
There’s a lot of incorrect, dated, or otherwise questionable code on
the internet. Be careful when consulting sources other than oﬀicial
documentation.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 23}","## Metadata

* Page Number: 23
* Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

## Recommended Online Resources

**Documentation:**
* https://docs.python.org/3/

**Tutorial:**
* https://docs.python.org/3/tutorial/

**Beginner's Guide:**
* https://wiki.python.org/moin/BeginnersGuide

## Warning Regarding Online Sources

Exercise caution when consulting sources other than official documentation, as there is a significant amount of incorrect, outdated, or questionable code available online."
"page_content='Chapter 2
Programming and the Python
Shell
Our objective for this chapter is to lay the foundations for the rest of
the course. If you’ve done any programming before, some of this may
seem familiar, but read carefully nonetheless. If you haven’t done any
programming before that’s OK.
Learning objectives
• You will learn how to interact with the Python interpreter using
the Python shel l.
• You will learn the difference betweeninteractive mode (in the shell)
and script mode (writing, saving, and running programs).
• You will learn a little about computers, how they are structured,
and that they use binary code.
• You will understand why we wish to write code in something other
than just zeros and ones, and you’ll learn a little about how Python
translates high-level code (written by you, the programmer) into
binary instructions that a computer can execute.
• You will write, save, and run your first Python program—an or-
dered collection of statements and expressions.
T erms introduced
• binary code
• bytecode
• compilation vs interpretation
• compiler
• console
• integrated development environment (IDE)
• interactive mode
• low-level vs high-level programming language
• Python interpreter / shell
• read-evaluate-print loop (REPL)
• semantics
• script mode
11' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 25}","### Chapter 2: Programming and the Python Shell

**Metadata:**

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 25

#### Learning Objectives

- Interact with the Python interpreter using the Python shell.
- Differentiate between interactive mode (shell) and script mode (writing, saving, and running programs).
- Understand basic computer structure and binary code.
- Recognize the need for high-level code and Python's role in translating it into binary instructions.
- Write, save, and run a Python program, which is an ordered collection of statements and expressions.

#### Terms Introduced

- **Binary code:** Machine language consisting of 0s and 1s.
- **Bytecode:** Python's intermediate code generated by the compiler.
- **Compilation vs. interpretation:** Compilation translates all code into machine code at once, while interpretation executes code line by line.
- **Compiler:** Translates code into machine code.
- **Console:** User interface for command-line interactions.
- **Integrated development environment (IDE):** Software suite that provides tools for writing, editing, and debugging code.
- **Interactive mode:** Running code line by line in the Python shell.
- **Low-level vs. high-level programming language:** High-level languages use human-readable syntax, while low-level languages are closer to binary code.
- **Python interpreter / shell:** Environment for interacting with Python.
- **Read-evaluate-print loop (REPL):** Python shell's standard input-output cycle.
- **Semantics:** Meaning of code in a specific language.
- **Script mode:** Writing a complete program in a text file and running it all at once."
"page_content='12 Programming and the Python Shell
• syntax
• terminal
2.1 Why learn a programming language?
Computers are powerful tools. Computers can perform all manner of
tasks: communication, computation, managing and manipulating data,
modeling natural phenomena, and creating images, videos, and music,
just to name a few. However, computers don’t read minds (yet), and
thus we have to provide instructions to computers so they can perform
these tasks.
Computers don’t speak natural languages (yet)—they only under-
stand binary code. Binary code is unreadable by humans.
For example, a portion of an executable program might look like this
(in binary):
0110101101101011 1100000000110101 1011110100100100
1010010100100100 0010100100010011 1110100100010101
1110100100010101 0001110110000000 1110000111100000
0000100000000001 0100101101110100 0000001000101011
0010100101110000 0101001001001001 1010100110101000
This is unintelligible. It’s bad enough to try to read it, and it would be
even worse if we had to write our computer programs in this fashion.
Computers don’t speak human language, and humans don’t speak
computer language. That’s a problem. The solution isprogramming lan-
guages.
Programming languages allow us, as humans, to write instructions
in a form we can understand and reason about, and then have these
instructions converted into a form that a computer can read and execute.
There is a tremendous variety of programming languages. Some lan-
guages are low-level, like assembly language, where there’s roughly a
one-to-one correspondence between machine instructions and assembly
language instructions. Here’s a “Hello World!” program in assembly lan-
guage (for ARM64 architecture):
1
.equ STDOUT, 1
.equ SVC_WRITE, 64
.equ SVC_EXIT, 93
.text
.global _start
_start:
stp x29, x30, [sp, -16]!
mov x0, #STDOUT
ldr x1, =msg
mov x2, 13
1 Assembly language code sample from Rosetta Code: https://www.rosettacode.
org/wiki/Hello_world' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 26}","### Page 26

#### 12 Programming and the Python Shell

- syntax
- terminal

### 2.1 Why learn a programming language?

Computers are powerful tools. Computers can perform all manner of tasks: communication, computation, managing and manipulating data, modeling natural phenomena, and creating images, videos, and music, just to name a few. However, computers don’t read minds (yet), and thus we have to provide instructions to computers so they can perform these tasks.

Computers don’t speak natural languages (yet)—they only understand binary code. Binary code is unreadable by humans.
For example, a portion of an executable program might look like this (in binary):

```
0110101101101011 1100000000110101 1011110100100100
1010010100100100 0010100100010011 1110100100010101
1110100100010101 0001110110000000 1110000111100000
0000100000000001 0100101101110100 0000001000101011
0010100101110000 0101001001001001 1010100110101000
```

This is unintelligible. It’s bad enough to try to read it, and it would be even worse if we had to write our computer programs in this fashion.
Computers don’t speak human language, and humans don’t speak computer language. That’s a problem. The solution is programming languages.

Programming languages allow us, as humans, to write instructions in a form we can understand and reason about, and then have these instructions converted into a form that a computer can read and execute.

There is a tremendous variety of programming languages. Some languages are low-level, like assembly language, where there’s roughly a one-to-one correspondence between machine instructions and assembly language instructions. Here’s a “Hello World!” program in assembly language (for ARM64 architecture):
```assembly
.equ STDOUT, 1
.equ SVC_WRITE, 64
.equ SVC_EXIT, 93
.text
.global _start
_start:
stp x29, x30, [sp, -16]!
mov x0, #STDOUT
ldr x1, =msg
mov x2, 13
```"
"page_content='Why learn a programming language? 13
mov x8, #SVC_WRITE
mov x29, sp
svc #0 // write(stdout, msg, 13);
ldp x29, x30, [sp], 16
mov x0, #0
mov x8, #SVC_EXIT
svc #0 // exit(0);
msg: .ascii ""Hello World!\n""
.align 4
Now, while this is a lot better than a string of zeros and ones, it’s not
so easy to read, write, and reason about code in assembly language.
Fortunately, we havehigh-level languages. Here’s the same program
in C++:
#include <iostream>
int main () {
std::cout << ""Hello World!"" << std::endl;
}
Much better, right?
In Python, the same program is even more succinct:
print('Hello World!')
Notice that as we progress from machine code to Python, we’re in-
creasing abstraction. Machine code is the least abstract. These are the ac-
tual instructions executed on your computer. Assembly code uses human-
readable symbols, but still retains (for the most part) a one-to-one corre-
spondence between assembly instructions and machine instructions. In
the case of C++, we’re using a libraryiostream to provide us with an ab-
straction of an output stream,std::cout, and we’re just sending strings
to that stream. In the case of Python, we simply say “print this string”
(more or less). This is the most abstract of these examples—we needn’t
concern ourselves with low-level details.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 27}","## Why Learn a Programming Language?

### Metadata
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 27

## Content

### Assembly Language vs. High-Level Languages

Assembly language is more readable and easier to write than machine code, but it still retains a one-to-one correspondence between assembly instructions and machine instructions. High-level languages, on the other hand, use human-readable symbols and provide abstractions that allow us to write code that is more concise and easier to understand.

**Example:**

| Assembly Language | C++ | Python |
|---|---|---|
| `mov x8, #SVC_WRITE` | `std::cout` | `print` |
| `mov x29, sp` | | |
| `svc #0 // write(stdout, msg, 13);` | | |
| `ldp x29, x30, [sp], 16` | | |
| `mov x0, #0` | | |
| `mov x8, #SVC_EXIT` | | |
| `svc #0 // exit(0);` | | |

As we can see from the table above, the same program in assembly language is much longer and more complex than the equivalent program in C++ or Python.

### The Benefits of Abstraction

Abstraction allows us to write code that is more concise and easier to understand. By hiding the low-level details of the underlying hardware and software, we can focus on the logic of our program. This makes it easier to write complex programs and to debug them.

**For example:**

- In Python, we can simply say ""print this string"" without having to worry about the low-level details of how the string is actually printed.
- In C++, we can use the `iostream` library to provide us with an abstraction of an output stream, `std::cout`, which we can then use to send strings to that stream.

Abstraction is an essential tool for software development. It allows us to write code that is more concise, easier to understand, and easier to debug."
"page_content='14 Programming and the Python Shell
Figure 2.1: Increasing abstraction
Now, you may be wondering: How is it that we can write programs in
such languages when computers only understand zeros and ones? There
are programs which convert high-level code into machine code for ex-
ecution. There are two main approaches when dealing with high-level
languages, compilation and interpretation.
2.2 Compilation and interpretation
Generallyspeaking, compilation isa process wherebysource codein some
programming language is converted into binary code for execution on a
particular architecture. The program which performs this conversion is
called acompiler. The compiler takes source code (in some programming
language) as an input, and yields binary machine code as an output.
Figure 2.2: Compilation (simplified)
Interpreted languages work a little differently. Python is an inter-
preted language. In the case of Python, intermediate code is generated,
andthenthisintermediatecodeisreadandexecutedbyanotherprogram.
The intermediate code is calledbytecode.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 28}","## Formatting Instructions

### 1. Content Structuring:

- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

### 2. Metadata Inclusion:

- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

### 3. Code Formatting:

- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

```python
# Python code example
print(""Hello, World!"")
```

### 4. Differences in Tabular Format:

- If possible, provide differences in tabular format for easy comparison.

### 5. Inclusion of Examples:

- Clearly include any examples provided in the original content.

### 6. Content Modification:

- Do not generate any content by yourself. Format the provided content as is, without changing any information.
- If the content is of 1000 words, provide all 1000 words without cutting it short.

## Metadata

`{'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 28}`

## Content

### Programming and the Python Shell

### 2.2 Compilation and Interpretation

#### Compilation

Compilation is a process where source code in some programming language is converted into binary code for execution on a particular architecture. The program that performs this conversion is called a compiler. The compiler takes source code as input and yields binary machine code as output.

#### Interpretation

Interpreted languages work slightly differently. Python is an interpreted language. In the case of Python, intermediate code is generated, and then this intermediate code is read and executed by another program. The intermediate code is called bytecode."
"page_content='Compilation and interpretation 15
While the difference between compilation and interpretation is not
quite as clear-cut as suggested here, these descriptions will serve for the
present purposes.
The Python interpreter
Python is an interpreted language with intermediate bytecode. While
you don’t need to understand all the details of this process, it’s helpful
to have a general idea of what’s going on.
Say you have written this program and saved it ashello_world.py.
print('Hello World!')
You may run this program from the terminal (command prompt), thus:
$ python hello_world.py
where $ indicates a command prompt (your prompt may vary). When
this runs, the following is printed to the console:
Hello World!
When we run this program, Python first reads the source code, then
produces the intermediate bytecode, then executes each instruction in
the bytecode.
Figure 2.3: Execution of a Python program' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 29}","## Formatting Instructions

### Content Structuring

- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

### Metadata Inclusion

- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

### Code Formatting

- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

### Tabular Format

- Give differences in tabular format if possible.

### Examples

- Include examples clearly if provided.

### Content Length

- Do not generate any content by yourself, just format provided content.
- Also, keep answers brief; do not cut short.
- If content is of 1000 words, give all 1000 words; do not cut short.
- Strictly follow this rule. No content should be modified. Give the exact same length of content as provided.

## Content

### Compilation and Interpretation

While the difference between compilation and interpretation is not quite as clear-cut as suggested here, these descriptions will serve for the present purposes.

### The Python Interpreter

Python is an interpreted language with intermediate bytecode. While you don’t need to understand all the details of this process, it’s helpful to have a general idea of what’s going on.

Say you have written this program and saved it as hello_world.py.

```python
print(‘Hello World!’)
```

You may run this program from the terminal (command prompt), thus:

```
$ python hello_world.py
```

Where $ indicates a command prompt (your prompt may vary). When this runs, the following is printed to the console:

```
Hello World!
```

When we run this program, Python first reads the source code, then produces the intermediate bytecode, then executes each instruction in the bytecode.

### Figure 2.3: Execution of a Python program

```
metadata={'source': 'C:\\Users\\adity\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 29}
```"
"page_content='16 Programming and the Python Shell
1. By issuing the command python hello_world.py , we invoke the
Python interpreter and tell it to read and execute the program
hello_world.py (.py is the file extension used for Python files).
2. The Python interpreter reads the filehello_world.py.
3. The Python interpreter produces an intermediate, bytecode repre-
sentation of the program inhello_world.py.
4. The bytecode is executed by the Python Virtual Machine.
5. This results in the words “Hello World!” being printed to the con-
sole.
So you see, there’s a lot going on behind the scenes when we run a
Python program.2 However, this allows us to write programs in a high-
level language that we as humans can understand.
Supplemental reading
• Whetting Y our Appetite, from The (Oﬀicial) Python Tutorial.3
2.3 The Python shell
The Python interpreter provides you with an environment for experimen-
tation and observation—thePython shel l, where we work ininteractive
mode. It’s a great way to get your feet wet.
When working with the Python shell, you can enterexpressions and
Python will read them, evaluate them, and print the result. (There’s
more you can do, but this is a start.)
There are several ways to run the Python shell: in a terminal (com-
mand prompt) by typingpython, python3, or py depending on the ver-
sion(s) of Python installed on your machine. You can also run the Python
shell through your chosen IDE (details will vary).
The first thing you’ll notice is this symbol:>>>. This is the Python
prompt (you don’t type this bit, this is Python telling you it’s ready for
new input).
We’ll start with some simple examples (open the shell on your com-
puter and follow along):
>>> 1
1
Here we’ve entered1. This is interpreted by Python as an integer, and
Python responds by printing theevaluation of what you’ve just typed:
1.
When we enter numbers like this, we call them “integer literals”—in
the example above, what we entered wasliteral lya 1. Literals are special
in thatthey evaluate to themselves .
Now let’s try a simpleexpression that’s not a mere literal:
2 Actually , there’s quite a bit more going on behind the scenes, but this should
suﬀice for our purposes. If you’re curious and wish to learn more, ask!
3 https://docs.python.org/release/3.10.4/tutorial/appetite.html' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 30}","**Programming and the Python Shell**

### Python Program Execution

**Metadata:**

* Page: 30
* Line Numbers: 16-42
* Source: An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Steps in Python Program Execution:**

1. Command `python hello_world.py` invokes the Python interpreter and reads the file.
2. Python interpreter generates bytecode representation of the program.
3. Bytecode is executed by the Python Virtual Machine.
4. Result is printed to the console.

### The Python Shell

**Functionality:**

* Provides an interactive environment for experimentation and observation.
* Allows users to enter expressions for evaluation and result printing.

**Invocation:**

* Terminal: `python`, `python3`, or `py` (depending on installed versions)
* IDE (specific details vary)

**Usage:**

* Python prompt ("">>>"") indicates readiness for input.

**Examples:**

**Integer Literal:**

* Input: `1`
* Output: `1`

**Simple Expression:**

* Input: `1 + 1`
* Output: `2`"
"page_content='The Python shell 17
Figure 2.4: The Python shell in a terminal (above)
>>> 1 + 2
3
Python understands arithmetic and when the operands are numbers (in-
tegers or floating-point) then+ works just like you’d expect. So here we
have a simpleexpression—a syntactically valid sequence of symbols that
evaluates to avalue. What does this expression evaluate to?3 of course!
We refer to the+ operator as abinary infix operator , since it takes
two operands (hence, “binary”) and the operand is placedbetween the
operands (hence, “infix”).
Here’s another familiar binary infix operator:-. You already know
what this does.
>>> 17 - 5
12
Yup. Just as you’d expect. The Python shell evaluates the expression17
- 5 and returns the result:12.
REPL
This process—of entering an expression and having Python evaluate it
and display the result—is calledREPL which is an acronym forread-
evaluate-print loop. Many languages have REPLs, and obviously, Python
does too. REPLs were invented (back in the early 1960s) to provide an
environment forexploratory programming. This is facilitated by allowing
the programmer to see the result of each portion of code they enter.
Accordingly, I encourage you to experiment with the Python shell. Do' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 31}","**Content Formatting**

### The Python Shell

**Metadata:**

* Page Number: 31
* Line Numbers: Not provided
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Content**

The Python shell is a REPL (read-evaluate-print loop), which is an acronym for read-evaluate-print loop. REPLs were invented in the early 1960s to provide an environment for exploratory programming. This is facilitated by allowing the programmer to see the result of each portion of code they enter.

### Binary Infix Operators

A binary infix operator takes two operands and the operand is placed between the operands. Examples of binary infix operators in Python include:

* `+` for addition
* `-` for subtraction

### Example

```python
>>> 1 + 2
3

>>> 17 - 5
12
```

**Additional Notes**

* The Python shell can be accessed by typing ""python"" in a terminal window.
* The + operator is a binary infix operator that performs addition.
* The - operator is a binary infix operator that performs subtraction."
"page_content='18 Programming and the Python Shell
some tinkering and see the results. You can learna lot by working this
way.
Saving your work
Entering expressions into the Python shelldoes not save anything . In
order to save your code, you’ll want to work outside the shell (we’ll see
more on this soon).
Exiting the interpreter
If you’re using an IDE there’s no need to exit the shell. However, if you’re
using a terminal, and you wish to return to your command prompt, you
may exit the shell withexit().
>>> exit()
2.4 Hello, Python!
It is customary—a nearly universal ritual, in fact—when learning a new
programming language, to write a program that prints “Hello World!” to
theconsole.Thistraditiongoesbackasatleastasfaras1974,whenBrian
KernighanincludedsuchaprograminhistutorialfortheCprogramming
language at Bell Labs, perhaps earlier.
So, in keeping with this fine tradition, our first program will do the
same—print “Hello World!” to the console.
Python provides us with simple means to print to the console: a func-
tion named print(). If we wish to print something to the console, we
write print() and place what we wish to print within the parentheses.
print(""Hello World!"")
That’s it!
If we want to run a program in script mode we must write it and save
it. Let’s do that.
In your editor or IDE open a new file, and enter this one line of code
(above). Save the file ashello_world.py.
Now you can run your program. If you’re using an IDE, you can run
the file within your IDE. You can also run the file from the command
line, for example,
$ python hello_world.py
where $ is the command line prompt (this will vary from system to
system). The $ isn’t something you type, it’s just meant to indicate a
command prompt (like >>> in the Python shell). When you run this
program it should print:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 32}","#### Formatting Instructions:

1. **Content Structuring:**
   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**
   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**
   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

   Example:
   ```python
   # Python code example
   print(""Hello, World!"")
   
4. Give difference in tabular format if possible
5. Include examples clearly if provided
6. Do not generate any content by yourself just format provided content also keep answers in brief do not cut short it just put it full content as it is without changing anything
   if content is of 1000 words give all 1000 words do not cut short it strictly follow this rule no content or should be modified give exact same length content as provided

### Metadata
- Page: 32
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Content

**18 Programming and the Python Shell**

This section discusses the basics of programming and the Python shell.

- You can learn a lot by tinkering and seeing the results.

**Saving your work**

- Entering expressions into the Python shell does not save anything.
- To save your code, work outside the shell.

**Exiting the interpreter**

- If using an IDE, you don't need to exit the shell.
- If using a terminal, exit the shell with `exit()`.

**2.4 Hello, Python!**

- A universal ritual in programming is to write a program that prints ""Hello World!"" to the console.
- Python provides the `print()` function to print to the console.
- To print ""Hello World!"", write:
```python
print(""Hello World!"")
```
- To run a program in script mode, write it, save it, and run it.
- To run the ""Hello World!"" program:
```
$ python hello_world.py
```"
"page_content='Syntax and semantics 19
Hello World!
Next steps
The basic steps above will be similar for each new program you write. Of
course, as we progress, programs will become more challenging, and it’s
likely you may need to test a program by running it multiple times as
you make changes before you get it right. That’s to be expected. But now
you’ve learned the basic steps to create a new file, write some Python
code, and run your program.
2.5 Syntax and semantics
In this text we’ll talk aboutsyntax and semantics, so it’s important that
we understand what these terms mean, particularly in the context of
computer programming.
Syntax
In a (natural) language course—say Spanish, Chinese, or Latin—you’d
learn about certain rules ofsyntax, that is, how we arrange words and
choose the correct forms of words to produce a valid sentence or utter-
ance. For example, in English,
My hovercraft is full of eels.
is a syntactically valid sentence.4 While it may or may not be true, and
may not even make sense, it is certainly awel l-formed English sentence.
By contrast, the sequence of words
Is by is is and cheese for
is not a well-formed English sentence. These are examples of valid and
invalid syntax. The first is syntactically valid (wel l-formed); the second
is not.
Every programming language has rules of syntax—rules which govern
what is and is not a valid statement or expression in the language. For
example, in Python
>>> 2 3
is not syntactically valid. If we were to try this using the Python shell,
the Python interpreter would complain.
4 “My hovercraft is full of eels” originates in a famous sketch by Monty Python’s
Flying Circus.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 33}","**Metadata**

- Page Number: 33
- Line Numbers: Not provided
- Source Name: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Content**

## Syntax and Semantics

### Syntax

In linguistics, syntax refers to the rules that govern the structure of sentences and phrases in a particular language. These rules determine the order of words, the use of grammatical forms, and the overall well-formedness of an utterance. In the context of computer programming, syntax refers to the rules that define what is considered a valid statement or expression in a given programming language.

### Semantics

Semantics refers to the meaning or interpretation of a sentence or phrase. In linguistics, semantics is concerned with the relationship between linguistic structures and the world they describe. In computer programming, semantics refers to the meaning or interpretation of a program or code fragment. The semantics of a program determine its behavior and the results it produces when executed.

### Distinction between Syntax and Semantics

| **Feature** | **Syntax** | **Semantics** |
|---|---|---|
| Focus | Structure of statements and expressions | Meaning or interpretation of statements and expressions |
| Validation | Determines if a statement or expression is valid | Determines if a statement or expression has a meaningful interpretation |
| Importance | Ensures that code can be parsed and executed by the computer | Ensures that code produces the intended results |

## My Hovercraft is Full of Eels

The phrase ""My hovercraft is full of eels"" is a well-formed sentence in English, meaning that it follows the rules of English grammar and syntax. However, it may not make any logical sense or be true in any real-world context. This is an example of a syntactically valid but semantically invalid statement.

## Syntax in Python

In Python, the statement

```python
>>> 2 3
```

is not syntactically valid because it violates the rules of Python syntax. The Python interpreter would complain if this statement was entered into the Python shell."
"page_content='20 Programming and the Python Shell
>>> 2 3
File ""<stdin>"", line 1
2 3
^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
That’s a clear-cut example of a syntax error in Python. Here’s another:
>>> = 5
File ""<stdin>"", line 1
= 5
^
SyntaxError: invalid syntax
Python makes it clear when we have syntax errors in our code. Usually
it can point to the exact position within a line where such an error occurs.
Sometimes, it can even provide suggestions, for example, “Perhaps you
forgot a comma?”
Semantics
On the other hand, semantics is aboutmeaning. In English we may say
The ball is red.
We know there’s some object being referred to—a ball—and that an
assertion is being made about the color of the ball—red. This is fairly
straightforward.
Of course, it’s possible to construct ambiguous sentences in English.
For example (with apologies to any vegetarians who may be reading):
The turkey is ready to eat.
Does this mean that someone has cooked a turkey and that it is ready to
be eaten? Or does this mean that there’s a hungry turkey who is ready
to be fed? This kind of ambiguity is quite common in natural languages.
Not so with programming languages. If we’ve produced a syntactically
valid statement or expression, it has only one “interpretation.” There is
no ambiguity in programming.
Here’s another famous example, devised by the linguist Noam Chom-
sky:
5
Colorless green ideas sleep furiously.
This is a perfectly valid English sentence with respect to syntax. How-
ever, it is meaningless, nonsensical. How can anything be colorless and
green at the same time? How can something abstract like an idea have
color? What does it mean to “sleep furiously”? Syntax: A-OK. Semantics:
nonsense.
5 https://en.wikipedia.org/wiki/Noam_Chomsky' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 34}","**Metadata:**

- Page Number: 34
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Content Structuring:**

## Syntax vs. Semantics in Programming

### Syntax

- Definition: The set of rules governing the structure and form of a programming language.
- Purpose: To ensure that the code can be correctly parsed and interpreted by the compiler or interpreter.
- Errors: Syntax errors occur when the code violates these rules.

### Semantics

- Definition: The meaning or interpretation of a program's code.
- Purpose: To define what the code does and how it operates.
- Errors: Semantic errors occur when the code is syntactically correct but does not perform as intended.

**Differences Between Syntax and Semantics**

| Feature | Syntax | Semantics |
|---|---|---|
| Focus | Structure and form of the code | Meaning and interpretation of the code |
| Errors | Syntax errors | Semantic errors |
| Ambiguity | Can be ambiguous in natural languages | Unambiguous in programming languages |
| Example | ""2 3"" (invalid syntax) | ""The turkey is ready to eat"" (ambiguous semantics) |

**Example of Semantic Error:**

```python
x = 5
y = ""hello""
print(x + y)
```

- Syntax: Valid
- Semantics: Error (cannot add a number to a string)"
"page_content='Introduction to binary numbers 21
Again, in programming, every syntactically valid statement or expres-
sion has a meaning. It is our job as programmers to write code which is
syntactically valid but also semantically correct.
What happens if we write something which is syntactically valid and
also semantically incorrect? It means that we’ve written code thatdoes
not do what we intend for it to do . There’s a word for that: abug.
Here’s an example. Let’s say we know the temperature in degrees
Fahrenheit, but we want to know the equivalent in degrees Celsius. You
may know the formula
𝐶 = 𝐹 − 32
1.8
where F is degrees Fahrenheit and C is degrees Celsius.
Let’s say we wrote this Python code.
f = 68.0 # 68 degrees Fahrenheit
c = (f - 32) * 1.8 # attempt conversion to Celsius
print(c) # print the result
This prints 64.8 which is incorrect! What’s wrong? We’re multiplying by
1.8 when we should be dividing by 1.8! This is a problem ofsemantics.
Ourcodeissyntacticallyvalid.Pythoninterpretsit,runsit,andproduces
a result—but the result iswrong. Our code does not do what we intend
for it to do. Call it what you will—a defect, an error, a bug—but it’s a
semantic error, not a syntactic error.
To fix it, we must change thesemantics—the meaning—of our code.
In this case the fix is simple.
f = 68.0 # 68 degrees Fahrenheit
c = (f - 32) / 1.8 # correct conversion to Celsius
print(c) # print the result
and now this prints 20.0 which is correct. Now our program has the
semantics we intend for it.
2.6 Introduction to binary numbers
You may know that computers use binary code to represent, well …ev-
erything. Everything stored on your computer’s disk or solid-state drive
is stored in binary form, a sequence of zeros and ones. All the programs
your computer runs are sequences of zeros and ones. All the photos you
save, all the music you listen to, even your word processing documents
are all zeros and ones. Colors are represented with binary numbers. Au-
dio waveforms are represented with binary numbers. Characters in your
word processing document are represented with binary numbers. All the
instructions executed and data processed by your computer are repre-
sented in binary form.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 35}","# Introduction to Binary Numbers

## Metadata

- Page: 35
- Source: 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf'

### Basics of Binary Numbers

Computers use binary code (a sequence of zeros and ones) to represent everything, including:
- Data stored on disk or solid-state drives
- Programs
- Photos
- Music
- Word processing documents
- Colors
- Audio waveforms
- Characters
- Instructions and data processed by the computer

## Example

Colors can be represented using a binary number system. For example, the RGB color model uses three 8-bit numbers to represent the intensity of red, green, and blue in a color. Each bit can be either 0 or 1, resulting in 256 possible values for each color channel.

This allows for a total of 16,777,216 different colors that can be represented using the RGB color model."
"page_content='22 Programming and the Python Shell
Accordingly, as computer scientists, we need to understand how we rep-
resent numbers in binary form and how we can perform arithmetic oper-
ations on such numbers.
However, first, let’s review the familiardecimal system.
The decimal system
We’ve all used the decimal system.
The decimal system is apositional numeral system based on powers of
ten.6 What do we mean by that? In the decimal system, we represent
6 In fact, the first positional numeral system, developed in ancient Babylonia
around 2000 BCE, used 60 as a base. Our base 10 system is an extension of the
Hindu-Arabic numeral system. Other cultures have used other bases. F or example,
the Kewa counting system in Papua New Guinea is base 37—counting on fingers
and other parts of the body: heel of thumb, palm, wrist, forearm,etc, up to the top
of the head, and then back down the other side! See: W olfers, E. P . (1971). “The' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 36}","## Page 36

## Decimal System

**Definition:**

- Apositional numeral system based on powers of ten

**Explanation:**

- Represents numbers using positions and powers of 10
- Each position represents a different power of 10 (10^0, 10^1, 10^2, etc.)

**Example:**

- 457 in decimal represents: (4 * 10^2) + (5 * 10^1) + (7 * 10^0) = 400 + 50 + 7 = 457"
"page_content='Introduction to binary numbers 23
numbers as coeﬀicients in a sequence of powers of ten, where each coeﬀi-
cient appears in a position which corresponds to a certain power of ten.
(That’s a mouthful, I know.) This is best explained with an example.
Take the (decimal) number 8,675,309. Each digit is a coeﬀicient in the
sequence
8 × 106 + 6 × 105 + 7 × 104 + 5 × 103 + 3 × 102 + 0 × 101 + 9 × 100
Recall that anything to the zero power is one—so,100 = 1. If we do the
arithmetic we get the correct result:
8 × 106 = 8,000,000
6 × 105 = 0,600,000
7 × 104 = 0,070,000
5 × 103 = 0,005,000
3 × 102 = 0,000,300
0 × 101 = 0,000,000
9 × 100 = 0,000,009
and all that adds up to 8,675,309.
This demonstrates the power and conciseness of a positional numeral
system.
Notice that if we use base 10 for our system we need ten numerals to
use as coeﬀicients. For base 10, we use the numerals 0, 1, 2, 3, 4, 5, 6, 7,
8, and 9.
However, apart from the fact that most of us conveniently have ten
fingers to count on, the choice of 10 as a base is arbitrary.
Computers and the binary system
As noted, computers use the binary system. This choice was originally
motivated by the fact that electronic components which can be in one of
two states are generally easier to design and implement than components
that can be in one of more than two states.
So how does the binary system work? It, too, is apositional numeral
system, but instead of using 10 as a base we use 2.
When using base 2, we need only two numerals: 0 and 1.
In the binary system, we represent numbers as coeﬀicients in a se-
quence of powers oftwo. As with the decimal system, this is best ex-
plained with an example.
Take the decimal number 975. In binary this is 1111001111. That’s
1 × 29 + 1 × 28 + 1 × 27 + 1 × 26 + 0 × 25
+ 0 × 2 4 + 1 × 23 + 1 × 22 + 1 × 21 + 1 × 20
Again, doing the arithmetic
Original Counting Systems of Papua and New Guinea”, The Arithmetic T eacher,
18(2), 77-83, https://www.jstor.org/stable/41187615.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 37}","**Metadata:**

* Page: 37
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Introduction to Binary Numbers**

**Decimal Numeral System**

* Represents numbers as coefficients in a sequence of powers of ten.
* Example: 8,675,309 represents
    * 8 × 10^6 + 6 × 10^5 + 7 × 10^4 + 5 × 10^3 + 3 × 10^2 + 0 × 10^1 + 9 × 10^0

**Binary Numeral System**

* Motivated by electronic components that can be in one of two states.
* Uses 2 as a base.
* Requires only two numerals: 0 and 1.
* Represents numbers as coefficients in a sequence of powers of two.
* Example: 975 (decimal) is 1111001111 (binary), representing
    * 1 × 2^9 + 1 × 2^8 + 1 × 2^7 + 1 × 2^6 + 0 × 2^5 + 0 × 2^4 + 1 × 2^3 + 1 × 2^2 + 1 × 2^1 + 1 × 2^0

**Difference between Decimal and Binary Systems:**

| Feature | Decimal | Binary |
|---|---|---|
| Base | 10 | 2 |
| Number of numerals | 10 (0-9) | 2 (0, 1) |
| Number representation | Coefficients in powers of 10 | Coefficients in powers of 2 |"
"page_content='24 Programming and the Python Shell
1 × 29 = 1000000000
1 × 28 = 0100000000
1 × 27 = 0010000000
1 × 26 = 0001000000
0 × 25 = 0000000000
0 × 24 = 0000000000
1 × 23 = 0000001000
1 × 22 = 0000000100
1 × 21 = 0000000010
1 × 20 = 0000000001
and that all adds up to 1111001111. To verify, let’s represent these values
in decimal format and check our arithmetic.
1 × 29 = 512
1 × 28 = 256
1 × 27 = 128
1 × 26 = 064
0 × 25 = 000
0 × 24 = 000
1 × 23 = 008
1 × 22 = 004
1 × 21 = 002
1 × 20 = 001
Indeed, this adds to 975.
Where in the decimal system we have the ones place, the tens place,
the hundreds place, and so on, in the binary system we have the ones
place, the twos place, the fours place, and so on.
How would we write, in binary, the decimal number 3? 11. That’s one
two, and one one.
How about the decimal number 10? 1010. That’s one eight, zero fours,
one two, and zero ones.
How about the decimal number 13? 1101. That’s one eight, one four,
zero twos, and one one.
Binary arithmetic
Once you get the hang of it, binary arithmetic is straightforward. Here’s
the most basic example: adding 1 and 1.
1
+ 1
1 0' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 38}","**Formatting Instructions:**

1. **Content Structuring:**
   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**
   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**
   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

   Example:
   ```python
   # Python code example
   print(""Hello, World!"")
   
4. **Tabular Formatting:**
   - If possible, present data in tabular format to enhance clarity.

5. **Example Inclusion:**
   - Include examples clearly if provided.

6. **Content Preservation:**
   - Do not generate any content by yourself. Format the provided content as it is without changing or modifying it.

**Formatted Output:**

**Binary Numbers**

**Overview**

A binary number is a numerical representation that uses only two digits, 0 and 1. It is commonly used in computer systems because computers operate using binary logic.

**Binary Arithmetic**

Adding 1 and 1:

```
1
+ 1
-------
1 0
```

Binary arithmetic is based on the following rules:

| Operation | Result |
|---|---|
| 0 + 0 | 0 |
| 0 + 1 | 1 |
| 1 + 0 | 1 |
| 1 + 1 | 10 (carry 1) |

**Converting Binary to Decimal**

To convert a binary number to decimal, multiply each digit by its place value and sum the results.

**Example**

```
1111001111
1 × 2^9 = 512
1 × 2^8 = 256
1 × 2^7 = 128
1 × 2^6 = 64
0 × 2^5 = 0
0 × 2^4 = 0
1 × 2^3 = 8
1 × 2^2 = 4
1 × 2^1 = 2
1 × 2^0 = 1
```

Sum: 975

**Converting Decimal to Binary**

To convert a decimal number to binary, repeatedly divide by 2 and record the remainders in reverse order.

**Example**

Converting 10 to binary:

```
10 ÷ 2 = 5 remainder 0
5 ÷ 2 = 2 remainder 1
2 ÷ 2 = 1 remainder 0
1 ÷ 2 = 0 remainder 1
```

Binary representation: 1010"
"page_content='Exercises 25
In the ones column we add one plus one, that’s two—binary 10—so we
write 0, carry 1 into the twos column, and then write 1 in the twos
column, and we’re done.
Now let’s add 1011 (decimal 11) and 11 (decimal 3).
1 0 1 1
+ 1 1
1 1 1 0
In the ones column we add one plus one, that’s two—binary 10—so we
write 0 and carry 1 into the twos column. Then in the twos column we
add one (carried) plus one, plus one, that’s three—binary 11—so we
write 1 and carry 1 into the fours column. In the fours column we add
one (carried) plus zero, so we write 1, and we have nothing to carry. In
the eights column we have only the single eight, so we write that, and
we’re done. To verify (in decimal):
1 × 23 + 1 × 22 + 1 × 21 + 0 × 20 = 1 × 8 + 1 × 4 + 1 × 2 + 0 × 1
= 14
That checks out.
2.7 Exercises
Exercise 01
Write a line of Python code that prints your name to the console.
Exercise 02
Multiple choice: Python is a(n) ________ programming language.
a. compiled
b. assembly
c. interpreted
d. binary
Exercise 03
True or false? Code that you write in the Python shell is saved.
Exercise 04
How do you exit the Python shell?
Exercise 05
Python can operate in two different modes. What are these modes and
how do they differ?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 39}","## Formatting Instructions

### Content Structuring:
- Key sections identified and organized under appropriate headings and subheadings.
- Logical flow and clarity ensured in the content.

### Metadata Inclusion:
- Page number: 39
- Line numbers: Not available
- Source name: 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf'

### Code Formatting:
- No code provided in the content.

## Exercises

### Binary Addition

**Example:**

Adding 1011 (decimal 11) and 11 (decimal 3):

```
1 0 1 1
+ 1 1
1 1 1 0
```

- Ones column: 1 + 1 = 10 (binary), write 0, carry 1
- Twos column: 1 (carried) + 1 + 1 = 11 (binary), write 1, carry 1
- Fours column: 1 (carried) + 0 = 1, write 1
- Eights column: 1, write 1

Result: 1110 (decimal 14)

### Python Exercises

**Exercise 01:**

```python
print(""Your name"")
```

**Exercise 02:**

*c. interpreted*

**Exercise 03:**

*False*

**Exercise 04:**

*Type `quit()` in the shell*

**Exercise 05:**

*Interactive mode:*
    - Code is executed immediately as it is entered.
    - Used for testing and quick tasks.
*Script mode:*
    - Code is saved in a file and executed as a whole.
    - Used for larger programs and scripts."
"page_content='26 Programming and the Python Shell
Exercise 06
The following is an example of what kind of code?
1001011011011011 1110010110110001 1010101010101111
1111000011110010 0000101101101011 0110111000110110
Exercise 07
Calculate the following sums in binary:
a. 10 + 1
b. 100 + 11
c. 11 + 11
d. 1011 + 10
After you’ve worked these out in binary, convert to decimal form and
check your arithmetic.
Exercise 08 (challenge!)
Try binary subtraction. What is 11011 - 1110? After calculating in binary,
convert to decimal and check your answer.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 40}","**Content Formatting:**

**Binaries and Code**

**Exercises:**

**Exercise 06**

* **Question:** Identify the type of code.
* **Code:** 1001011011011011 1110010110110001 1010101010101111 1111000011110010 0000101101101011 0110111000110110

**Exercise 07**

* **Question:** Calculate the following sums in binary and convert to decimal.
* **Sums:**
    * a. 10 + 1
    * b. 100 + 11
    * c. 11 + 11
    * d. 1011 + 10

**Exercise 08 (Challenge)**

* **Question:** Perform binary subtraction and check the answer in decimal.
* **Subtraction:** 11011 - 1110

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 40"
"page_content='Chapter 3
Types and literals
This chapter will expand our understanding of programming by intro-
ducing types and literals. All objects in Python have atype, andliterals
are fixed values of a given type. For example, the literal1 is an integer
and is of typeint (short for “integer”). Python has many different types.
Learning objectives
• You will learn about many commonly used types in Python.
• You will understand why we have different types.
• You will be able to write literals of various types.
• You will learn different ways to write string literals which include
various quotation marks within them.
• You will learn about representation error as it applies to numeric
types (especially floating-point values).
T erms introduced
• dynamic typing
• escape sequence
• empty string, empty tuple, and empty list
• heterogeneous
• literal
• representation error
• static typing
• “strong” vs “weak” typing
• type (includingint, float, str, list, tuple, dict, etc.)
• type inference
• Unicode
27' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 41}","## Chapter 3
Types and literals

**Page 41**

This chapter expands our understanding of programming by introducing types and literals. All objects in Python have a type, and literals are fixed values of a given type.

### Learning objectives

- Learn about many commonly used types in Python.
- Understand why we have different types.
- Learn to write literals of various types.
- Learn different ways to write string literals, including various quotation marks within them.
- Learn about representation error as it applies to numeric types (especially floating-point values).

### Terms introduced

- dynamic typing
- escape sequence
- empty string, empty tuple, and empty list
- heterogeneous
- literal
- representation error
- static typing
- “strong” vs “weak” typing
- type (including int, float, str, list, tuple, dict, etc.)
- type inference
- Unicode"
"page_content='28 Types and literals
3.1 What are types?
Consider the universe of wheeled motor vehicles. There are many types:
motorcycles, mopeds, automobiles, sport utility vehicles, busses, vans,
tractor-trailers, pickup trucks, all-terrain vehicles,etc., and agricultural
vehicles such as tractors, harvesters,etc. Each type has characteristics
which distinguish it from other types. Each type is suited for a particular
purpose (you wouldn’t use a moped to do the work of a tractor, would
you?).
Similarly, everything in Python has atype, and every type is suited
for a particular purpose. Python’s types include numeric types such as
integers and floating-point numbers; sequences such as strings, lists, and
tuples; Booleans (true and false); and other types such as sets, dictionar-
ies, ranges, and functions.
Whydowehavedifferenttypesinaprogramminglanguage?Primarily
for three reasons.
First, different types have different requirements regarding how they
are stored in the computer’s memory (we’ll take a peek into this when
we discussrepresentation).
Second,certainoperationsmayormaynotbeappropriatefordifferent
types. For example, we can’t raise 5 to the'pumpkin' power, or divide
'illuminate' by 2.
Third, some operators behave differently depending on the types of
their operands. For example, we’ll see in the next chapter how+ is used
to add numeric types, but when the operands are strings+ performs
concatenation. How does Python know what operations to perform and
what operations are permitted? It checks the type of the operands.
What’s a literal?
A literal is simply fixed values of a given type. For example,1 is a literal.
It means, literally, the integer1. Other examples of literals follow.
Some commonly used types in Python
Here are examples of some types we’ll see. Don’t worry if you don’t know
what they all are now—all will become clear in time.
Type Description Example(s) of literals
int integer 42, 0, -1
float floating-point
number
3.14159, 2.7182, 0.0
str string 'Python', 'badger', 'hovercraft'
bool Boolean True, False
NoneType none, no value None
tuple tuple (), ('a', 'b', 'c'), (-1, 1)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 42}","## Types and Literals

### What are types?

In programming, everything has a type, which determines how it is stored in memory and what operations can be performed on it. Python has various types, including numeric types (integers and floating-point numbers), sequences (strings, lists, and tuples), Booleans (True and False), and others (sets, dictionaries, ranges, functions).

### Why different types?

1. **Memory storage**: Different types have different memory requirements.
2. **Appropriate operations**: Certain operations may only be applicable to specific types (e.g., raising 5 to the pumpkin power).
3. **Operator behavior**: Operators behave differently depending on the types of their operands (e.g., + adds numbers and concatenates strings).

### What is a literal?

A literal is a fixed value of a given type. For example, 1 is a literal integer, meaning the integer value 1.

### Commonly used types in Python

| Type | Description | Example(s) of literals |
|---|---|---|
| int | Integer | 42, 0, -1 |
| float | Floating-point number | 3.14159, 2.7182, 0.0 |
| str | String | 'Python', 'badger', 'hovercraft' |
| bool | Boolean | True, False |
| NoneType | None, no value | None |
| tuple | Tuple | (), ('a', 'b', 'c'), (-1, 1)' |"
"page_content='What are types? 29
Type Description Example(s) of literals
list list [], [1, 2, 3], ['foo', 'bar',
'baz']
dict dictionary (key:
value)
{'cheese': 'stilton'}, {'age': 99}
function function (see: Chapter 5)
int
The int type represents integers, that is, whole numbers, positive or
negative, and zero. Examples ofint literals: 1, 42, -99, 0, 10000000, etc.
For readability, we can write integer literals with underscores in place
of thousands separators. For example,1_000_000 is rather easier to read
than 1000000, and both have the same value.
float
Objects of thefloat type represent floating-point numbers, that is, num-
bers with decimal (radix) points. These approximate real numbers (to
varying degrees; see the section on representation error). Examples of
float literals: 1.0, 3.1415, -25.1, etc.
str
A string is an ordered sequence of characters. Each word on this page is
a string. So are""abc123"" and ""@&)z)$""—the symbols of a string needn’t
be alphabetic. In Python, objects of thestr (string) type hold zero or
more symbols in an ordered sequence. Strings must bedelimited to dis-
tinguish them from variable names and other identifiers which we’ll see
later. Strings may be delimited with single quotation marks, double quo-
tation marks, or “triple quotes.” Examples ofstr literals: ""abc"", ""123"",
""vegetable"", ""My hovercraft is full of eels."" , """"""What nonsense is
this?"""""", etc.
Single and double quotation marks are equivalent when delimiting
strings, but you must be consistent in their use—starting and ending
delimitersmustbethesame.""foo"" and'foo' arebothvalidstringliterals;
""foo' and 'foo"" are not.
>>> ""foo'
File ""<stdin>"", line 1
""foo'
^
SyntaxError: unterminated string literal (detected at line 1)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 43}","### Types in Python

**Metadata**
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 43

###### **Type** | **Description** | **Example(s) of literals**
------- | -------- | --------
list | list | [], [1, 2, 3], ['foo', 'bar', 'baz']
dict | dictionary (key: value) | {'cheese': 'stilton'}, {'age': 99}
function | function (see: Chapter 5) | -
int | An integer, that is, a whole number, positive or negative, and zero. | 1, 42, -99, 0, 10000000, etc.
float | A floating-point number, that is, a number with decimal (radix) points. | 1.0, 3.1415, -25.1, etc.
str | An ordered sequence of characters. | ""abc"", ""123"", ""vegetable"", ""My hovercraft is full of eels."", """"""What nonsense is this?"""""", etc.

**Note:** Single and double quotation marks are equivalent when delimiting strings, but you must be consistent in their use—starting and ending delimiters must be the same.

**Example:** ""foo"" and 'foo' are both valid string literals; ""foo' and 'foo"" are not."
"page_content='30 Types and literals
It is possible to have a string without any characters at all! We call
this theempty string, and we write it'' or """" (just quotation marks with
nothing in between).
Triple-quoted strings have special meaning in Python, and we’ll see
more about that in Chapter 6, on style. These can also be used for
creating multi-line strings. Multi-line strings are handy for things like
email templates and longer text, but in general it’s best to use the single-
or double-quoted versions.
bool
bool type is used for two special values in Python:True and False. bool
is short for “Boolean”, named after George Boole (1815–1864), a largely
self-taught logician and mathematician, who devised Boolean logic—a
cornerstone of modern logic and computer science (though computers
did not yet exist in Boole’s day).
There are only two literals of typebool: True and False. Notice that
these are not strings, but instead are special literals of this type (so there
aren’t any quotation marks, and capitalization is significant).
1
NoneType
NoneType is a special type in Python to represent the absence of a value.
Thismayseemalittleodd,butthiscomesupquiteofteninprogramming.
There isexactly one literal of this type:None (and indeed there is exactly
one instance of this type).
Like True and False, None is not a string, but rather a special literal.
tuple
A tuple is an immutable sequence of zero or more values. If an object
is immutable, this means it cannot be changed once it’s been created.
Tuples are constructed using the comma to separate values. Theempty
tuple, (), is a tuple containing no elements.
The elements of a tuple can be of any type—including another tuple!
The elements of a tuple needn’t be the same type. That is, tuples can be
heterogeneous.
While not strictly required by Python syntax (except in the case of
the empty tuple), it is conventional to write tuples with enclosing paren-
theses. Examples of tuples:(), (42, 71, 99) , (x, y) , ('cheese', 11,
True), etc.
A complete introduction to tuples appears in Chapter 10.
list
A list is amutable sequence of zero or more values. If an object ismuta-
ble, then it can be changed after it is created (we’ll see how to mutate
lists later). Lists must be created with square brackets and elements
1 In some instances, it might be helpful to interpret these as “on” and “off” but
this will vary with context.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 44}","**Types and Literals**

**Strings**

* An empty string is represented by '' or """".
* Triple-quoted strings are used for creating multi-line strings.

**bool**

* Represents True and False values.
* These are special literals, not strings.
* Case-sensitive (True and False are different).

**NoneType**

* Represents the absence of a value.
* Exactly one literal: None (case-sensitive).

**tuple**

* Immutable sequence of values.
* Created with commas.
* Empty tuple: ().
* Can contain elements of any type, even other tuples.
* Written with enclosing parentheses (though not mandatory).
* Examples: (), (42, 71, 99), (x, y), ('cheese', 11, True).

**list**

* Mutable sequence of values.
* Created with square brackets.
* Elements can be of any type.
* Examples: [], ['a', 'b', 'c'], [1, 2, 3], [None, True, False].

**Tabular Difference between tuple and list**

| Feature | tuple | list |
|---|---|---|
| Mutability | Immutable | Mutable |
| Creation | Commas | Square brackets |
| Empty representation | () | [] |
| Type of elements | Any type | Any type |
| Heterogeneity | Can have elements of different types | Can have elements of different types |
| Enclosing symbol | Optional parentheses | Required square brackets |"
"page_content='Dynamic typing 31
within a list are separated by commas. Theempty list , [], is a list con-
taining no elements.
The elements of a list can be of any type—including another list! The
elements of a list needn’t be the same type. That is, like tuples, lists can
be heterogeneous.
Examples of lists:[], ['hello'], ’['Larry', 'Moe', 'Curly'], [3, 6,
9, 12], [a, b, c], [4, 'alpha', ()], etc.
A complete introduction to lists appears in Chapter 10.
dict
dict is short fordictionary. Much like a conventional dictionary, Python
dictionaries store information as pairs of keys and values. We write dictio-
naries with curly braces. Keys and values come in pairs, and are written
with a colon separating key from value.
There are significant constraints on dictionary keys (which we’ll see
later in Chapter 16). However, dictionary values can be just about
anything—including lists, tuples, and other dictionaries! Like lists, dic-
tionaries are mutable. Example:
{'Egbert': 19, 'Edwina': 22, 'Winston': 35}
A complete introduction to dictionaries appears in Chapter 16.
The first few types we’ll investigate areint (integer), float (floating-
point number), str (string), and bool (Boolean). As noted, we’ll learn
more about other types later.
For a complete reference of built-in Python types, see:https://docs
.python.org/3/library/stdtypes.html
3.2 Dynamic typing
You may have heard of “strongly typed” languages or “weakly typed”
languages. These terms do not have precise definitions, and they are of
limited utility. However, it’s not uncommon to hear people referring to
Python as a weakly typed language. This isnot the case. If we’re going
to use these terms at all, Python exists toward thestrong end of the
spectrum. Python prevents most type errors at runtime, and performs
very few implicit conversions between types—hence, it’s more accurately
characterized as being strongly typed.
Static and dynamic typing
Much more useful—and precise—are the concepts ofstatic typing and
dynamic typing. Some languages arestatical ly typed, meaning that types
are known at compile time—and types of objects (variables) cannot be
changed atruntime—the time when the program is run.
Python, however, isdynamical ly typed. This means that the types of
variables can change at runtime. For example, this works just fine in
Python:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 45}","### Built-in Python Types

#### Introduction

Python has a variety of built-in types, each with its own unique characteristics and capabilities. These types can be classified into various categories, such as numeric, sequence, mapping, and Boolean. In this document, we will explore some of the fundamental built-in types in Python and their key features.

### Sequence Types

#### List

- A list is a mutable, ordered sequence of elements that can be of any type, including other lists.
- Elements in a list are separated by commas and enclosed within square brackets [].
- An empty list is represented by [].
- Lists can contain heterogeneous elements, meaning they can store elements of different types.

**Example:**

```python
my_list = [1, ""Hello"", 3.14, True]
print(my_list)

# Output: [1, 'Hello', 3.14, True]
```

### Mapping Types

#### Dictionary

- A dictionary is a mutable, unordered collection of key-value pairs.
- Keys in a dictionary must be unique and immutable, while values can be of any type.
- Dictionaries are enclosed within curly braces {}.
- Key-value pairs are separated by colons (:).

**Example:**

```python
my_dict = {""name"": ""John"", ""age"": 30, ""city"": ""New York""}
print(my_dict)

# Output: {'name': 'John', 'age': 30, 'city': 'New York'}
```

### Numeric Types

#### Integer (int)

- An integer represents a whole number, such as 1, -2, or 100.
- Integers can be of any size, and Python does not impose any limits on their magnitude.

**Example:**

```python
my_int = 12345
print(my_int)

# Output: 12345
```

#### Floating-Point Number (float)

- A floating-point number represents a decimal number with fractional part, such as 3.14, -5.67, or 1.0.
- Floating-point numbers have a limited precision and can be affected by floating-point arithmetic errors.

**Example:**

```python
my_float = 3.14159265
print(my_float)

# Output: 3.14159265
```

### Boolean Type (bool)

- A boolean value represents a logical state, either True or False.
- Boolean values are used in conditional statements and logical operations.

**Example:**

```python
my_bool = True
print(my_bool)

# Output: True
```

### Static vs. Dynamic Typing

#### Static Typing

- In statically typed languages, the type of a variable is known at compile time and cannot be changed during program execution.
- This can help catch type errors early on and can improve code reliability.
- Examples of statically typed languages include C, C++, and Java.

#### Dynamic Typing

- In dynamically typed languages, the type of a variable is not known until runtime and can change during program execution.
- This allows for greater flexibility and can make code more concise.
- Python is a dynamically typed language, meaning that the type of a variable is determined at runtime."
"page_content='32 Types and literals
>>> x = 1
>>> print(type(x))
<class 'int'>
>>> x = 'Hey! Now I am a string!'
>>> print(type(x))
<class 'str'>
This demonstrates dynamic typing. When we first create the variable
x, we assign to it the literal value1. Python understands that1 is an
integer, and so the result is an object of type'int' (which is short for
“integer”). On the next line, we print the type ofx, and Python prints:
<class 'int'> as we’d expect. Then, we assign a new value tox, and
Python doesn’t miss a beat. Since Python is dynamically typed, we can
change a variable’s type at runtime. When we assign tox the value'Hey!
Now I am a string!' , the type ofx becomes 'str' (which is short for
“string”).
In statically typed languages (say, C or Java or Rust) if we were to
attempt something similar, we’d receive an error at compile time.
For example, in Java:
int x = 1;
x = ""Hey! Now I am a string!"";
would result in a compile-time error: “ incompatible types:
java.lang.String cannot be converted to int”.
Notice that, unlike Python, when declaring a variable in Java a type
annotation must be supplied, and once something is declared as a given
type, that typecannot be changed.
It’s important to note that it’s not the type annotation
int x = 1
that makes Java statically typed. For example, other languages havetype
inference butarestillstaticallytyped(Pythonhaslimitedtypeinference).
T ype inferenceis when the compiler or interpreter caninfer something’s
type without having to be told explicitly “this is a string” or “this is an
integer.” For example, in Rust:
let x = 1;
x = ""Hey! Now I am a string!"";
would, again, result in a compile-time error: “ mismatched types...
expected integer, found &str”.
While dynamic typing is convenient, this does place additional respon-
sibility on you the programmer. This is particularly true since Python,
unlike many other languages, doesn’t care a whit about the types of
formal parameters or return values of functions. Some languages ensure
that programmers can’t write code that calls a function with arguments
of the wrong type, or return the wrong type of value from a function.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 46}","## 32 Types and literals

### Dynamic Typing

```python
>>> x = 1
>>> print(type(x))
<class 'int'>
>>> x = 'Hey! Now I am a string!'
>>> print(type(x))
<class 'str'>
```

This demonstrates dynamic typing. When we first create the variable `x`, we assign to it the literal value 1. Python understands that 1 is an integer, and so the result is an object of type `int` (which is short for “integer”). On the next line, we print the type of `x`, and Python prints: ` <class 'int'>` as we’d expect. Then, we assign a new value to `x`, and Python doesn’t miss a beat. Since Python is dynamically typed, we can change a variable’s type at runtime. When we assign to `x` the value `'Hey! Now I am a string!'`, the type of `x` becomes `'str'` (which is short for “string”).

### Statically Typed Languages

In statically typed languages (say, C or Java or Rust) if we were to attempt something similar, we’d receive an error at compile time.
For example, in Java:

```java
int x = 1;
x = ""Hey! Now I am a string!"";
```

would result in a compile-time error: “ incompatible types: java.lang.String cannot be converted to int”.
Notice that, unlike Python, when declaring a variable in Java a type annotation must be supplied, and once something is declared as a given type, that type cannot be changed.

### Type Inference

It’s important to note that it’s not the type annotation 

```java
int x = 1;
```

that makes Java statically typed. For example, other languages have type inference but are still statically typed (Python has limited type inference). 

Type inference is when the compiler or interpreter can infer something’s type without having to be told explicitly “this is a string” or “this is an integer.” For example, in Rust:

```rust
let x = 1;
x = ""Hey! Now I am a string!"";
```

would, again, result in a compile-time error: “ mismatched types... expected integer, found &str”.

### Responsibility of the Programmer

While dynamic typing is convenient, this does place additional respon- sibility on you the programmer. This is particularly true since Python, unlike many other languages, doesn’t care a whit about the types of formal parameters or return values of functions. Some languages ensure that programmers can’t write code that calls a function with arguments of the wrong type, or return the wrong type of value from a function."
"page_content='Types and memory 33
Python does not. Python won’t enforce the correct use of types—that’s
up to you!
3.3 Types and memory
The details of how Python stores objects in memory is outside the scope
of this text. Nevertheless, a little peek can be instructive.
Figure 3.1: A sneak peek into anint object
Figure 3.1 includes a representation of an integer with value (decimal)
65. In binary, decimal 65 is represented as01000001. That’s
0 × 27 + 1 × 26 + 0 × 25 + 0 × 24 + 0 × 23 + 0 × 22 + 0 × 21 + 1 × 20
Find 01000001 within the bitstring2 shown in Figure3.1. That’s the
integer value.3
Figure 3.2 shows the representation of the string'A'.4 The letter ‘A’
is represented with the value (code point) of 65.
2 A bitstring is just a sequence of zeros and ones.
3 Actually , the value is stored in two bytes 01000001 00000000 as shown within the
box in Figure 3.1. This layout in memory will vary with the particular implementa-
tion on your machine.
4 Python uses Unicode encoding for strings. F or reading on character encodings,
don’t miss Joel Spolsky’s “The Absolute Minimum Every Software Developer Abso-
lutely , Positively Must Know About Unicode and Character Sets (No Excuses!)” .' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 47}","## Types and memory

### Metadata

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 47

### Main Content

**Python's Type System**

Python is a dynamically typed language, meaning that the type of a variable is not declared explicitly, but is determined at runtime based on the value assigned to it. This allows for greater flexibility and ease of use, but it can also lead to errors if the types of variables are not used correctly.

**Memory Storage of Objects**

The details of how Python stores objects in memory are complex and beyond the scope of this text. However, a simplified view can be helpful for understanding how Python manages memory.

**Representation of Integers**

In Figure 3.1, an integer with the value (decimal) 65 is represented as 01000001. This binary representation corresponds to the following:

```
0 × 27 + 1 × 26 + 0 × 25 + 0 × 24 + 0 × 23 + 0 × 22 + 0 × 21 + 1 × 20
```

**Representation of Strings**

In Figure 3.2, the string 'A' is represented with the value (code point) of 65. Python uses Unicode encoding for strings, which allows it to represent characters from a wide range of languages."
"page_content='34 Types and literals
Figure 3.2: A sneak peek into astr object
Again, find 01000001 within the bitstring Figure3.2—that’s the en-
coding of'A'.
Apart from both representations containing the value 65 (01000001),
notice how different the representations of an integer and a string are!
How does Python know to interpret one as an integer and the other as a
string? The type information is encoded in this representation (that’s a
part of what all the other ones and zeros are). That’s how Python knows.
That’s one reason types are crucial!
Note: Other languages do this differently, and the representations
(above) will vary somewhat depending on your machine’s architecture.
Now, you don’t need to know all the details of how Python uses your
computer’s memory in order to write effective programs, but this should
give you a little insight into one reason why we need types. What’s
important for you as a programmer is to understand that different types
have different behaviors. There are things that you can do with an integer
that you can’t do with a string, andvice versa (and that’s a good thing).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 48}","**Formatted Content:**

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 48

**Section 1: Types and Literals**

**Subheading 1: A Sneak Peek into `ast` Object**

* Figure 3.2 illustrates an `ast` object.
* **Example:** Within Figure 3.2, the bitstring ""01000001"" encodes the character 'A'.

**Subheading 2: Type Information**

* Python interprets ""01000001"" as an integer because of its type information, which is encoded within the representation.
* Different languages handle type representation differently.

**Subheading 3: Importance of Types**

* Types determine different behaviors for different data types.
* Certain operations are only possible with specific types (e.g., integer vs. string)."
"page_content='More on string literals 35
3.4 More on string literals
Strings as ordered collections of characters
As we’ve seen, strings are ordered collections of characters, delimited
by quotation marks. But what kind of characters can be included in a
string?
Since Python 3.0, strings are composed ofUnicode characters.5
Unicode, formally The Unicode Standard, is an information
technology standard for the consistent encoding, representa-
tion, and handling of text expressed in most of the world’s
writing systems. The standard, which is maintained by the
Unicode Consortium, defines as of the current version (15.0)
149,186 characters covering 161 modern and historic scripts,
as well as symbols, thousands of emoji (including in colors),
and non-visual control and formatting codes.
6
That’s a lot of characters!
We won’t dive deep into Unicode, but you should be aware that
Python uses it, and that""hello"", ""Γειά σου"", and""привіт"" are all valid
strings in Python. Strings can contain emojis too!
Strings containing quotation marks or apostrophes
You’ve learned that in Python, we can use either single or double quota-
tion marks to delimit strings.
>>> 'Hello World!'
'Hello World!'
>>> ""Hello World!""
'Hello World!'
Both are syntactically valid, and Python does not differentiate between
the two.
It’s not unusual that we have a string which contains quotation marks
or apostrophes. This can motivate our choice of delimiters.
For example, given the name of a local coffee shop, Speeder and Earl’s,
there are two ways we could write this in Python. One approach would
be toescape the apostrophe within a string delimited by single quotes:
>>> 'Speeder and Earl\'s'
""Speeder and Earl's""
Notice what’s going on here. Since we want an apostrophe within this
string, if we use single quotes, we precede the apostrophe with\. This
5 Y ou may have heard of Unicode, or perhaps ASCII (American Standard Code
for Information Interchange). ASCII was an early standard and in Python was su-
perseded in 2008 with the introduction of Python 3.
6 https://en.wikipedia.org/wiki/Unicode' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 49}","**Page 49**
**Line Number:** 975-1017

## More on String Literals

### Strings as Ordered Collections of Characters

- Strings are ordered collections of characters, enclosed by quotation marks.
- Since Python 3.0, strings comprise Unicode characters.

### Unicode Character Standard

- Unicode is a standard for encoding, representing, and handling text in writing systems worldwide.
- The Unicode Consortium defines 149,186 characters (Unicode 15.0), including scripts, emojis, and formatting codes.

### Strings Containing Quotation Marks or Apostrophes

- Python allows both single and double quotes for string delimiters.
- Delimiter choice can be influenced by characters within the string.

**Example:**

> `'Speeder and Earl\'s'` escapes the apostrophe using a backslash.

**Difference between Single and Double Quotes for String Delimiters**

| Feature | Single Quotes | Double Quotes |
|---|---|---|
| Escaping Apostrophes | Required | Not Required |
| Syntax | `'string'` | `""string""` |"
"page_content='36 Types and literals
is called escaping, and it tells Python that what follows should be in-
terpreted as an apostrophe and not a closing delimiter. We refer to the
string \', as anescape sequence.7
What would happen if we left that out?
>>> 'Speeder and Earl's'
Traceback (most recent call last):
...
File ""<input>"", line 1
'Speeder and Earl's'
^
SyntaxError: unterminated string literal (detected at line 1)
What’sgoingonhere?Pythonreadsthesecondsinglequoteastheending
delimiter, so there’s an extra—syntactically invalid—trailings' at the
end.
Another approach is to use double quotations as delimiters.
>>> ""Speeder and Earl's""
""Speeder and Earl's""
Thesameappliestodoublequoteswithinastring.Let’ssaywewanted
to print
“Medium coffee, please”, she said.
We could escape the double quotes within a string delimited by double
quotes:
>>> ""\""Medium coffee, please\"", she said.""
'""Medium coffee, please"", she said.'
However, it’s a little tidier in this case to use single quote delimiters.
>>> '""Medium coffee, please"", she said.'
'""Medium coffee, please"", she said.'
What happens if we have a string with both apostrophes
and double quotes?
Say we want the string
“I’ll have a Speeder’s Blend to go”, she said.
What now? Now we must use escapes. Either of the following work:
7 Escape sequence is a term whose precise origins are unknown. It’s generally un-
derstood to mean that we use these sequences to “escape” from the usual meaning
of the symbols used. In this particular context, it means we don’t treat the apostro-
phe following the slash as a string delimiter (as it would otherwise be treated), but
rather as a literal apostrophe.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 50}","**36 Types and Literals**

**Escape Sequences**

When a string contains a character that is also used as a delimiter, it is necessary to escape the character with a backslash (\). This tells Python that the character should be interpreted as a literal rather than a delimiter.

**Example:**

```python
>>> 'Speeder and Earl\'s'
'Speeder and Earl's'
```

**Double Quotes as Delimiters**

Double quotes can also be used as delimiters.

```python
>>> ""Speeder and Earl's""
""Speeder and Earl's""
```

**Escaping Double Quotes**

To escape double quotes within a string delimited by double quotes, use a backslash:

```python
>>> ""\""Medium coffee, please\"", she said.""
'""Medium coffee, please"", she said.'
```

**Escaping Apostrophes and Double Quotes**

To escape both apostrophes and double quotes, use the following syntax:

```python
>>> '""Medium coffee, please"", she said.'
'""Medium coffee, please"", she said.'
```

**Comparison of Escape Sequences**

| Escape Sequence | Interpretation | Example |
|---|---|---|
| \' | Apostrophe | 'Speeder and Earl's' |
| "" | Double quote | ""Speeder and Earl's"" |
| \\ | Backslash | ""\\"" |"
"page_content='Representation error of numeric types 37
>>> '""I\'ll have a Speeder\'s Blend to go"", she said.'
'""I\'ll have a Speeder\'s Blend to go"", she said.'
>>> print('""I\'ll have a Speeder\'s Blend to go"", she said.')
""I'll have a Speeder's Blend to go"", she said.
or
>>> ""\""I'll have a Speeder's Blend to go\"", she said.""
'""I\'ll have a Speeder\'s Blend to go"", she said.'
>>> print(""\""I'll have a Speeder's Blend to go\"", she said."")
""I'll have a Speeder's Blend to go"", she said.
Not especially pretty, but there you have it.
More on escape sequences
We’ve seen how we can use the escape sequences\' and \"" to avoid
having the apostrophe and quotation mark treated as string delimiters,
thereby allowing us to use these symbols within a string literal.
There are other escape sequences which work differently. The escape
sequences \n and \t are used to insert a newline or tab character into
a string, respectively. The escape sequence\\ is used to insert a single
backslash into a string.
Escape sequence meaning
\n newline
\t tab
\\ backslash
\' single quote / apostrophe
\"" double quote
Python documentation for strings
For more, see the Python documentation for strings, includingAn Infor-
mal Introduction to Python 8 and Lexical Analysis.9
3.5 Representation error of numeric types
Representation error occurs when we try to represent a number using a
finite number of bits or digits which cannot be accurately represented in
the system chosen. For example, in our familiar decimal system:
8 https://docs.python.org/3/tutorial/introduction.html#strings
9 https://docs.python.org/3/reference/lexical_analysis.html#literals' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 51}","## Representation Error of Numeric Types
**Metadata**:
- Page Number: 37
- Line Numbers: 51
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Escape Sequences
- `\'` - Single quote / apostrophe
- `\""` - Double quote
- `\n` - Newline
- `\t` - Tab
- `\\` - Backslash

### Representation Error of Numeric Types
Representation error occurs when representing a number with a finite number of bits or digits cannot be accurately represented in the chosen system. For example, in the decimal system:

| Value | Representation |
| --- | --- |
| 1/3 | 0.3333333... |
| 1/10 | 0.1000000... |

These values cannot be represented exactly as finite decimals but must be rounded or truncated."
"page_content='38 Types and literals
number decimal representation representation error
1 1 0
1/3 0.3333333333333333 0.0000000000000000333 …
1/7 0.1428571428571428 0.0000000000000000571428 …
Natural numbers, integers, rational numbers, and real
numbers
You probably know that the set of all natural numbers
ℕ = {0, 1, 2, 3, …}
is infinite.
From there it’s not a great leap to see that the set of all integers
ℤ = {… , −2, −1, 0, 1, 2, …}
is infinite too.
The rational numbers, ℚ, and set of all real numbers, ℝ, also are
infinite.
This fact—that these sets are of infinite size—has implications for
numeric representation and numeric calculations on computers.
When we work with computers, numbers are given integer or floating-
point representations. For example, in Python, we have distinct types,
int and float, for holding integer and floating-point numbers, respec-
tively.
I won’t get into too much detail about how these are represented in
binary, but here’s a little bit of information.
Integers
Representation of integers is relatively straightforward. Integers are rep-
resented as binary numbers with a position set aside for the sign. So,
12345 would be represented as00110000 00111001. That’s
0 × 215 + 0 × 214 + 1 × 213 + 1 × 212
+ 0 × 1011 + 0 × 1010 + 0 × 109 + 0 × 108
+ 0 × 106 + 1 × 25 + 1 × 24 + 1 × 23
+ 0 × 22 + 0 × 21 + 1 × 20
This works out to
8192 + 4096 + 32 + 16 + 8 + 1 = 12345.
Negative integers are a little different. If you’re curious about this, see
the Wikipedia article onTwo’s Complement .' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 52}","### Types and Literals

**Natural Numbers:**

- Set: ℕ = {0, 1, 2, 3, …}
- Infinite

**Integers:**

- Set: ℤ = {… , −2, −1, 0, 1, 2, …}
- Infinite

**Rational Numbers:**

- Set: ℚ
- Infinite

**Real Numbers:**

- Set: ℝ
- Infinite

**Numeric Representations on Computers:**

- Integer representation: Given integer or floating-point representations (e.g., int and float types in Python).

**Integer Representation:**

- Represented as binary numbers with a position set aside for the sign.
- Example: 12345 represented in binary as 00110000 00111001.
- Breakdown:
  - 8192 + 4096 + 32 + 16 + 8 + 1 = 12345.
- Negative integers represented differently (see Two's Complement Wikipedia article)."
"page_content='Representation error of numeric types 39
Floating-point numbers and IEEE 754
Floating-point numbers are a little tricky. Stop and think for a minute:
How wouldyou represent floating-point numbers? (It’s not as straight-
forward as you might think.)
Floating-point numbers are represented using the IEEE 754 standard
(IEEE stands for “Institute of Electrical and Electronics Engineers”).10
There are three parts to this representation: the sign, the exponent, and
the fraction (also called themantissa or significand)—and all of these
must be expressed in binary. IEEE 754 uses either 32 or 64 bits for
representing floating point numbers. The issue with representation lies
inthefactthatthere’safixednumberofbitsavailable:onebitforthesign
of a number, eight bits for the exponent, and the rest for the fractional
portion. With a finite number of bits, there’s a finite number of values
that can be represented without error.
Examples of representation error
Now we have some idea of how integers and floating-point numbers are
represented in a computer. Consider this: We have some fixed number of
bits set aside for these representations.11 So we have a limited number
of bits we can use to represent numbers on a computer. Do you see the
problem?
The set of all integers,ℤ, is infinite. The set of all real numbers,ℝ, is
infinite. Any computer we can manufacture is finite. Now do you see the
problem?
There exist infinitely more integers, and infinitely more real numbers,
than we can represent inany system with a fixed number of bits. Let
that soak in.
For any given machine or finite representation scheme, there arein-
finitely many numbers that cannot be represented in that system ! This
means that many numbers are represented by an approximation only.
Let’s return to the example of 1/3 in our decimal system. We can
never write down enough digits to the right of the decimal point so that
we have the exact value of 1/3.
0.333333333333333333333 …
No matter how far we extend this expansion, the value will only be an
approximation of 1/3 . However, the fact that its decimal expansion is
non-terminating is determined by the choice of base (10).
What if we were to represent this in base 3? In base 3, decimal 1/3 is
0.1. In base 3, it’s easy to represent!
Of course our computers use binary, and so in that system (base
2) there are some numbers that can be represented accurately, and an
infinite number that can only be approximated.
Here’s the canonical example, in Python:
10 F or more, see: https://en.wikipedia.org/wiki/IEEE_754
11 That’s not entirely true for integers in Python, but it’s reasonable to think of
it this way for the purpose at hand.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 53}","## Representation Error of Numeric Types

### Floating-Point Numbers and IEEE 754

Floating-point numbers are represented according to the IEEE 754 standard.

**Structure:**
- Sign: 1 bit
- Exponent: 8 bits
- Fraction (Mantissa/Significand): Remaining bits

IEEE 754 uses 32 or 64 bits for floating-point representation.

### Representation Error

Due to the limited number of bits available, only a finite number of values can be represented without error.

### Examples of Representation Error

**Integer Example:**
- Set of integers (ℤ) is infinite, but computer representations are finite.
- Thus, infinitely many integers cannot be represented.

**Floating-Point Example:**
- Set of real numbers (ℝ) is infinite, but computer representations are finite.
- Thus, infinitely many real numbers cannot be represented.
- For example, 1/3 in decimal cannot be represented exactly as a finite string of digits.

### Base System and Representation

- A number's representation error depends on the base system used.
- In base 3, 1/3 decimal can be represented accurately as 0.1.
- In base 2 (binary), some numbers can be represented accurately, while others can only be approximated.

### Example in Python

```python
1.0000000000000002  # Representation error in Python due to binary base
```"
"page_content='40 Types and literals
>>> 0.1
0.1
>>> 0.2
0.2
>>> 0.1 + 0.2
0.30000000000000004
Wait! What? Yup. Something strange is going on. Python rounds values
when displaying in the shell. Here’s proof:
>>> print(f'{0.1:.56f}')
0.10000000000000000555111512312578270211815834045410156250
>>> print(f'{0.2:.56f}')
0.20000000000000001110223024625156540423631668090820312500
>>> print(f'{0.1 + 0.2:.56f}')
0.30000000000000004440892098500626161694526672363281250000
The last, 0.1 + 0.2 , is an example of representation error that accu-
mulates to the point that it is no longer hidden by Python’s automatic
rounding, hence
>>> 0.1 + 0.2
0.30000000000000004
Remember we only work with powers of two. So there’s no way to
accurately represent these numbers in binary with a fixed number of
decimal places.
What’s the point?
1. The subset of real numbers that can be accurately represented
within a given positional system depends on the base chosen (1/3
cannot be represented without error in the decimal system, but it
can be in base 3).
2. It’s important that we understand thatno finite machine can rep-
resent al l real numbers without error.
3. Most numbers that we provide to the computer and which the
computer provides to us in the form of answers areonly approxi-
mations.
4. Perhaps most important from a practical standpoint,representa-
tion error can accumulate with repeated calculations .
5. Understanding representation error can prevent you from chasing
bugs when none exist.
For more, see:
• Floating Point Arithmetic: Issues and Limitations : https://docs.p
ython.org/3.10/tutorial/floatingpoint.html.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 54}","**Metadata:**
- Page Number: 54
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

## Types and Literals

### Representation Error

Python rounds values when displaying in the shell. This can lead to the accumulation of representation error, which can be significant when performing repeated calculations.

**Example:**

```
>>> 0.1
0.1
>>> 0.2
0.2
>>> 0.1 + 0.2
0.30000000000000004
```

In this example, the result of the addition operation (0.3) is displayed with rounding, hiding the representation error. However, this error can accumulate over time, leading to incorrect results.

### Consequences of Representation Error

Representation error can have several consequences:

- **Inaccurate representation of real numbers:** Only a subset of real numbers can be accurately represented in any given positional system.
- **Limitation of finite machines:** No finite machine can represent all real numbers without error.
- **Approximation in calculations:** Most numbers used in computer calculations are only approximations.
- **Accumulation of error:** Representation error can accumulate with repeated calculations.

### Practical Implications

Understanding representation error is crucial for:

- Avoiding unnecessary bug chasing
- Ensuring accuracy in calculations that require precise results"
"page_content='Exercises 41
3.6 Exercises
Exercise 01
Give the type of each of the following literals:
a. 42
b. True
c. ""Burlington""
d. -17.45
e. ""100""
f. ""3.141592""
g. ""False""
You may check your work in the Python shell, using the built-in function
type(). For example,
>>> type(777)
<class 'int'>
This tells us that the type of777 is int.
Exercise 02
What happens when you enter the following in the Python shell?
a. 123.456.789
b. 123_456_789
c. hello
d. ""hello'
e. ""Hello"" ""World!"" (this one may surprise you!)
f. 1,000 (this one, too, may surprise you!)
g. 1,000.234
h. 1,000,000,000
i. '1,000,000,000'
Exercise 03
The following all result inSyntaxError. Fix them!
a. 'Still the question sings like Saturn's rings'
b. ""When I asked him what he was doing, he said ""That isn't any
business of yours.""""
c. 'I can't hide from you like I hide from myself.'
d. What's up, doc?
Exercise 04 (challenge!)
We’ve seen that representation error occurs for most floating-point deci-
mal values. Can you find values in the interval[0.0, 1.0) that donot have
representation error? Give three or four examples. What do all these
examples have in common?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 55}","**Exercises**

**3.6 Exercises**

**Exercise 01**

**Type of Literals:**

| Literal | Type |
|---|---|
| 42 | int |
| True | bool |
| ""Burlington"" | str |
| -17.45 | float |
| ""100"" | str |
| ""3.141592"" | str |
| ""False"" | str |

**Exercise 02**

**Python Shell Input and Output:**

| Input | Output |
|---|---|
| 123.456.789 | SyntaxError: invalid syntax |
| 123_456_789 | 123456789 |
| hello | NameError: name hello is not defined |
| ""hello' | SyntaxError: invalid syntax |
| ""Hello"" ""World!"" | HelloWorld! |
| 1,000 | 1000 |
| 1,000.234 | SyntaxError: invalid syntax |
| 1,000,000,000 | 1000000000 |
| '1,000,000,000' | string with a comma |

**Exercise 03**

**Fix Syntax Errors:**

| Input | Fixed Input |
|---|---|
| 'Still the question sings like Saturn's rings' | ""Still the question sings like Saturn's rings"" |
| ""When I asked him what he was doing, he said ""That isn't any\nbusiness of yours."""" | ""When I asked him what he was doing, he said \""That isn't any business of yours.\"""" |
| 'I can't hide from you like I hide from myself.' | ""I can't hide from you like I hide from myself."" |
| What's up, doc? | ""What's up, doc?"" |

**Exercise 04 (Challenge!)**

**Floating-Point Values without Representation Error:**

* 0.0
* 0.1
* 0.2
* 0.3

**Common Feature:** All these values have a finite number of digits in their decimal representation."
"page_content='Chapter 4
V ariables, statements, and
expressions
This chapter will expand our understanding of programming by introduc-
ing types and literals. We’ll also learn about two additional arithmetic
operators: floor division using the// operator (also called Euclidean di-
vision or integer division), and the modulo operator% (also called the
remainder operator). Please note that the modulo operator has noth-
ing to do with calculating percentages—this is a common confusion for
beginners.
Learning objectives
• You will learn how to use the assignment operator and how to
create and name variables.
• You will learn how to use the addition, subtraction, multiplication,
division, and exponentiation operators.
• You will learn the difference between and use cases of division and
Euclidian division (integer division).
• You will learn how to use the remainder or “modulo” operator.
• You will learn operator precedence in Python.
T erms introduced
• absolute value
• assignment
• congruence
• dividend
• divisor
• Euclidean division
• evaluation
• exception
• expression
• floor function
• modulus
• names
• operator
43' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 57}","**Chapter 4: Variables, Statements, and Expressions**

**Metadata:**
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 57

**Sections:**

**1. Types and Literals**

* Not provided in the given content.

**2. Arithmetic Operators**

* **Floor Division (Integer Division):**
  * Operator: //
  * Calculates the integer quotient of two numbers, discarding the remainder.

* **Modulo Operator (Remainder Operator):**
  * Operator: %
  * Calculates the remainder after dividing one number by another.

**Learning Objectives**

**Variables**
* Understand the concept of variables.
* Create and name variables using the assignment operator.

**Arithmetic Operators**
* Use the addition, subtraction, multiplication, division, and exponentiation operators.

**Division vs. Floor Division**
* Understand the difference between division and floor division.
* Use cases for each type of division.

**Modulo Operator**
* Understand the concept of the modulo operator.
* Use cases for the modulo operator.

**Operator Precedence**
* Learn the order of precedence for operators in Python.

**Terms Introduced**

* **Absolute Value:** The distance from a number to zero on the number line.
* **Assignment:** Creating a variable and assigning a value to it.
* **Congruence:** Two numbers have the same remainder when divided by a third number.
* **Dividend:** The number being divided.
* **Divisor:** The number by which the dividend is being divided.
* **Euclidean Division:** Division that discards the remainder.
* **Evaluation:** The process of determining the value of an expression.
* **Exception:** An error that occurs during the execution of a program.
* **Expression:** A combination of variables, operators, and literals that evaluates to a single value.
* **Floor Function:** The function that returns the largest integer less than or equal to a given number.
* **Modulus:** The remainder after dividing one number by another.
* **Names:** Identifiers used to refer to variables.
* **Operator:** A symbol that represents an operation to be performed on one or more operands."
"page_content='44 V ariables, statements, and expressions
• quotient
• remainder
• variable
4.1 V ariables and assignment
You have already written a “Hello, World!” program. As you can see,
this isn’t very flexible—you provided the exact text you wanted to print.
However, more often than not, we don’t know the values we want to
use in our programs when we write them. Values may depend on user
input, database records, results of calculations, and other sources that
we cannot know in advance when we write our programs.
Imagine writing a program to calculate the sum of two numbers and
print the result. We could write,
print(1 + 1)
print(2 + 2)
...
but that’s really awkward. For every sum we want to calculate, we’d have
to write another statement.
So when we write computer programs we usevariables. In Python, a
variable is the combination of aname and an associatedvalue which
has a specifictype.
1
It’s important to note that variables in a computer program arenot
likevariablesyou’velearnedaboutinmathematics.Forexample,inmath-
ematics wemightwrite𝑎+𝑏 = 5 and, of course, there’s an infinite number
of possible pairs of values which sum to five.
When writing computer programs, variables are rather different.
While the same name can refer to different values at different times,
a name can refer to onlyone value at a time.
Assignment statements
In Python, we use the= to assign a value to a variable, and we call= the
assignment operator. The variable name is on the left-hand side of the
assignment operator, and the expression (which yields a value) is on the
right-hand side of the assignment operator.
a = 3 # the variable named `a` has the value 3
print(a) # prints 3 to the console
a = 17 # now the variable named `a` has the value 17
print(a) # prints 17 to the console
1 Python differs from most other programming languages in this regard. In many
other programming languages, variables refer to memory locations which hold values.
(Y es, deep down, this is what goes on “under the hood” but the paradigm from the
perspective of those writing programs in Python is that variables are names attached
to values.) F eel free to check the entry in the glossary for more.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 58}","## Variables, Statements, and Expressions

### Variables and Assignment

Variables allow for flexibility in programs as values can be modified based on user input or calculations, rather than being hardcoded.

**Variables in Computer Programs vs. Mathematics**

* In computer programs, variables refer to a specific value at any given time.
* In contrast, mathematical variables can represent an infinite number of possible values that satisfy an equation (e.g., `a + b = 5` can have numerous solutions).

**Assignment Statements**

Assignment statements (`=`) assign values to variables, with the variable name on the left-hand side and the expression (yielding a value) on the right-hand side.

**Examples:**

```python
a = 3  # Variable `a` assigned value 3
print(a)  # Prints 3 to console

a = 17  # Value of `a` changed to 17
print(a)  # Prints 17 to console
```"
"page_content='V ariables and assignment 45
Assignment is a kind ofstatement in Python. Assignment statements
associate a name with a value (or, in certain cases, can modify a value).
Beginners often get confused about the assignment operator. You may
find it helpful to think of it as a left-pointing arrow.2 When reading your
code, for example
a = 42
it may help to say, “Let a equal 42”, or “agets 42”, rather than “a equals
42” (which sounds more like a claim or assertion about the value ofa).
This can reinforce the concept of assignment.3
Dynamic typing
In Python, all values have atype, and Python knows the type of each
value at every instant. However, Python is adynamical ly typedlanguage.
This means that any givenname can refer to values of different types at
different points in a program. So this is valid Python:
a = 42 # now `a` is of type int
print(a) # prints 42 to the console
a = 'abc' # now `a` is of type str
print(a) # prints 'abc' to the console
Evaluation and assignment
Sometimes we can use a variable in some calculation and reassign the
result. For example:
x = 0
print(x) # prints 0 to the console
x = x + 1
print(x) # prints 1 to the console
x = x + 1
print(x) # prints 2 to the console
What’s going on here? Remember,= is the assignment operator. So in
the code snippet above, we’re not making assertions about equivalence;
instead, we’re assigning values tox. With:
x = 0
2 In fact, the left-facing arrow is commonly used to indicate assignment in pseu-
docode—descriptions of algorithms outside the context of any particular program-
ming language.
3 Later on, we’ll see the comparison operator ==. This is used to compare two
values to see if they are identical. F or example, a == b would be true if the values of
a and b were the same. So it’s important to keep the assignment ( =) and comparison
(==) operators straight in your mind.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 59}","## Variables and Assignment

### Assignment

- Assignment is a type of statement in Python.
- Assignment statements associate a name with a value.
- The assignment operator is often represented as a left-pointing arrow (←).

### Dynamic Typing

- In Python, all values have a type, which is known at every instant.
- Python is a dynamically typed language, meaning a variable can refer to values of different types at different points in a program.
- Example:

```python
a = 42  # a is now of type int
print(a)  # prints 42
a = 'abc'  # a is now of type str
print(a)  # prints 'abc'
```

### Evaluation and Assignment

- Variables can be used in calculations and reassigned with the result.
- Example:

```python
x = 0
print(x)  # prints 0
x = x + 1
print(x)  # prints 1
x = x + 1
print(x)  # prints 2
```"
"page_content='46 V ariables, statements, and expressions
we’re assigning the literal value 0 tox. At this point we can say the value
of x is 0.
Consider what happens here:
x = x + 1
So first, Python will evaluate the expression on the right, and then it
will assign the result tox. At the start, the value ofx is still zero, so we
can think of Python substituting the value ofx for the objectx on the
right hand side.
x = 0 + 1
and then evaluating the right-hand side:
x = 1
and assigning the result tox. Now the value ofx is 1. If we do it again,
x = x + 1
now thex on the right has the value 1, and 1 + 1 is 2, so the variablex
has the value 2.
V ariables are names associated with values
What are variables in Python? Variables work differently in Python than
they do in many other languages. Again, in Python, a variable is a name
associated with a value.
Consider this code:
>>> x = 1001
>>> y = x
What we’ve done here is give two different names to the same value. This
is A-OK in Python. What doesx refer to? The value 1001. What does
y refer to?The exact same 1001. 4 It isnot the case that there are two
different locations in memory both holding the value 1001 (as might be
the case in a different programming language).
Now what happens if we assign a new value tox? Does y “change”?
What do you think?
>>> x = 2001
>>> x
2001
>>> y
1001
4 W e can verify this by inspecting the identity number of the object(s) in question
using Python’s built-in id() function.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 60}","## Metadata

| Attribute | Value |
|---|---|
| Page Number | 60 |
| Source | C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf |

## Content

### Variables

Variables in Python are names associated with values. They work differently than in other programming languages.

### Assigning Values to Variables

Consider the following code:

```
x = 1001
```

This code assigns the literal value `0` to the variable `x`. At this point, the value of `x` is `0`.

### Reassigning Values to Variables

Consider the following code:

```
x = x + 1
```

Python will evaluate the expression on the right-hand side and assign the result to `x`. At the start, the value of `x` is still `0`, so Python will substitute the value of `x` for the object `x` on the right-hand side:

```
x = 0 + 1
```

Python will then evaluate the right-hand side:

```
x = 1
```

and assign the result to `x`. Now the value of `x` is `1`.

If we do it again:

```
x = x + 1
```

The `x` on the right-hand side now has the value `1`, and `1 + 1` is `2`, so the variable `x` will have the value `2`.

### Difference Between Variables and Values in Python

In Python, there is a difference between variables and values. Variables are names associated with values, while values are the actual data that is stored in memory.

For example, in the following code:

```
x = 1001
```

The variable `x` is associated with the value `1001`. The value `1001` is stored in memory at a specific location.

If we assign a new value to `x`:

```
x = 2001
```

The variable `x` will still be associated with the same location in memory, but the value stored at that location will be changed to `2001`.

### Variable References

In the following code:

```
>>> x = 1001
>>> y = x
```

We have given two different names, `x` and `y`, to the same value, `1001`. This means that both `x` and `y` reference the same value in memory.

If we change the value of `x`:

```
>>> x = 2001
```

The value of `y` will not change, because `y` still references the same value in memory.

We can verify this by inspecting the identity number of the objects in question using Python's `id()` function:

```
>>> id(x)
123456
>>> id(y)
123456
```

The `id()` function returns the memory address of an object. In this case, both `x` and `y` return the same memory address, which confirms that they reference the same value in memory."
"page_content='V ariables and assignment 47
No. Even thoughx now has the new value of 2001,y is unchanged and
still has the value of 1001.
When we assign a value to a variable,
>>> x = 1001
what’s really going on is that we’re associating aname with a value. In
the above example, 1001 is the value, andx is a name we’ve given to it.
Values can have more than one name associated with them. In fact,
we can give any number of names to the same value.
>>> x = 1001
>>> y = x
>>> z = y
Now what happens if we assign a new value tox?
>>> x = 500
>>> x
500
>>> y
1001
>>> z
1001
y and z are still names for 1001, but now the namex is associated with
a new value, 500.
While it’s true that values can have more than one name associated
with them, it’s important to understand that each name can only refer
to a single value (or object).x can’t have two different values at the same
time.
>>> x = 3
>>> x
3
>>> x = 42 # What happened to 3? Gone forever.
>>> x
42' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 61}","## Variables and Assignment

**Metadata**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 61
* Line Numbers: 47-61

**Content**

### Value Assignment

When a value is assigned to a variable, a name is associated with the value. The variable can then be used as a reference to the value.

### Multiple Names for Values

Values can have multiple names associated with them.

```python
>>> x = 1001
>>> y = x
>>> z = y
```

### Changing Values

Assigning a new value to a variable changes the value associated with the variable name. However, other names associated with the previous value remain unchanged.

```python
>>> x = 500
>>> x
500
>>> y
1001
>>> z
1001
```

### One Value per Name

Each variable name can only refer to a single value at a time.

```python
>>> x = 3
>>> x
3
>>> x = 42 # What happened to 3? Gone forever.
>>> x
42
```"
"page_content='48 V ariables, statements, and expressions
Comprehension check
Given the following snippets of Python code, determine the resulting
value x:
1.
x = 1
2.
x = 1
x = x + 1
3.
y = 200
x = y
4.
x = 0
x = x * 200
5.
x = 1
x = 'hello'
6.
x = 5
y = 3
x = x + 2 * y - 1
Constants
A lot of the time in programming, we want to use a specific value or
calculation multiple times. Instead of repeating that same value or cal-
culation over and over again, we can just assign the value to a variable
and reuse it throughout a program. We call thisconstant. Aconstant
is a variable that has a value that will be left unchanged throughout a
program. Using constants improves the readability of programs because
they provide meaningful and recognizable names for fixed values. Let’s
look at an example:
HOURS_IN_A_DAY = 24' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 62}","# Formatting Instructions:

## Content Structuring

### Variables, Statements, and Expressions

#### Comprehension Check

- Given the following snippets of Python code, determine the resulting value x:
  - 1. x = 1
  - 2. x = 1
  x = x + 1
  - 3. y = 200
  x = y
  - 4. x = 0
  x = x * 200
  - 5. x = 1
  x = 'hello'
  - 6. x = 5
  y = 3
  x = x + 2 * y - 1

#### Constants

- A constant is a variable that has a value that will be left unchanged throughout a program.
- Constants improve the readability of programs because they provide meaningful and recognizable names for fixed values.

## Metadata
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 62"
"page_content='Expressions 49
Here we have assigned the variableHOURS_IN_A_DAY to 24. This variable
is a constant because the number of hours in a day will always be24 (at
least for the foreseeable future). Now if we need to do some calculation
using the number of hours in a day, we can just use this variable. Note
that constants are uppercase. This isn’t enforced by Python, but it’s
good common practice.
4.2 Expressions
In programming—and computer science in general—anexpression is
something which can beevaluated—that is, a syntactically valid combi-
nation of constants, variables, functions, and operators which yields a
value.
Let’s try out a few expressions with the Python shell.
Literals and types revisited
The simplest possible expression is a singleliteral.
>>> 1
1
What just happened? We typed a simple expression—a single literal—
and Python replied with its value. Literals are special in that they eval-
uate to themselves!
Here’s another:
>>> 'Hello, Python!'
'Hello, Python!'
Once again, we’ve provided a single literal, and again, Python has replied
with its value.
You may notice that'Hello, Python!' is rather different from1. You
might say these are literals of differenttypes—and you’d be correct! Liter-
als come in different types. Here are four different literals of four different
types.
'Hello, Python' string (str)
1 integer (int)
3.141592 floating-point (float)
True Boolean (bool)
'Hello, Python!' is astring literal. The quotation marksdelimit the
string. They let Python know that what’s between them is to be inter-
preted as a string, butthey are not part of the string itself. Python allows
single-quoted or double-quoted strings, so""Hello, Python!"" and 'Hello,
Python!' are both syntactically correct. Note that if you start with a
single quote (’), you must end with a single quote. Likewise, if you start
with a double quote (“), you must end with a double quote.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 63}","## Content Formatting

**Metadata**

* Page Number: 63
* Line Numbers: 49-63
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Content**

**4.2 Expressions**

In programming and computer science, an expression is something that can be evaluated. This refers to a syntactically valid combination of constants, variables, functions, and operators that yields a value.

**Literals and Types Revisited**

The simplest possible expression is a single literal. A literal is a value that cannot be broken down into smaller parts.

**Examples of Literals and Types**

| Literal Type | Literal |
|---|---|
| String (str) | 'Hello, Python' |
| Integer (int) | 1 |
| Floating-point (float) | 3.141592 |
| Boolean (bool) | True |

**String Literals**

String literals are enclosed in quotation marks. They represent a sequence of characters. Python allows both single and double quotes.

**Note:**

* Single-quoted strings must be closed with a single quote.
* Double-quoted strings must be closed with a double quote.
* Quotation marks are not considered part of the string."
"page_content='50 V ariables, statements, and expressions
1 is different. It is aninteger literal. Notice that there are no quotation
marks around it.
Given all this, the latter two examples work as you’d expect.
>>> 3.141592
3.141592
>>> True
True
What types are these?3.141592 is afloating point literal (that’s a number
thathassomethingtotherightofthedecimalpoint). True iswhat’scalled
a Boolean literal. Notice there are no quotation marks around it and the
first letter is capitalized.True and False are the only two Boolean literals.
Expressions with arithmetic operators
Let’s try some more complex expressions. In order to construct more
complex expressions we’ll use some simple arithmetic operators, specifi-
cally somebinary infix operators. These should be very familiar. Abinary
operator is one which operates on twooperands. The terminfix means
that we put the operatorbetween the operands.
>>> 1 + 2
3
Surprised? Probably not. But let’s consider what just happened any-
way.
At the prompt, we typed1 + 2 and Python responded with3. 1 and
2 are integer literals, and+ is the operator for addition.1 and 2 are the
operands, and+ is the operator. This combination1 + 2is a syntactically
valid Python expression which evaluates to… you guessed it,3.
Some infix arithmetic operators in Python are:
+ addition
- subtraction
* multiplication (notice we use* and notx)
/ division
// integer or “floor” division
% remainder or “modulo”
** exponentiation
There are other operators, but these will suﬀice for now. Here we’ll
present examples of the first four, and we’ll present the others later—
floor division, modulo, and exponentiation. Let’s try a few (I encourage
you follow along and try these out in the Python shell as we go).
>>> 40 + 2
42
>>> 3 * 5
15' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 64}","### Formatting Instructions:

**Content Structuring:**

- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

**Metadata Inclusion:**

- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

**Code Formatting:**

- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

Example:
```python
# Python code example
print(""Hello, World!"")
```

**Tabular Format:**

- Include examples clearly if provided
- Give difference in tabular format if possible

**Content:**

### Variables, Statements, and Expressions

#### Types of Literals

Literals are the most basic building blocks of Python expressions. They represent fixed values that do not change. There are several types of literals:

| Type | Example |
|---|---|
| Integer literal | 1 |
| Floating point literal | 3.141592 |
| Boolean literal | True, False |

#### Expressions with Arithmetic Operators

Arithmetic operators are used to perform mathematical operations on operands. Here are some examples of binary infix arithmetic operators:

| Operator | Description |
|---|---|
| + | Addition |
| - | Subtraction |
| * | Multiplication |
| / | Division |

#### Examples of Arithmetic Operators

```python
>>> 1 + 2
3

>>> 40 + 2
42

>>> 3 * 5
15
```

### Metadata

**Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
**Page:** 64"
"page_content='Expressions 51
>>> 5 - 1
4
>>> 30 / 3
10.0
Notice that in the last case, when performing division, Python returns
a floating-point number and not an integer (Python does support what’s
called integer division or floor division , but we’ll get to that later). So
even if we have two integer operands, division yields a floating-point
number.
What do you think would be the result if we were to add the following?
>>> 1 + 1.0
In a case like this, Python performsimplicit type conversion, essentially
promoting 1 to 1.0 so it can add like types. Accordingly, the result is:
>>> 1 + 1.0
2.0
Python will perform similar type conversions in similar contexts:
>>> 2 - 1.0
1.0
>>> 3 * 5.0
15.0
Precedence of operators
No doubt you’ve learned about precedence of operations , and Python
respects these rules.
>>> 40 + 2 * 3
46
>>> 3 * 5 - 1
14
>>> 30 - 18 / 3
24.0
Multiplication and division have higher precedence than addition and
subtraction. We also say multiplication and divisionbind more strongly
than addition and subtraction—this is just a different way of saying the
same thing.
As you might expect, we can use parentheses to group expressions.
We do this to group operations of lower precedence—either in order to
perform the desired calculation, or to disambiguate or make our code
easier to read, or both.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 65}","**Expressions**

**Metadata**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 65

**Content**

**Arithmetic Operations**

* **Addition (+):** Adds two numbers.
* **Subtraction (-):** Subtracts one number from another.
* **Multiplication (*):** Multiplies two numbers.
* **Division (/):** Divides one number by another.
* **Integer Division (//):** Divides one number by another and rounds the result down to the nearest whole number.
* **Modulus (%):** Returns the remainder of dividing one number by another.

**Precedence of Operators**

The order of operations in Python is:

1. Parentheses
2. Exponentiation
3. Multiplication and Division (left to right)
4. Addition and Subtraction (left to right)

**Implicit Type Conversion**

When performing operations between different types of numbers, Python will automatically convert them to the same type:

```
>>> 1 + 1.0
2.0
```

**Examples**

* `5 - 1` results in 4.
* `30 / 3` results in 10.0 (floating-point number).
* `40 + 2 * 3` results in 46 (multiplication has higher precedence).
* `3 * 5 - 1` results in 14 (multiplication has higher precedence).
* `30 - 18 / 3` results in 24.0 (division has higher precedence)."
"page_content='52 V ariables, statements, and expressions
>>> 40 + (2 * 3)
46
>>> 3 * (5 - 1)
12
>>> (30 - 18) / 3
4.0
So what happens here? The portions within the parentheses are eval-
uated first, and then Python performs the remaining operation.
We can construct expressions of arbitrary complexity using these
arithmetic operators and parentheses.
>>> (1 + 1) * (1 + 1 + 1) - 1
5
Python also hasunary operators. These are operators with a single
operand. For example, we negate a number by prefixing-.
>>> -1
-1
>>> -1 + 3
2
>>> 1 + -3
-2
We can also negate expressions within parentheses.
>>> -(3 * 5)
-15
Summary of operator precedence
** exponentiation
+, - unary positive or negative (+x, -x)
*, /, //, % multiplication, and various forms of division
+, - addition and subtraction (x - y, x + y)
Expressions grouped within parentheses are evaluated first, so the rule
you might have learned in high school and its associated mnemonic—
PEMDAS (parentheses, exponentiation, multiplication and division, ad-
dition and subtraction)—apply.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 66}","## Variables, Statements, and Expressions

### Evaluation of Expressions within Parentheses
```
>>> 40 + (2 * 3)
46
>>> 3 * (5 - 1)
12
>>> (30 - 18) / 3
4.0
```

### Constructing Complex Expressions
Expressions can be composed of arithmetic operators and parentheses:
```
>>> (1 + 1) * (1 + 1 + 1) - 1
5
```

### Unary Operators
Unary operators have a single operand:
```
>>> -1
-1
>>> -1 + 3
2
>>> 1 + -3
-2
```

### Negation of Expressions
Expressions within parentheses can be negated:
```
>>> -(3 * 5)
-15
```

### Operator Precedence
Operator precedence determines the order of evaluation:
```
* exponentiation
* +, - unary positive or negative (+x, -x)
* *, /, //, % multiplication, and various forms of division
* +, - addition and subtraction (x - y, x + y)
```

### Grouping with Parentheses
Expressions grouped within parentheses are evaluated first.
```
** PEMDAS (parentheses, exponentiation, multiplication and division, addition and subtraction)
```"
"page_content='Expressions 53
Comprehension check
1. When evaluating expressions, do you think Python proceeds left-to-
right or right-to-left? Can you think of an experiment you might
perform to test your hypothesis? Write down an expression that
might provide some evidence.
2. Why do you think1 / 1 evaluates to1.0 (a float) and not just1
(an integer)?
More on operations
So far, we’ve seen some simple expressions involving literals, operators,
and parentheses. We’ve also seen examples of a few types: integers,
floating-point numbers (“floats” for short), strings, and Booleans.
We’ve seen that we can perform arithmetic operations on numeric
types (integers and floats).
The operators + and * applied to strings
Certain arithmetic operators behave differently when their operands are
strings. For example,
>>> 'Hello' + ', ' + 'World!'
'Hello, World!'
This is an example ofoperator overloading, which is just a fancy way
of saying that an operator behaves differently in different contexts. In
this context, with strings as operands,+ doesn’t perform addition, but
instead performsconcatenation. Concatenation is the joining of two or
more strings, like the coupling of railroad cars.
We can also use the multiplication operator* with strings. In the
context of strings, this operator concatenates multiple copies of a string
together.
>>> 'Foo' * 1
'Foo'
>>> 'Foo' * 2
'FooFoo'
>>> 'Foo' * 3
'FooFooFoo'
What do you think would be the result of the following?
>>> 'Foo' * 0
This gives us '' which is called the empty string and is the result of
concatenating zero copies of 'Foo' together. Notice that the result is
still a string, albeit an empty one.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 67}","## Expressions

### Comprehension Check

1. **When evaluating expressions, do you think Python proceeds left-to-right or right-to-left?**

Python evaluates expressions from left to right.

**Experiment to test hypothesis:**

```python
x = 1
y = x + 2 / 3

# If Python evaluated right-to-left, x would first be set to 3 and then divided by 3,
# which would result in y being 2.0. Since y is 1.3333333333333333, we can conclude that
# Python evaluates expressions from left to right.
```

2. **Why do you think1 / 1 evaluates to1.0 (a float) and not just1 (an integer)?**

When dividing two integers, Python automatically promotes the result to a float. This is because the result of dividing two integers can be a fraction, which cannot be represented as an integer.

### More on Operations

**Arithmetic Operators and Strings**

The + and * operators can also be used to perform operations on strings.

+ **Concatenation**: The + operator concatenates two strings, joining them together.

```python
>>> 'Hello' + ', ' + 'World!'
'Hello, World!'
```

* **Repetition**: The * operator repeats a string multiple times.

```python
>>> 'Foo' * 1
'Foo'
>>> 'Foo' * 2
'FooFoo'
>>> 'Foo' * 3
'FooFooFoo'
```

**Empty String**

The result of concatenating zero copies of a string is the empty string.

```python
>>> 'Foo' * 0
''
```"
"page_content='54 V ariables, statements, and expressions
4.3 Augmented assignment operators
As a shorthand, Python provides what are calledaugmented assignment
operators. Here are some (but not all):
augmented assignment similar to
a += b a = a + b
a -= b a = a - b
a *= b a = a * b
A common example is incrementing or decrementing by one.
>>> a = 0
>>> a += 1
>>> a
1
>>> a += 1
>>> a
2
>>> a -= 1
>>> a
1
>>> a -= 1
>>> a
0
You can use these or not, depending on your own preference.5
4.4 Euclidean or “floor” division
When presenting expressions, we saw examples of common arithmetic op-
erations: addition, subtraction, multiplication, and division. Here we will
present two additional operations which are closely related: the modulo
or “remainder” operator, and what’s variously called “quotient”, “floor
division”, “integer division” or “Euclidean division.”
6
Chances are, when you first learned division in primary school, you
learned about Euclidean (floor) division. For example,17 ÷ 5 = 3 r 2, or
21 ÷ 4 = 5 r 1. In the latter example, we’d call 21 the dividend, 4 the
divisor, 5 the quotient, and 1 the remainder.
5 The table above says “similar to” because, for example, a += b isn’t exactly the
same as a = a + b. In augmented assignment, the left-hand side is evaluated before
the right-hand side, then the right-hand side is evaluated and the result is assigned
to the variable on the left-hand side. There are some other minor differences.
6 Euclid had many things named after him, even if he wasn’t the originator
(I guess fame begets fame). Anyhow, Euclid was unaware of the division algorithm
you’re taught in primary school. Similar division algorithms depend on the positional
system of Hindu-Arabic numerals, and these date from around the 12th Century CE.
The algorithm you most likely learned, called “long division”, dates from around
1600 CE.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 68}","## Variables, Statements, and Expressions

### 4.3 Augmented Assignment Operators

Python offers augmented assignment operators as a shortcut. Here are a few examples:

| Augmented Assignment | Equivalent Assignment |
|---|---|
| `a += b` | `a = a + b` |
| `a -= b` | `a = a - b` |
| `a *= b` | `a = a * b` |

**Example:**

```python
>>> a = 0
>>> a += 1
>>> a
1
>>> a += 1
>>> a
2
>>> a -= 1
>>> a
1
>>> a -= 1
>>> a
0
```

### 4.4 Euclidean or “Floor” Division

In addition to common arithmetic operations, Python offers the modulo (""remainder"") and Euclidean (""floor"") division operators.

Euclidean division, also known as ""quotient"", ""floor division"", ""integer division"", or ""Euclidean division"", returns the integer quotient of two numbers.

**Example:**

17 ÷ 5 = 3 r 2, or 21 ÷ 4 = 5 r 1.

In the example above, 21 is the dividend, 4 is the divisor, 5 is the quotient, and 1 is the remainder."
"page_content='Euclidean or “floor” division 55
Obviously the operations of finding the quotient and the remainder
are closely related. For any two integers𝑎, 𝑏, with 𝑏 ≠ 0 there exist
unique integers𝑞 and 𝑟 such that
𝑎 = 𝑏𝑞 + 𝑟
where 𝑞 is the Euclidean quotient and𝑟 is the remainder.
Furthermore,0 ≤ 𝑟 < |𝑏|, where|𝑏| is the absolute value of𝑏. This should
be familiar.
Just in case you need a refresher:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 69}","**Euclidean Division**

**Metadata:**
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 69

**Euclidean Division**

In mathematics, Euclidean division, also known as ""floor"" division, is a way to divide two integers and obtain two results: the quotient and the remainder. For any two integers a and b, where b is not equal to 0, there exist unique integers q and r such that:

```
a = bq + r
```

where q is the Euclidean quotient and r is the remainder.

**Properties of Euclidean Division**

Additionally, the following properties hold true:

* 0 ≤ r < |b|, where |b| is the absolute value of b.
* The Euclidean quotient q is uniquely determined by a and b.
* The Euclidean remainder r is also uniquely determined by a and b.

**Examples**

* **Example 1:** Finding the Euclidean quotient and remainder for a = 17 and b = 4 results in q = 4 and r = 1, since 17 = 4 * 4 + 1.
* **Example 2:** For a = 23 and b = 5, the Euclidean quotient is q = 4 and the remainder is r = 3, because 23 = 5 * 4 + 3.
* **Example 3:** If a = -15 and b = 6, the Euclidean quotient is q = -3 and the remainder is r = 3, since -15 = 6 * (-3) + 3."
"page_content='56 V ariables, statements, and expressions
Python’s // and % operators
Python provides us with operators for calculating quotient and remain-
der. These are// and %, respectively. Here are some examples:
>>> 17 // 5 # calculate the quotient
3
>>> 17 % 5 # calculate the remainder
2
>>> 21 // 4 # calculate the quotient
5
>>> 21 % 4 # calculate the remainder
1
You may ask: What’s the difference between the division we saw ear-
lier, /, and floor division with//? The difference is that/ calculates the
quotient as a decimal expansion. Here’s a simple comparison:
>>> 4 / 3
1.3333333333333333 # three goes into four 1 and 1/3 times
>>> 4 // 3 # calculates Euclidean quotient
1
>>> 4 % 3 # calculates remainder
1
Common questions
What happens when the divisor is zero?
Just as in mathematics, we cannot divide by zero in Python either. So
all of these operations will fail if the right operand is zero, and Python
will complain:ZeroDivisionError.
What happens if we supply floating-point operands to // or %?
In both cases, operands are first converted to a common type. So if one
operand is afloat and the other anint, theint will be converted to a
float. Then the calculations behave as you’d expect.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 70}","## Python's // and % Operators

Python offers operators, // and %, to compute the quotient and remainder, respectively.

### Examples
```
>>> 17 // 5 # calculate the quotient
3
>>> 17 % 5 # calculate the remainder
2
>>> 21 // 4 # calculate the quotient
5
>>> 21 % 4 # calculate the remainder
1
```

### Difference between / and //
The division operator (/) yields a decimal expansion, while floor division (//) calculates the integer quotient.

```
>>> 4 / 3
1.3333333333333333 # three goes into four 1 and 1/3 times
>>> 4 // 3 # calculates Euclidean quotient
1
>>> 4 % 3 # calculates remainder
1
```

### Common Questions

**What happens when the divisor is zero?**
Attempting division by zero in Python will result in a ZeroDivisionError.

**What happens when floating-point operands are used with // or %?**
Operands are converted to a common type. If one operand is a float, the integer operand is converted to a float. The calculations proceed as expected."
"page_content='Euclidean or “floor” division 57
>>> 7 // 2 # if both operands are ints, we get an int
3
>>> 7.0 // 2 # otherwise, we get a float...
3.0
>>> 7 // 2.0
3.0
>>> 7.0 // 2.0
3.0
>>> 7 % 2 # if both operands are ints, we get an int
1
>>> 7.0 % 2 # otherwise, we get a float...
1.0
>>> 7 % 2.0
1.0
>>> 7.0 % 2.0
1.0
What if the dividend is zero?
What are0 // n and 0 % n?
>>> 0 // 5 # five goes into zero zero times
0
>>> 0 % 5 # the remainder is also zero
0
What if the dividend is less than the divisor?
What arem // n and m % n, when𝑚 < 𝑛 , with𝑚 and 𝑛 both integers,
and 𝑚 ≥ 0, 𝑛 > 0?
The first one’s easy: if𝑚 < 𝑛 ?, then m // n yields zero. The other
trips some folks up at first.
>>> 5 % 7
5
That is, seven goes into five zero times and leaves a remainder of five.
So if𝑚 < 𝑛, thenm % n yields m.
What if the divisor is negative?
What ism % n, when𝑛 < 0? This might not work the way you’d expect
at first.
>>> 15 // -5
-3
>>> 15 % -5
0
So far, so good. Now consider:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 71}","**Division and Remainder**

**Euclidean or “floor” division**

```python
>>> 7 // 2 # if both operands are ints, we get an int
3
>>> 7.0 // 2 # otherwise, we get a float...
3.0
>>> 7 // 2.0
3.0
>>> 7.0 // 2.0
3.0
```

**Remainder**

```python
>>> 7 % 2 # if both operands are ints, we get an int
1
>>> 7.0 % 2 # otherwise, we get a float...
1.0
>>> 7 % 2.0
1.0
>>> 7.0 % 2.0
1.0
```

**Division and Remainder with Zero**

**Dividend is Zero**

```python
>>> 0 // 5 # five goes into zero zero times
0
>>> 0 % 5 # the remainder is also zero
0
```

**Dividend is Less than the Divisor**

```python
>>> 5 % 7
5
```

**Divisor is Negative**

```python
>>> 15 // -5
-3
>>> 15 % -5
0
```"
"page_content='58 V ariables, statements, and expressions
>>> 17 // -5
-4
>>> 17 % -5
-3
Why does 17 // -5 yield -4 and not -3? Remember that this is
what’s called “floor division.” What Python does, is that it calculates
the (floating-point) quotient and then applies thefloor function.
The floor function is a mathematical function which, given some num-
ber 𝑥, returns the largest integer less than or equal to𝑥. In mathematics
this is written as:
⌊𝑥⌋.
So in the case of 17 // -5 , Python first converts the operands to
float type, then calculates the (floating-point) quotient, which is−3.4
and then applies thefloor function, to yield−4 (since -4 is the largest
integer less than or equal to -3.4).
Thisalsomakesclearwhy 17 % -5yields-3.Thispreservestheequality
𝑎 = 𝑏𝑞 + 𝑟
17 = (−5 × −4) + (−3)
17 = 20 − 3.
What if the dividend is negative?
>>> -15 // 5
-3
>>> -15 % 5
0
So far so good. Now consider:
>>> -17 // 5
-4
>>> -17 % 5
3
Again, Python preserves the equality
𝑎 = 𝑏𝑞 + 𝑟
−17 = (5 × −4) + 3
−17 = −20 + 3.
Yeah. I know. These take a little getting used to.
What if dividend and divisor both are negative?
Let’s try it out—having seen the previous examples, this should come as
no surprise.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 72}","**Formatting Instructions:**

**1. Content Structuring:**

- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

**2. Metadata Inclusion:**

- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

**3. Code Formatting:**

- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

**Example:**

```python
# Python code example
print(""Hello, World!"")
```

**4. Table Formatting:**

- If possible, present data in tabular format to enhance clarity.

**5. Example Inclusion:**

- Clearly include examples, as provided in the original content.

**6. Content Preservation:**

- Do not modify or cut short the provided content. Maintain the original length and accuracy.

**Formatted Document:**

**Title:** Variables, Statements, and Expressions

**Section 1: Floor Division**

**Metadata:**

- Page: 72
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Content:**

Python's floor division operator, represented by ""//"", calculates the quotient of two numbers and returns the largest integer less than or equal to the result. Mathematically, this is represented as:

⌊𝑥⌋

**Example:**

```
>>> 17 // -5
-4
```

**Section 2: Preserving Equality**

Python preserves the equality:

𝑎 = 𝑏𝑞 + 𝑟

This means that the remainder (𝑟) is calculated such that the dividend (𝑎) can be expressed as the product of the quotient (𝑏) and the divisor (𝑞) plus the remainder (𝑟).

**Examples:**

```
17 = (−5 × −4) + (−3)
−17 = (5 × −4) + 3
```

**Section 3: Negative Dividend or Divisor**

If either the dividend or divisor is negative, Python adjusts the remainder accordingly to preserve the equality.

**Examples:**

```
>>> -15 // 5
-3
>>> -15 % 5
0
>>> -17 // 5
-4
>>> -17 % 5
3
```"
"page_content='Modular arithmetic 59
>>> -43 // -3
14
>>> -43 % -3
-1
Check this result:
𝑎 = 𝑏𝑞 + 𝑟
−43 = (−3 × 14) + (−1)
−43 = −42 − 1
The % operator will always yield a result with the same sign as the
second operand (or zero).
You are encouraged to experiment with the Python shell. It is a great
tool to further your understanding.
4.5 Modular arithmetic
Now, in the Python documentation7 , you’ll see // referred to as floor
division. You’ll also see that% is referred to as themodulo operator.
It’s fine to think about% as the remainder operator (with the provisos
noted above), but what is a “modulo operator”?
Let’s start with the example of clocks.
Figure 4.1: Clock face
Perhaps you don’t realize it, but you do modular arithmetic in your
head all the time. For example, if you were asked what time is 5 hours
after 9 o’clock, you’d answer 2 o’clock. You wouldn’t say 14 o’clock.8
This is an example of modular arithmetic. In fact, modular arithmetic is
sometimes called “clock arithmetic.”
7 https://docs.python.org/3/reference/expressions.html
8 OK. Maybe in the military or in Europe you might, but you get the idea. W e
have a clock with numbers 12–11, and 12 hours brings us back to where we started
(at least as far as the clock face is concerned). Notice also that the arithmetic is the
same for an analog clock face with hands and a digital clock face. This difference
in interface doesn’t change the math at all, it’s just that visual ly things work out
nicely with the analog clock face.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 73}","## Modular Arithmetic

### Floor Division and Modulo Operator

- **Floor Division (//):** Divides the first operand by the second and returns the integer quotient rounded down to the nearest whole number.

- **Modulo Operator (%):** Divides the first operand by the second and returns the remainder of the division.

### Properties of the Modulo Operator

- Always yields a result with the same sign as the second operand (or zero).
- Can be used to perform modular arithmetic, which is often referred to as ""clock arithmetic.""

## Example: Clock Arithmetic

Suppose you have a clock with numbers 12 to 11. If you were asked what time is 5 hours after 9 o'clock, you would answer 2 o'clock instead of 14 o'clock. This is an example of modular arithmetic because the clock ""wraps around"" after 12 hours.

### Python Implementation

In Python, the floor division operator is represented by //, and the modulo operator is represented by %.

```python
# Example of floor division
>>> -43 // -3
14

# Example of modulo operation
>>> -43 % -3
-1
```

## Python Documentation Terminology

The Python documentation refers to floor division as ""floor division"" and the modulo operator as ""the modulo operator."""
"page_content='60 V ariables, statements, and expressions
Figure 4.2: Clock arithmetic:5 + 9 ≡ 2 (mod 12)
In mathematics, we would say that5 + 9 is congruent to 2 modulo 12,
and we’d write
5 + 9 ≡ 2 ( mod 12)
So 5 + 9 = 14 and 14 ÷ 12 has a remainder of 2.
Here’s another example:
Figure 4.3: Clock arithmetic:11 + 6 ≡ 5 (mod 12)
Similarly, we’d say that11 + 6 is congruent to5 modulo 12, and we’d
write
11 + 6 ≡ 5 ( mod 12)
Let’s think of this a little more formally. Suppose we have some pos-
itive integer,𝑛, which we call themodulus. We can perform arithmetic
with respect to this integer in the following way. When counting, when
we reach this number we start over at 0. Now in the case of clocks, this
positive integer is 12, but it needn’t be—we could choose any positive
integer.
For example, with𝑛 = 5, we’d count
0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, …
Notice that we never count to 5, we start over at zero. You’ll see that the
clocks in the figures above don’t have twelve on their face but instead
have zero. If𝑛 = 5, then we’d have 5 positions on our “clock”, numbered
0 through 4.
Under such a system, addition and subtraction would take on a new
meaning. For example, with𝑛 = 5, 4 + 1 ≡ 0 (mod 5),
4 + 2 ≡ 1 (mod 5),
4 + 3 ≡ 2 (mod 5),
and so on.
Things work similarly for subtraction, except we proceed anti-
clockwise. For example1 − 3 ≡ 3 (mod 5).
The same principle applies to multiplication:2 × 4 ≡ 3 ( mod 5) and
3 × 3 ≡ 4 (mod 5).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 74}","## Clock Arithmetic

### Introduction

Clock arithmetic involves performing arithmetic operations with respect to a positive integer known as the modulus (_n_). When the result exceeds this modulus, the counting restarts from 0.

### Example

**Counting with _n_ = 5:**

```
0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, ...
```

### Addition and Subtraction

**Addition:**

```
4 + 1 ≡ 0 (mod 5)
4 + 2 ≡ 1 (mod 5)
4 + 3 ≡ 2 (mod 5)
```

**Subtraction:**

```
1 - 3 ≡ 3 (mod 5)
```

### Multiplication

```
2 × 4 ≡ 3 (mod 5)
3 × 3 ≡ 4 (mod 5)
```

### Metadata

- source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- page: 74"
"page_content='Modular arithmetic 61
0
1
23
4
Figure 4.4: A “clock” for (mod 5)
0
1
23
4
Figure 4.5: 4 + 1 ≡ 0 (mod 5)
0
1
23
4
Figure 4.6: 4 + 2 ≡ 1 (mod 5)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 75}","## Modular Arithmetic

**Page Number:** 75

**Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Content

**Introduction to Modular Arithmetic**

Modular arithmetic is a system of arithmetic that deals with numbers that are constrained to a specific range. In modular arithmetic, calculations are performed on these numbers, and the result is always within the specified range.

**Representation of Modular Arithmetic**

Modular arithmetic is represented using the following notation:

```
a ≡ b (mod n)
```

where:

* `a` and `b` are integers
* `n` is the modulus, which defines the range of the numbers involved

This notation means that `a` and `b` are equivalent when divided by `n`. In other words, the remainder of `a` divided by `n` is equal to the remainder of `b` divided by `n`.

**Clock Analogy**

A simple analogy to understand modular arithmetic is to think of a clock. The clock's face can be divided into 12 hours, and when the hour hand moves past 12, it starts again at 1. This represents the modular arithmetic operation of `n = 12`, where numbers wrap around after reaching the modulus.

**Examples of Modular Arithmetic**

* 4 + 1 ≡ 0 (mod 5) (4 + 1 = 5, and 5 divided by 5 has a remainder of 0)
* 4 + 2 ≡ 1 (mod 5) (4 + 2 = 6, and 6 divided by 5 has a remainder of 1)
* 3 * 4 ≡ 2 (mod 5) (3 * 4 = 12, and 12 divided by 5 has a remainder of 2)

**Applications of Modular Arithmetic**

Modular arithmetic has a wide range of applications, including:

* Cryptography
* Computer science
* Number theory
* Game theory
* Coding theory"
"page_content='62 V ariables, statements, and expressions
0
1
23
4
Figure 4.7: 4 + 3 ≡ 2 (mod 5)
0
1
23
4
Figure 4.8: 1 − 3 ≡ 3 (mod 5)
Negative modulus
We’ve seen that when we add we go clockwise, and when we subtract we
go anti-clockwise. What happens when the modulus is negative?
To preserve the “direction” of addition (clockwise) and subtraction
(anti-clockwise), if our modulus is negative we number the face of the
clock anti-clockwise.
Examples:
1 ≡ −4 ( mod − 5)
2 ≡ −3 ( mod − 5)
2 + 4 ≡ −4 (mod − 5)
We can confirm these agree with Python’s evaluation of these expres-
sions:
>>> 1 % -5
-4
>>> 2 % -5' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 76}","## Variables, Statements, and Expressions

**Negative Modulus**

When the modulus is negative, the face of the clock is numbered anti-clockwise to preserve the direction of addition (clockwise) and subtraction (anti-clockwise).

**Examples:**

- 1 ≡ −4 ( mod − 5)
- 2 ≡ −3 ( mod − 5)
- 2 + 4 ≡ −4 (mod − 5)

**Python Evaluation:**

```python
>>> 1 % -5
-4
>>> 2 % -5
-3
```"
"page_content='Modular arithmetic 63
0
− 4
− 3− 2
− 1
Figure 4.9: A “clock” for (mod -5)
0
− 4
− 3− 2
− 1
Figure 4.10: 1 ≡ −4 ( mod − 5)
Figure 4.11: 2 ≡ −3 ( mod − 5)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 77}","**Modular Arithmetic**

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 77

**Key Concepts:**

**Modular Arithmetic**

* A system of arithmetic where numbers ""wrap around"" upon reaching a certain value.
* The modulus, denoted as ""mod,"" determines the point at which the numbers reset.

**Clock Example:**

* A clock is an example of modular arithmetic with a modulus of 12.
* The hour hand wraps around from 12 back to 1 when it completes a full cycle.

**Examples:**

* 1 ≡ -4 (mod -5)
* 2 ≡ -3 (mod -5)

**Visual Representation:**

**""Clock"" for (mod -5)**

* Clock-like diagram with numbers from 0 to -4.

**1 ≡ -4 (mod -5)**

* Shows that 1 and -4 represent the same value in the (mod -5) system.

**2 ≡ -3 (mod -5)**

* Shows that 2 and -3 represent the same value in the (mod -5) system."
"page_content='64 V ariables, statements, and expressions
0
− 4
− 3− 2
− 1
Figure 4.12: 2 + 4 ≡ −4 (mod − 5)
-3
>>> (4 + 2) % -5
-4
WhydidIput (4 + 2)inparentheses?Because % hashigherprecedence
than +. Again, try inputting your own expressions into the Python shell.
Some things to note
• If the modulus is an integer,𝑛 > 0, then the only possible remain-
ders are[0, 1, ..., 𝑛 − 1].
• If the modulus is an integer,𝑛 < 0, then the only possible remain-
ders are[𝑛 + 1, ..., −1, 0].
What now?
This is actually abig topic, involving equivalence classes, remainders (in
this context, called “residues”), and others. That’s all outside the scope
of this textbook. Practically, however, there are abundant applications
for modular arithmetic, and this is something we’ll see again and again
in this text.
Some applications for modular arithmetic include:
• Hashing function
• Cryptography
• Primality and divisibility testing
• Number theory
Here are a couple of simple examples.
Example: eggs and cartons
Jenny has𝑛 eggs. If a carton holds 12 eggs, how many complete cartons
can she make and how many eggs will be left over?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 78}","## Modulus Operator

### Understanding the Modulus Operator

- The modulus operator (%), when applied to two integers, a and b, results in the remainder of a divided by b.

- It is expressed as: a % b

### Rules for Modulo Operation

**With positive modulus:**

- Possible remainders: [0, 1, ..., b - 1]

**With negative modulus:**

- Possible remainders: [b + 1, ..., -1, 0]

### Applications of Modular Arithmetic

- Hashing functions
- Cryptography
- Primality and divisibility testing
- Number theory

### Examples

**Egg cartons example:**

- Jenny has 35 eggs.
- Each carton holds 12 eggs.
- Number of complete cartons: 35 // 12 = 2
- Number of leftover eggs: 35 % 12 = 11

Therefore, Jenny can make **2 complete cartons** and have **11 eggs leftover**."
"page_content='Modular arithmetic 65
EGGS_PER_CARTON = 12
cartons = n // EGGS_PER_CARTON
leftover = n % EGGS_PER_CARTON
Example: even or odd
Given some integer𝑛 is 𝑛 even or odd?
if n % 2 == 0:
print(f'{n} is even')
else:
print(f'{n} is odd')
(Yes, there’s an even simpler way to write this. We’ll get to that in due
course.)
Comprehension check
1. Given some modulus,𝑛, an integer, and some dividend,𝑑, also an
integer, what are the possible values ofd % n if
a. 𝑛 = 5
b. 𝑛 = −4
c. 𝑛 = 2
d. 𝑛 = 0
2. Explain why, if the modulus is positive, the remainder can never
be greater than the modulus.
3. Theplanet Zorlaxorbitsitssunevery2911/3Zorlaxiandays.Thus,
starting from the year 1, every third year is a leap year on Zorlax.
So the year 3 is a leap year. The year 6 is a leap year. The year 273
is a leap year. Write a Python expression which, given some integer
𝑦greater than or equal to 1 representing the year, will determine
whether 𝑦 represents a Zorlaxian leap year.
4. There’s a funny little poem: Solomon Grundy— / Born on a Mon-
day, / Christened on Tuesday, / Married on Wednesday, / Took
ill on Thursday, / Grew worse on Friday, / Died on Saturday, /
Buried on Sunday. / That was the end / Of Solomon Grundy.9
How could this be? Was Solomon Grundy married as an infant?
Did he die before he was a week old? What does this have to do
with modular arithmetic? What if I told you that Solomon Grundy
was married at age 28, and died at age 81? Explain.
9 First recorded by James Orchard Halliwell and published in 1842. Minor changes
to punctuation by the author.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 79}","## Modular Arithmetic

### EGGS_PER_CARTON Example

#### Code
```python
EGGS_PER_CARTON = 12
cartons = n // EGGS_PER_CARTON
leftover = n % EGGS_PER_CARTON
```

### Even or Odd Example
#### Code
```python
if n % 2 == 0:
    print(f'{n} is even')
else:
    print(f'{n} is odd')
```

### Comprehension Check:

1. **Possible Values of d % n:**
    - a. n = 5: {0, 1, 2, 3, 4}
    - b. n = -4: {-3, -2, -1, 0, 1, 2, 3}
    - c. n = 2: {0, 1}
    - d. n = 0: Undefined

2. **Remainder < Modulus:**
If the modulus is positive, the remainder can never be greater than the modulus because the remainder is the value that remains after subtracting the product of the modulus and the quotient from the dividend. Since the quotient is always a positive integer, the product of the modulus and the quotient will always be less than the dividend. Therefore, the remainder will always be less than the modulus.

3. **Zorlaxian Leap Year Expression:**
```python
zorlax_leap_year = ((y - 1) % 3 == 0)
```

4. **Solomon Grundy's Age**
Modular arithmetic helps explain how Solomon Grundy could be married at age 28 and die at age 81 while still dying before he was a week old. The key is that the poem is referring to the days of the week, not to the days of his life. If we assume that Monday is day 0, then:
    - Born on Monday: day 0
    - Christened on Tuesday: day 1
    - Married on Wednesday: day 2
    - Took ill on Thursday: day 3
    - Grew worse on Friday: day 4
    - Died on Saturday: day 5
    - Buried on Sunday: day 6
Therefore, Solomon Grundy died on day 5, which is 5 days after he was born. However, since we are using modular arithmetic, we can say that he died on day 0, which is equivalent to day 5 modulo 7. Thus, he died before he was a week old (modulo 7), but he was 81 years old (modulo 29, since 81 = 29 * 2 + 21)."
"page_content='66 V ariables, statements, and expressions
4.6 Exponentiation
Exponentiation is a ubiquitous mathematical operation. However, the
syntax for exponentiation varies between programming languages. In
some languages, the caret (^) is the exponentiation operator. In other lan-
guages, including Python, it’s the double-asterisk (**). Some languages
don’thaveanexponentiationoperator,andinsteadtheyprovidealibrary
function, pow().
The reasons for these differences are largely historical. In mathemat-
ics, we write an exponent as a superscript, for example,𝑥2 . However,
keyboards and character sets don’t know about superscripts,
10 and so
the designers of programming languages had to come up with different
ways of writing exponentiation.
** was first used in Fortran, which first appeared in 1957. This is the
operator which Python uses for exponentiation.
For the curious, here’s a table with some programming languages and
the operators or functions they use for exponentiation.
** Algol, Basic, Fortran, JavaScript, OCaml, Pascal, Perl,
Python, Ruby, Smalltalk
^ J, Julia, Lua, Mathematica
pow() C, C++, C#, Dart, Go, Java, Kotlin, Rust, Scala
expt Lisp, Clojure
Exponentiation in Python
Now we know that** is the exponentiation operator in Python. This
is aninfix operator, meaning that the operator appearsbetween its two
operands. As you’d expect, the first operand is thebase, and the second
operand is theexponent or power. So,
b ** n
implements 𝑏𝑛 .
Here are some examples,
Area of a circle of a given radius 3.14159 * radius ** 2
Kinetic energy, given mass and velocity (1 / 2) * m * v ** 2
Also, as you’d expect,** has precedence over* so in the above exam-
ples, radius ** 2 and v ** 2 are calculated before multiplication with
other terms.
10 Picking nits, that’s not entirely true, since nowadays there are some character
sets that include superscript 2 and 3. But they’re not understood as numbers and
aren’t useful in programming.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 80}","## Formatting Instructions

### Content Structuring
- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

### Metadata Inclusion
- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

### Code Formatting
- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

### Differences in Tabular Format
- Include examples clearly if provided.
- Keep answers in brief, do not cut short content.

## Formatting Output

### Metadata
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 80

### Exponentiation

**Exponentiation** is a widespread mathematical operation. However, its syntax varies between programming languages.

Some languages use the caret (^) as the exponentiation operator, while others, like Python, use the double-asterisk (**). Other languages lack an exponentiation operator, instead providing a library function, pow().

**Historical Reasons for Differences:**

- Mathematical exponents are written as superscripts.
- Keyboards and character sets initially lacked superscripts.
- Programming language designers had to come up with alternative exponentiation notations.

### ** Operator for Exponentiation

** was first introduced in Fortran in 1957 and is used by Python.

### Exponentiation in Python

The ** operator is an infix operator that takes two operands: a base and an exponent. It calculates 𝑏𝑛.

**Examples:**
- Area of a circle with radius 3.14159: 3.14159 * radius ** 2
- Kinetic energy with mass m and velocity v: (1 / 2) * m * v ** 2

**Operator Precedence:** ** has higher precedence than *, so calculations like radius ** 2 and v ** 2 are performed before multiplication.

#### Comparison of Exponentiation Operators in Programming Languages

| Language | Exponentiation Operator/Function |
|---|---|
| Algol, Basic, Fortran, JavaScript, OCaml, Pascal, Perl, Python, Ruby, Smalltalk | ** |
| J, Julia, Lua, Mathematica | ^ |
| C, C++, C#, Dart, Go, Java, Kotlin, Rust, Scala | pow() |
| Lisp, Clojure | expt |"
"page_content='Exponentiation 67
But wait! There’s more!
You’re going to find out sooner or later, so you might as well know now
that Python also has a built-in function pow(). For our purposes, **
and pow() are equivalent, so you may use either. Here’s a session at the
Python shell:
>>> 3 ** 2
9
>>> 3.0 ** 2
9.0
>>>
>>> pow(3, 2)
9
>>> pow(3.0, 2)
9.0
With two operands or arguments,** and pow() behave identically. If
both operands are integers, and the exponent is positive, the result will
be an integer. If one or more of the operands is a float, the result will be
a float.
Negative or fractional exponents behave as you’d expect.
>>> 3 ** 0.5 # Calculates the square root of 3
1.7320508075688772
>>> 3 ** -1 # Calculates 1 / 3
0.3333333333333333
No surprises here.
𝑥0 = 1
Remember from algebra that any non-zero number raised to the zero
power is one. If that weren’t the case, what would become of this rule?
𝑏𝑚+𝑛 = 𝑏𝑚 × 𝑏𝑛
So 𝑥0 = 1 for all non-zero𝑥. Python knows about that, too.
>>> 1 ** 0
1
>>> 2 ** 0
1
>>> 0.1 ** 0
1.0
What about00 ? Many mathematics texts state that this should be un-
defined or indeterminate. Others say00 = 1. What do you think Python
does?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 81}","## Exponentiation

### Built-in Function: pow()

Python provides a built-in function, `pow()`, which is equivalent to the `**` operator for our purposes.

**Examples:**

```
>>> 3 ** 2
9

>>> 3.0 ** 2
9.0

>>> pow(3, 2)
9

>>> pow(3.0, 2)
9.0
```

### Behavior with Integer and Float Operands

With two operands or arguments, `**` and `pow()` behave identically:

- If both operands are integers and the exponent is positive, the result will be an integer.
- If one or more of the operands is a float, the result will be a float.

**Examples:**

```
>>> 3 ** 0.5 # Calculates the square root of 3
1.7320508075688772

>>> 3 ** -1 # Calculates 1 / 3
0.3333333333333333
```

### Zero Power

Any non-zero number raised to the zero power is one:

```
𝑥0 = 1
```

```
>>> 1 ** 0
1

>>> 2 ** 0
1

>>> 0.1 ** 0
1.0
```

### Undefined or Indeterminate Values

The value of `0^0` is undefined or indeterminate in many mathematics texts, while others define it as 1. Python does not define this value."
"page_content='68 V ariables, statements, and expressions
>>> 0 ** 0
1
So, Python has an opinion on this.
Now, go forth and exponentiate!
A little puzzle
Consider the following Python shell session:
>>> pow(-1, 0)
1
>>> -1 ** 0
-1
What’sgoingonhere?Theanswerwegetusing pow() iswhatwe’dexpect.
Shouldn’t these both produce the same result? Can you guess why these
yield different answers?
4.7 Exceptions
Exceptions are errors that occur at run time, that is, when you run your
code. When such an error occurs Python raises an exception, prints a
message with information about the exception, and then halts execution.
Exceptions have different types, and this tells us about the kind of error
that’s occurred.
If there is a syntax error, an exception of typeSyntaxError is raised.
If there is an indentation error (a more specific kind of syntax error), an
IndentationErroris raised. These errors occur before your code is ever
run—they are discovered as Python is first reading your file.
Most other exceptions occur as your program is run. In these cases,
the message will include what’s called atraceback, which provides a little
information about where in your code the error occurred. The last line
in an exception message reports the type of exception that has occurred.
It’s often helpful to read such messages from the bottom up.
Whatfollowsarebriefsummariesofthefirsttypesofexceptionsyou’re
likely to encounter, and in each new chapter, we’ll introduce new excep-
tion types as appropriate.
SyntaxError
If you write code which does not follow the rules of Python syntax,
Python will raise an exception of typeSyntaxError. Example:
>>> 1 + / 1
File ""<stdin>"", line 1
1 + / 1
^
SyntaxError: invalid syntax' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 82}","**68 Variables, statements, and expressions**

**4.7 Exceptions**

**Exceptions** are errors that occur at run time, that is, when you run your code. When such an error occurs Python raises an exception, prints a message with information about the exception, and then halts execution.

**Exceptions have different types, and this tells us about the kind of error that’s occurred.**

If there is a syntax error, an exception of type **SyntaxError** is raised.
If there is an indentation error (a more specific kind of syntax error), an **IndentationError** is raised. These errors occur before your code is ever run—they are discovered as Python is first reading your file.

Most other exceptions occur as your program is run. In these cases, the message will include what’s called a **traceback**, which provides a little information about where in your code the error occurred. The last line in an exception message reports the type of exception that has occurred.
It’s often helpful to read such messages from the bottom up.

**What follows are brief summaries of the first types of exceptions you’re likely to encounter, and in each new chapter, we’ll introduce new exception types as appropriate.**

**SyntaxError**

If you write code which does not follow the rules of Python syntax, Python will raise an exception of type **SyntaxError**.

**Example:**

```
>>> 1 + / 1
File ""<stdin>"", line 1
1 + / 1
^
SyntaxError: invalid syntax' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 82}

```"
"page_content='Exceptions 69
Notice that the^ character is used to indicate the point at which the
error occurred.
Here’s another:
>>> True False
File ""<stdin>"", line 1
True False
^
SyntaxError: invalid syntax
When you encounter a syntax error, it means that some portion of
your code does not follow the rules of syntax. Code which includes a
syntax error cannot be executed by the Python interpreter, and syntax
errors must be corrected before your code will run.
NameError
A NameError occurs when we try to use a name which is undefined. There
must be a value assigned to a name before we can use the name.
Here’s an example of aNameError:
>>> print(x)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'x' is not defined
NoticethatPythonreportsthe NameError andinformsyouofthename
you tried to use but which is undefined (in this casex).
These kinds of errors most often occur when we’ve made a typo in a
name.
Depending on the root cause of the error, there are two ways to correct
these errors.
• If the cause is a typo, just correct your typo.
• If it’s not just a typo, then you mustdefine the name by making
an assignment with the appropriate name.
>>> pet = 'rabbit'
>>> print(pot)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'pot' is not defined
>>> print(pet)
rabbit
>>> age = age + 1 # Happy birthday!
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'age' is not defined' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 83}","## Exceptions

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 83

### SyntaxError

Notice that the ^ character is used to indicate the point at which the error occurred.

Here's another example:

```python
>>> True False
File ""<stdin>"", line 1
True False
^
SyntaxError: invalid syntax
```

When you encounter a syntax error, it means that some portion of your code does not follow the rules of syntax. Code which includes a syntax error cannot be executed by the Python interpreter, and syntax errors must be corrected before your code will run.

### NameError

A NameError occurs when we try to use a name which is undefined. There must be a value assigned to a name before we can use the name.

Here's an example of a NameError:

```python
>>> print(x)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'x' is not defined
```

Notice that Python reports the NameError and informs you of the name you tried to use but which is undefined (in this case x).

These kinds of errors most often occur when we've made a typo in a name.

Depending on the root cause of the error, there are two ways to correct these errors:

* If the cause is a typo, just correct your typo.
* If it's not just a typo, then you must define the name by making an assignment with the appropriate name.

```python
>>> pet = 'rabbit'
>>> print(pot)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'pot' is not defined
>>> print(pet)
rabbit
>>> age = age + 1 # Happy birthday!
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'age' is not defined
```"
"page_content='70 V ariables, statements, and expressions
>>> age = 100
>>> age = age + 1 # Happy birthday!
>>> print(age)
101
TypeError
A TypeError occurs when we try to perform an operation on an object
which does not support that operation.
The Python documentation states: “[TypeError is] raised when an op-
eration or function is applied to an object of inappropriate type. The
associated value is a string giving details about the type mismatch.”11
For example, we can perform addition with operands of typeint using
the + operator, and we can concatenate strings using the same operator,
but we cannot add anint to astr.
>>> 2 + 2
4
>>> 'fast' + 'fast' + 'fast'
'fastfastfast'
>>> 2 + 'armadillo'
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'
When you encounter aTypeError, you must examine the operator and
operands and determine the best fix. This will vary on a case-by-case
basis.
Here are some other examples ofTypeError:
>>> 'hopscotch' / 2
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for /: 'str' and 'int'
>>> 'barbequeue' + 1
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: can only concatenate str (not ""int"") to str
ZeroDivisionError
Just as we cannot divide by zero in mathematics, we cannot divide by
zero in Python either. Since the remainder operation (%) and integer
(a.k.a. floor) division (//) depend on division, the same restriction applies
to these as well.
11 https://docs.python.org/3/library/exceptions.html#TypeError' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 84}","## Formatting Instructions:

### 1. Content Structuring:

- **Key Sections:**
   - Variables
   - Statements
   - Expressions
   - TypeError
   - ZeroDivisionError

### 2. Metadata Inclusion:

- Page: 84
- Source: ""An Introduction to Programming and Computer Science with Python, Clayton Cafiero""

### 3. Code Formatting:

- No code provided.

### 4. Tabular Format Difference:

- No tabular format required.

### 5. Examples:

- Addition of two integers:
```
>>> 2 + 2
4
```
- Concatenation of strings:
```
>>> 'fast' + 'fast' + 'fast'
'fastfastfast'
```
- Attempt to add an integer to a string:
```
>>> 2 + 'armadillo'
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'
```
- Attempt to divide a string by an integer:
```
>>> 'hopscotch' / 2
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for /: 'str' and 'int'
```
- Attempt to concatenate a string with an integer:
```
>>> 'barbequeue' + 1
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: can only concatenate str (not ""int"") to str
```"
"page_content='Exercises 71
>>> 1000 / 0
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ZeroDivisionError: division by zero
4.8 Exercises
Exercise 01
Without typing these at a Python prompt first, determine the value of
each of the following expressions. Once you’ve worked out what you think
the evaluation should be, check your answer using the Python shell.
a. 13 + 6 - 1 * 7
b. (17 - 2) / 5
c. -5 / -1
d. 42 / 2 / 3
e. 3.0 + 1
f. 1.0 / 3
g. 2 ** 2
h. 2 ** 3
i. 3 * 2 ** 8 + 1
Exercise 02
For each of the expressions in exercise 01, give thetype of the result of
evaluation. Example:1 + 1 evaluates to2 which is of typeint.
Exercise 03
What is the evaluation of the following expressions?
a. 10 % 2
b. 19 % 2
c. 24 % 5
d. -8 % 3' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 85}","## Exercises

### 4.8 Exercises

#### Exercise 01

**Without typing these at a Python prompt first, determine the value of each of the following expressions. Once you’ve worked out what you think the evaluation should be, check your answer using the Python shell.**

a. 13 + 6 - 1 * 7
b. (17 - 2) / 5
c. -5 / -1
d. 42 / 2 / 3
e. 3.0 + 1
f. 1.0 / 3
g. 2 ** 2
h. 2 ** 3
i. 3 * 2 ** 8 + 1

#### Exercise 02

**For each of the expressions in exercise 01, give the type of the result of evaluation. Example: 1 + 1 evaluates to 2 which is of type int.**

| Expression | Result Type |
|---|---|
| 13 + 6 - 1 * 7 | int |
| (17 - 2) / 5 | float |
| -5 / -1 | int |
| 42 / 2 / 3 | float |
| 3.0 + 1 | float |
| 1.0 / 3 | float |
| 2 ** 2 | int |
| 2 ** 3 | int |
| 3 * 2 ** 8 + 1 | int |

#### Exercise 03

**What is the evaluation of the following expressions?**

a. 10 % 2
b. 19 % 2
c. 24 % 5
d. -8 % 3"
"page_content='72 V ariables, statements, and expressions
Exercise 04
What do you think would happen if we were to use the operands we’ve
just seen with non-numeric types? For example, what do you think would
happen if we were to enter the following. Then check your expectations
using the Python interpreter. Any surprises?
a. 'Hello' + ', ' + 'World!'
b. 'Hello' * 3
c. True * True
d. True * False
e. False * 42
f. -True
g. True + True
Exercise 05
What is the difference between the following statements?
it_is_cloudy_today = True
it_will_rain_tomorrow = 'True'
Exercise 06
Some operands don’t work with certain types. For example, the following
willresultinerrors.Trytheseoutataprompt,andobservewhathappens.
Make a note of thetype of error which occurs.
a. 'Hello' / 3
b. -'Hello'
c. 'Hello' - 'H'
Exercise 07
a. Write a statement that assigns the value79.95 to a variable name
subtotal.
b. Write a statement that assigns the value0.06 to a variable name
tax_rate.
c. Write a statement that multipliessubtotal bytax_rate and assigns
the result to a variable namesales_tax.
d. Write a statement that addssubtotal and sales_tax and assigns
the result to a variable nametotal.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 86}","## Exercise 04: Operators with Non-Numeric Types ##

### Observations:

a. `'Hello' + ', ' + 'World!'`
   - Results in the string `""Hello, World!""`.
   - Concatenates the strings `'Hello'`, `', '`, and `'World!'`.

b. `'Hello' * 3`
   - Results in the string `""HelloHelloHello""`.
   - Repeats the string `'Hello'` three times.

c. `True * True`
   - Results in `True`.
   - Boolean multiplication interprets `True` as 1 and `False` as 0.

d. `True * False`
   - Results in `False`.
   - Boolean multiplication interprets `True` as 1 and `False` as 0.

e. `False * 42`
   - Results in `0`.
   - Boolean multiplication interprets `False` as 0.

f. `-True`
   - Results in `-1`.
   - Negates the boolean value `True`.

g. `True + True`
   - Results in a `TypeError`.
   - Boolean addition is not defined.

## Exercise 05: Comparison of Boolean and String Types ##

- **`it_is_cloudy_today = True`**
   - Assigns the boolean value `True` to the variable `it_is_cloudy_today`.

- **`it_will_rain_tomorrow = 'True'`**
   - Assigns the string `""True""` to the variable `it_will_rain_tomorrow`.

- **Difference:**
   - `True` is a boolean value, while `""True""` is a string.
   - Boolean and string types are distinct and cannot be compared directly.

## Exercise 06: Invalid Operations ##

### Observations:

a. `'Hello' / 3`
   - Results in a `TypeError`.
   - Division is not defined for string and numeric types.

b. `-'Hello'`
   - Results in a `TypeError`.
   - Negation is not defined for string types.

c. `'Hello' - 'H'`
   - Results in a `TypeError`.
   - Subtraction is not defined for string types.

## Exercise 07: Numeric Calculations ##

a. `subtotal = 79.95`
b. `tax_rate = 0.06`
c. `sales_tax = subtotal * tax_rate`
d. `total = subtotal + sales_tax`"
"page_content='Exercises 73
Exercise 08
What do you think would happen if we were to evaluate the expression
1 / 0? Why? Does this result in an error? What type of error results?
Exercise 09
a. Now that we’ve learned a little about modular arithmetic, recon-
sider the numerals we use in our decimal (base 10) system. In that
system, why do we have only the numerals 0, 1, 2, 3, 4, 5, 6, 7, 8,
and 9?
b. What numerals would we need in a base 7 system? How about base
5?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 87}","**Exercise 08: Division by Zero**

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 87

**Discussion:**

Evaluating the expression 1 / 0 results in a ""ZeroDivisionError"" in Python. This occurs because dividing a finite number by zero is undefined in mathematics. Mathematically, this operation represents an infinite quantity, which cannot be represented as a finite value in a computer system.

**Exercise 09: Modular Arithmetic Numerals**

**a. Decimal (Base 10) Numerals**

In the decimal system, we have only the numerals 0 to 9 because our system is based on the concept of modular arithmetic with a modulus of 10. This means that when a number exceeds 9, we ""wrap around"" to the next decade, represented by the numeral 10.

**b. Numerals for Base 7 and Base 5 Systems**

In a base 7 system, we would need the numerals 0 to 6.
In a base 5 system, we would need the numerals 0 to 4."
"page_content='Chapter 5
F unctions
This chapter introducesfunctions. Functions are a fundamental building
block for code in all programming languages (though they may go by
different names, depending on context).
Learning objectives
• You will learn how to write simple functions in Python, usingdef.
• You will learn how to use functions in your code.
• You will learn that indentation is syntactically meaningful in
Python (unlike many other languages).
• You will learn how to use functions (and constants) in Python’s
math module, such as square root and sine.
• You will expand on and solidify your understanding of topics pre-
sented in earlier chapters.
T erms and keywords introduced
• argument
• call or invoke
• def keyword
• dot notation
• formal parameter
• function
• import
• keyword
• local variable
• module
• pure and impure functions
• return keyword
• return value
• scope
• shadowing
• side effect
75' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 89}","## Functions

### Introduction

This chapter provides an introduction to the concept of functions, a fundamental building block of code in all programming languages.

### Learning Objectives

* Understanding the basics of writing simple functions in Python using the 'def' keyword.
* Incorporating functions into your Python code.
* Recognizing the syntactic significance of indentation in Python.
* Utilizing functions and constants from Python's 'math' module, such as square root and sine.
* Strengthening and expanding your understanding of topics introduced in earlier chapters.

### Vocabulary

- Argument
- Call or invoke
- def keyword
- Dot notation
- Formal parameter
- Function
- Import
- Keyword
- Local variable
- Module
- Pure and impure functions
- Return keyword
- Return value
- Scope
- Shadowing
- Side effect"
"page_content='76 F unctions
5.1 Introduction to functions
Among the most powerful tools we have as programmers—perhaps the
most powerful tools—arefunctions.
We’ve already seen some built-in Python functions, for example,
print() and type(). We’ll see many others soon.
Essentially, a function is a sub-program which we can “call” or “in-
voke” from within our larger program. For example, consider this code
which prints a string to the console.
print('Do you want a cookie?')
Here we’re making use of built-in Python functionprint(). The de-
velopers of Python have written this function for you, so you can use it
within your program. When we use a function, we say we are “calling”
or “invoking” the function.
In the example above, wecal l the print() function, supplying the
string 'Do you want a cookie?' as an argument.
As a programmer using this function, you don’t need to worry about
what goes on “under the hood” (which is quite a bit, actually). How
convenient!
When we call a function, the flow of control within our program passes
to the function, the function does its work, and then returns a value. All
Pythonfunctionsreturnavalue,thoughinsomecases,thevaluereturned
isNone.
1
Defining a function
Python allows us to define our own functions.2 A function is a unit
of code which performs some calculation or some task. A function may
take zero or morearguments (inputs to the function). The definition
of a function may include zero or moreformal parameters which are,
essentially, variables that will take on the values of the arguments pro-
vided. When called, the body of the function is executed. In most, but
not all cases, a value is explicitly returned. Returned values might be the
result of a calculation or some status indicator—this will vary depending
on the purpose of the function. If a value is not explicitly returned, the
value None is returned implicitly.
Let’s take the simple example of a function which squares a number.
In your mathematics class you might write
𝑓 (𝑥) = 𝑥2
1 Unlike C or Java, there is no such thing as a void function in Python. All
Python functions return a value, even if that value is None.
2 Different languages have different names for sub-programs we can call within
a larger program, for example, functions, methods, procedures, subroutines, etc.,
and some of these designations vary with context. Also, these are defined and im-
plemented somewhat differently in different languages. However, the fundamental
idea is similar for all: these are portions of code we can call or invoke within our
programs.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 90}","## Functions

### 5.1 Introduction to Functions

Functions are powerful tools that allow us to create sub-programs within larger programs. They can be called or invoked to perform specific tasks. For example:

```python
print('Do you want a cookie?')
```

Here, we are calling the built-in Python function `print()`, which displays the provided string to the console.

### Defining a Function

Python allows us to define our own functions, which can perform specific calculations or tasks. A function can take zero or more arguments (inputs).

The definition of a function consists of one or more formal parameters, which are essentially variables that will store the values of the arguments passed to the function. When called, the body of the function is executed, and a value is typically returned. If no value is explicitly returned, the value `None` is returned implicitly.

### Example: Squaring a Number

Here's an example of a simple function that squares a number:

```python
def square(x):
    return x ** 2
```

This function takes a single argument `x` and returns the squared value of `x`.

### Tabular Summary of Function Characteristics

| Feature | Python Functions |
|---|---|
| Return Value | All Python functions return a value, even if it's `None` |
| Void Functions | Python does not have void functions |
| Other Names | Sub-programs can be called functions, methods, procedures, subroutines, etc., depending on the language |"
"page_content='Introduction to functions 77
and you would understand that when we apply the function𝑓 to some
argument𝑥 the result is𝑥2 . For example,𝑓 (3) = 9. Let’s write a function
in Python which squares the argument supplied:
def square(x):
return x * x
def is a Python keyword, short for “define”, which tells Python we’re
defining a function. (Keywords are reserved words that are part of
the syntax of the language.def is one such keyword, and we will see
others soon.) Functions defined withdef must have names (a.k.a., “iden-
tifiers”),3 so we give our function the name “square”.
Now, in order to calculate the square of something we need to know
what that something is. That’s where thex comes in. We refer to this as
a formal parameter of the function. When we use this function elsewhere
in our code we must supply a value forx. Values passed to a function are
called arguments (however, in casual usage it’s not uncommon to hear
people use “parameter” and “argument” interchangeably).
At the end of the first line of our definition we add a colon. What
follows after the colon is referred to as thebody of the function. It is
within the body of the function that the actual work is done. The body
of a function must be indented as shown below—this is required by the
syntax of the language. It is important to note that the body of the
function is only executed when the function is cal led, not when it is
defined.
In this example, we calculate the square,x * x , and wereturn the
result. return is a Python keyword, which does exactly that: it returns
some value from a function.
Let’s try this in the Python shell to see how it works:
>>> def square(x):
... return x * x
...
>>>
Here we’ve defined the functionsquare(). Notice that if we enter this
in the shell, after we hit return after the colon, Python replies with...
and indents for us. This is to indicate that Python expects the body
of the function to follow. Remember: The body of a function must be
indented. Indentation in Python is syntactically significant (which might
seem strange if you’ve coded in Java, C, C++, Rust, JavaScript, C#,
etc.; Python uses indentation rather than braces).
So we write the body—in this case, it’s just a single line. Again,
Python replies with ..., essentially asking “Is there more?”. Here we
hit the return/enter key, and Python understands we’re done, and we
wind up back at the>>> prompt.
Now let’s use our function by calling it. To call a function, we give
the name, and we supply the required argument(s).
3 Python does allow for anonymous functions, called “lambdas”, but that’s for
another day . F or the time being, we’ll be defining and calling functions as demon-
strated here.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 91}","**Metadata**

* Page Number: 91
* Line Numbers: 77-115
* Source: ""C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf""

**Functions in Python**

**Introduction**

Functions are essential building blocks in programming. They allow us to decompose complex tasks into smaller, manageable units, making code more organized and reusable.

**Defining Functions**

To define a function in Python, we use the `def` keyword followed by the function name and parentheses. Inside the parentheses, we specify the formal parameters of the function. The function body, where the actual work is done, goes after the colon.

```python
def function_name(parameter1, parameter2, ...):
    # Function body
    # Statements
    # ...
    return value
```

* `def` keyword: Indicates the start of a function definition.
* Function name: A unique identifier for the function.
* Formal parameters: Placeholders for values that will be passed to the function when it is called.
* Function body: Contains the instructions that are executed when the function is called.
* `return` statement: Returns a value from the function (optional).

**Calling Functions**

To use a function, we call it by its name and pass the required arguments in the parentheses. The arguments are matched to the formal parameters of the function.

**Example**

Let's define and call a function to calculate the square of a number:

```python
def square(x):
    return x * x

result = square(3)
print(result)  # Output: 9
```

In this example:

* `square()` is the function name.
* `x` is the formal parameter.
* `3` is the argument passed to the function.
* `return x * x` calculates the square of the argument.
* `result` stores the returned value, which is 9."
"page_content='78 F unctions
>>> square(5) # call `square` with argument 5
25
>>> square(7) # call `square` with argument 7
49
>>> square(10) # call `square` with argument 10
100
Notice that once we define our function we can reuse it over and over
again. This is one of the primary motivations for functions.
Notice also that in this case, there is nox outside the body of the
function.
>>> x
Traceback (most recent call last):
File ""/blah/blah/code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
NameError: name 'x' is not defined
In this case,x exists only within the body of the function.4 The ar-
gument we supply within the parentheses becomes available within the
body of the function asx. The function then calculatesx * x and returns
the value which is the result of this calculation.
If we wish to use the value returned by our function we can save it by
assigning the value to some variable, or use it in an expression, or even
include it as an argument to another function!
Can we create new variables in our functions?
Yes. Of course.
def cube(x):
y = x ** 3 # assign result local variable `y`
return y # return the value of `y`
We refer to such variable names (y in this example) aslocal variables ,
and like the formal parameters of a function, they exist only within the
body of the function.
4 This is what is called “scope”, and in the example given x exists only within
the scope of the function. It does not exist outside the function—for this we say “ x
is out of scope. ” W e’ll learn more about scope later.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 92}","## Functions

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 92

**Content Structuring:**

**Introduction to Functions**

* Definition of functions
* Reusing functions
* Scope of variables in functions

**Creating Local Variables in Functions**

**Examples:**

```python
>>> square(5) # call `square` with argument 5
25
>>> square(7) # call `square` with argument 7
49
>>> square(10) # call `square` with argument 10
100
```

```python
def cube(x):
    y = x ** 3 # assign result local variable `y`
    return y # return the value of `y`
```

**Explanation:**

Functions allow us to reuse code by defining a set of instructions that can be executed multiple times. The arguments supplied within the parentheses when calling a function become available as local variables within the function's body. These local variables are only accessible within the function and do not exist outside of its scope.

We can create new variables within functions by assigning values to them. These variables are known as local variables and have a limited scope within the function."
"page_content='Introduction to functions 79
Storing a value returned by a function
Continuing with our example ofsquare():
>>> a = 17
>>> b = square(a)
>>> b
289
Notice that we can supply a variable as an argument to our function.
Notice also that this object needn’t be calledx.5
Using the value returned by a function in an expression
Sometimes there’s no need for assigning the value returned by a function
to a variable. Let’s use the value returned by thesquare() function to
calculate the circumference of a circle of radius𝑟.
>>> PI = 3.1415926
>>> r = 126.1
>>> PI * square(r)
49955.123667046
Notice we didn’t assign the value returned to a variable first, but
rather, we used the result directly in an expression.
Passing the value returned from a function to another
function
Similarly, we can pass the value returned from a function to another
function.
>>> print(square(12))
144
What happens here? We pass the value 12 to thesquare() function,
this calculates the square and returns the result (144). This result be-
comes the value we pass to theprint() function, and, unsurprisingly,
Python prints 144.
Do all Python functions return a value?
This is a reasonable question to ask, and the answer is “yes.”
But what aboutprint()? Well, the point ofprint() is not to return
some value but rather to display something in the console. We call things
that a function does apart from returning a valueside effects. The side
effect of callingprint() is that it displays something in the console.
5 In fact, even though it’s syntactically valid for a variable in the outer scope to
have the same name as a parameter to a function, or a local variable within a func-
tion, it’s best if they don’t have the same identifier. See the section on “shadowing”
for more.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 93}","## Introduction to Functions

**Storing a Value Returned by a Function**

```python
a = 17
b = square(a)
```

**Using the Value Returned by a Function in an Expression**

```python
PI = 3.1415926
r = 126.1
PI * square(r)
```

**Passing the Value Returned from a Function to Another Function**

```python
print(square(12))
```

**Do All Python Functions Return a Value?**

The answer is ""yes.""

However, some functions, like `print()`, do not return a value but rather have side effects, such as displaying something in the console."
"page_content='80 F unctions
>>> print('My hovercraft is full of eels!')
My hovercraft is full of eels!
But doesprint() return a value? How would you find out? Can you
think of a way you might check this?
What do you think would happen here?
>>> mystery = print('Hello')
Let’s see:
>>> mystery = print('Hello')
Hello
>>> print(mystery)
None
None is Python’s special way of saying “no value.”None is the default value
returned by functions which don’t otherwise return a value.Al l Python
functions return a value, though in some cases that value isNone.6 So
print() returns theNone.
How do we returnNone (assuming that’s something we want to do)?
By default, in the absence of anyreturn statement,None will be returned
implicitly.
>>> def nothing():
... pass # `pass` means ""don't do anything""
...
>>> type(nothing())
<class 'NoneType'>
Using the keywordreturn without any value will also returnNone.
>>> def nothing():
... return
...
>>> type(nothing())
<class 'NoneType'>
Or, if you wish, you can explicitly returnNone.
>>> def nothing():
... return None
...
>>> type(nothing())
<class 'NoneType'>
6 If you’ve seen void in C++ or Java you have some prior experience with func-
tions that don’t return anything. All Python functions return a value, even if that
value is None.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 94}","## Functions

### Printing a Value

```python
>>> print('My hovercraft is full of eels!')
My hovercraft is full of eels!
```

### Return Value of `print()`

`print()` does not return a value. To check this:

```python
>>> mystery = print('Hello')
Hello
>>> print(mystery)
None
```

### `None` Value

`None` represents the absence of a value. It is the default return value for functions that don't specify a return value.

### Returning `None`

**Implicitly:**

```python
>>> def nothing():
... pass # `pass` means ""don't do anything""
...
>>> type(nothing())
<class 'NoneType'>
```

**Explicitly with `return` Keyword:**

```python
>>> def nothing():
... return
...
>>> type(nothing())
<class 'NoneType'>
```

**Explicitly with `None`:**

```python
>>> def nothing():
... return None
...
>>> type(nothing())
<class 'NoneType'>
```"
"page_content='A deeper dive into functions 81
What functions can do for us
• Functions allow us to break a program into smaller, more manage-
able pieces.
• They make the program easier to debug.
• They make it easier for programmers to work in teams.
• Functions can be eﬀiciently tested.
• Functions can be written once, and used many times.
Comprehension check
1. Write a function which calculates the successor of any integer. That
is, given some argumentn the function should returnn + 1.
2. What’s the difference between a formal parameter and an argu-
ment?
3. When is the body of a function executed?
5.2 A deeper dive into functions
Recall that we define a function using the Python keyworddef. So, for
example, if we wanted to implement the following mathematical function
in Python:
𝑓 (𝑥) = 𝑥2 − 1
Our function would need to take a single argument and return the result
of the calculation.
def f(x):
return x ** 2 - 1
We refer tof as thename or identifier of the function. What follows the
identifier, within parentheses, are theformal parameters of the function.
A function may have zero or more parameters. The function above has
one parameterx.7
Let’s take a look at a complete Python program in which this function
is defined and then called twice: once with the argument 12 and once
with the argument 5.
7 While Python does support optional parameters, we won’t present the syntax
for this here.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 95}","**A Deeper Dive into Functions**

**Metadata**

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 95

**Content**

**What Functions Can Do for Us**

- Divide programs into smaller, manageable pieces
- Enhance debuggability
- Facilitate teamwork
- Enable efficient testing
- Promote code reuse

**Functions in Python**

**Defining Functions:**

- Utilizes the Python keyword `def`
- Example:
```python
def f(x):
    return x ** 2 - 1
```

**Function Components:**

- Name/Identifier: `f`
- Formal Parameters: `x`, enclosed in parentheses

**Example Program**

```python
def f(x):
    return x ** 2 - 1

print(f(12))
print(f(5))
```

**Comprehension Check**

1. **Function to Calculate Successor:**
```python
def successor(n):
    return n + 1
```

2. **Formal Parameter vs. Argument:**
| Formal Parameter | Argument |
|---|---|
| Variable in function definition | Value passed to function when called |

3. **Body of Function Execution:**
- Executed when the function is called with appropriate arguments"
"page_content='82 F unctions
Here we deﬁne the function.
At this point, x does not have a value,
and this code is not executed.
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)
Remember: Writing a function definition does not execute the function.
A function is executedonly when it is cal led.
Calling a function
Once we have written our function, we maycal l or invoke the function
by name, supplying the necessary arguments. To call the functionf()
above, we must supply one argument.
y = f(12)
This calls the functionf(), with the argument 12 and assigns the result
to a variable namedy. Now what happens?
Here we call the function, 
supplying 12 as an argument.
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)
When we call a function with an argument, the argument ispassed to
the function. The formal parameter receives the argument—that is,the
argument is assigned to the formal parameter . So when we pass the ar-
gument 12 to the functionf(), then the first thing that happens is that
the formal parameter x is assigned the argument. It’s almost as if we' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 96}","## Functions

### Function Definition

```python
def f(x):
    return x ** 2 - 1
```

In this definition:

- `f` is the name of the function.
- `x` is the formal parameter, which represents the argument that will be passed to the function when it is called.
- The body of the function is the code that will be executed when the function is called.

### Calling a Function

To call a function, you use the following syntax:

```
function_name(argument)
```

For example, to call the `f` function with the argument `12`, you would write:

```
f(12)
```

### Argument Passing

When you call a function, the argument is passed to the function by value. This means that the value of the argument is copied into the formal parameter, and any changes made to the formal parameter within the function will not affect the argument."
"page_content='A deeper dive into functions 83
performed the assignmentx = 12 as the first line within the body of the
function.
When we call the function and pass
the argument 12, x takes on the value
12.
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)
Once the formal parameter has been assigned the value of the argument,
the function does its work, executing the body of the function.
Now, with x = 12, the function evaluates
the expression…
…12 ⨉ 12 - 1
…144 - 1
…143
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)
Then, the function returns the result. Flow of control is returnedto the
point at which the function was cal led .' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 97}","## Content Formatting: A Deeper Dive into Functions

### Page and Line Numbers
- Page: 97
- Line Numbers: 83-103

### Structured Content
**Introduction**

Functions allow us to write reusable code that can be easily called and executed in different parts of a program.

**Formal Parameters and Arguments**

- When defining a function, we specify its formal parameters, which are placeholders for values that will be passed to the function when it is called.
- When calling a function, we pass the arguments, which are the actual values that are assigned to the formal parameters.

**Function Body**

- The body of a function contains the statements that are executed when the function is called.
- Once the formal parameters have been assigned values, the function executes the body and performs its task.

### Code Example 1:
```python
def f(x):
    return x ** 2 - 1
```

**Explanation:**
- This function takes one argument, x, and returns the value of x squared minus 1.

### Code Example 2:
```python
if __name__ == '__main__':
    y = f(12)
    print(y)

    y = f(5)
    print(y)
```

**Explanation:**
- This code calls the function f twice, with arguments 12 and 5, and prints the results.

### Flow of Control
- When a function is called, control is transferred to the function's body.
- Once the function body has executed, control is returned to the point in the calling code where the function was called.

### Metadata
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf"
"page_content='84 F unctions
The function returns the calculated
value (143)…
So f(12) has evaluated to 143, and 
the result is assigned to y.
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)
For this example, we print the result, 143.
Prints 143 at the console.
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)
Let’s call the function again, this time with a different argument, 5.
Here we call the function again, 
supplying 5 as an argument.
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 98}","## Functions

### Definition and Usage

**Metadata:**

* **Source:** `C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf`
* **Page:** 98

**Definition:**

A function is a block of code that calculates a value based on one or more inputs and returns that value.

**Usage:**

Functions are defined using the `def` keyword, followed by the function name and a colon. The function's parameters, if any, are enclosed within parentheses after the function name. The function's body, which contains the code that calculates the return value, is indented below the function definition.

**Example:**

```python
def f(x):
    return x ** 2 - 1
```

**Calling a Function:**

Functions are called by their name, followed by the actual arguments enclosed within parentheses. The return value of the function is assigned to a variable or used directly.

**Example:**

```python
y = f(12)
print(y)
```

**Key Points:**

* Functions are reusable blocks of code that can be called multiple times with different arguments.
* Functions provide abstraction by hiding the implementation details from the calling code.
* Functions can be used to decompose large programs into smaller, modular units."
"page_content='A deeper dive into functions 85
When we call the function and pass
the argument 5, x takes on the value
5.
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)
Now, with x = 5, the function evaluates
the expression…
…5 ⨉ 5 - 1
…25 - 1
…24
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)
The function returns the calculated
value (24)…
So f(5) has evaluated to 24, and 
the result is assigned to y.
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 99}","**Metadata**:

* Page Number: 99
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**A Deeper Dive into Functions**

**Function Definition and Syntax**

A function is a named block of code that performs a specific task. It takes input parameters, performs operations, and returns a result.

The general syntax of a function definition in Python is:

```python
def function_name(parameters):
    """"""
    Purpose of the function
    """"""
    # Function body
    return result
```

**Function Invocation**

To use a function, we call it with the appropriate arguments. When we call a function, Python executes the code inside its body.

```python
result = function_name(arguments)
```

**Example**

Consider the following function:

```python
def f(x):
    return x ** 2 - 1
```

This function takes an input x and returns the value of x squared minus 1.

To use this function, we call it with an argument:

```python
y = f(5)
```

In this example, we call the function `f()` with the argument 5. The function evaluates the expression `5 ** 2 - 1` and assigns the result to the variable `y`.

**Function Return Value**

The `return` statement is used to specify the value that a function will return when it completes. The return value can be any type of data, including numbers, strings, lists, and even other functions.

If a function does not explicitly return a value, it will return `None`.

**Example**

The following function returns the square of a number:

```python
def square(x):
    return x ** 2
```

To use this function, we call it with an argument:

```python
result = square(5)
```

In this example, the function `square()` is called with the argument 5. The function returns the value 25, which is assigned to the variable `result`."
"page_content='86 F unctions
Prints 24 at the console.
""""""
Demonstration of a function
""""""
def f(x):
    return x ** 2 - 1
if __name__ == '__main__':
    y = f(12)
    print(y)
 
    y = f(5)
    print(y)
What to pass to a function?
A function call must match thesignature of the function. The signature
of a function is its identifier and formal parameters. When we call a
function, the number of arguments must agree with the number of formal
parameters.8
A function should receive as argumentsal l of the information it needs
to do its work. A function shouldnot depend on variables that exist only
in the outer scope. (In most cases, it’s OK for a function to depend on
a constant defined in the outer scope.)
Here’s an example of how things can go wrong if we write a function
which depends on some variable that exists in the outer scope.
y = 2
def square(x):
return x ** y
print(square(3)) # prints ""9""
y = 3
print(square(3)) # oops! prints ""27""
This is a great way to introduce bugs and cause headaches. Better
that the function should use a value passed in as an argument, or a
value assigned within the body of the function (a local variable), or a
literal. For example, this is OK:
def square(x):
y = 2
return x ** y
8 Again, we’re excluding from consideration functions with optional arguments
or keyword arguments.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 100}","## Functions

### Metadata
 - Page Number: 100
 - Line Number: 86
 - Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

```python
# Python code example
def f(x):
    return x ** 2 - 1
```

### Demonstration of a function

```python
if __name__ == '__main__':
    y = f(12)
    print(y)  # Prints 24 at the console.
    y = f(5)
    print(y)
```

### What to pass to a function?

 - A function call must match the signature of the function. The signature of a function is its identifier and formal parameters. 
 - When we call a function, the number of arguments must agree with the number of formal parameters.
 - A function should receive as arguments all of the information it needs to do its work. 
 - A function should not depend on variables that exist only in the outer scope. (In most cases, it’s OK for a function to depend on a constant defined in the outer scope.)

### Example of how things can go wrong

```python
y = 2
def square(x):
    return x ** y
print(square(3))  # prints ""9""
y = 3
print(square(3))  # oops! prints ""27""
```

**Better approach:**

```python
def square(x):
    y = 2
    return x ** y
```"
"page_content='Passing arguments to a function 87
and this is even better:
def square(x):
return x ** 2
Now, whenever we supply some particular argument, we’ll always get
the same, correct return value.
F unctions should be “black boxes”
In most cases functions should operate likeblack boxes which take some
input (or inputs) and return some output.
We should write functions in such a way that, once written, we don’t
need to keep track of what’s going on within the function in order to use
it correctly. A cardinal rule of programming: functions shouldhide im-
plementation details from the outside world. In fact,information hiding
is considered a fundamental principle of software design.9
For example, let’s say I gave you a function which calculates the
square root of any real number greater than zero. Should you be required
to understand the internal workings of this function in order to use it
correctly? Of course not! Imagine if you had to initialize variables used
internally by this function in order for it to work correctly! That would
make our job as programmers much more complicated and error-prone.
Instead, we write functions that take care of their implementation
details internally, without having to rely on code or the existence of
variables outside the function body.
5.3 Passing arguments to a function
What happens when we pass arguments to a function in Python? When
we call a function and supply an argument, the argument isassigned to
the corresponding formal parameter. For example:
def f(z):
z = z + 1
return z
9 If you’re curious, check out David Parnas’ seminal 1972 article: “On the Criteria
T o Be Used in Decomposing Systems into Modules”, Communications of the ACM,
15(12) ( https://dl.acm.org/doi/pdf/10.1145/361598.361623).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 101}","### Formatting Instructions

1. **Content Structuring:**

   - **Heading:** Passing Arguments to a Function

   - **Subheading:** Passing Arguments to a Function in Python
   - **Subheading:** Functions as Black Boxes

2. **Metadata Inclusion:**

   - **Page Number:** 101
   - **Line Number:** (Not provided)
   - **Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

3. **Code Formatting:**

   - (No code provided)

### Passing Arguments to a Function

#### Passing Arguments to a Function in Python

When passing arguments to a function in Python, the argument is assigned to the corresponding formal parameter.

**Example:**

```
def f(z):
    z = z + 1
    return z
```

#### Functions as Black Boxes

Functions should operate like black boxes, taking input and returning output while hiding implementation details.

**Key Principle:** Information hiding is a fundamental principle of software design.

**Example:** A function that calculates the square root of a number should not require the user to understand its internal workings."
"page_content='88 F unctions
x = 5
y = f(x)
print(x) # prints 5
print(y) # prints 6
When we called this function supplyingx as an argument we assigned
the valuex to z. It is just as if we wrotez = x . This assignment takes
place automatically when we call a function and supply an argument.
If we had two (or more) formal parameters it would be no different.
def add(a, b):
return a + b
x = 1
y = 2
print(add(x, y)) # prints 3
In this example, we have two formal parameters,a and b, so when we
call theadd function we must supply two arguments. Here we supplyx
and y as arguments, so when the function is called Python automatically
makes the assignmentsa = x and b = y.
It would work similarly if we were to supply literals instead of vari-
ables.
print(add(12, 5)) # prints 17
In this example, the assignments that are performed area = 12 and
b = 5.
You may have heard the terms “pass by value” or “pass by reference.”
These don’t really apply to Python.Python always passes arguments by
assignment. Always.
5.4 Scope
Names of formal parameters and any local variables created within a
function have a limited lifetime—they exist only until the function is
done with its work. We refer to this asscope.
The most important thing to understand here is that names of formal
parameters and names of local variables we define within a function have
local scope. They have a lifetime limited to the execution of the function,
and then those names are gone.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 102}","## Functions
**Metadata**
Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
Page: 102

### Parameters and Arguments
- To call a function, we must supply values for its formal parameters.
- These values are called arguments.
- Python automatically assigns the values of the arguments to the formal parameters when the function is called.

### Example with One Parameter
```
def f(x):
    y = x + 1
    return y

x = 5
y = f(x)
print(x) # prints 5
print(y) # prints 6
```
- When `f(x)` is called with argument `x=5`, Python assigns `x` to the formal parameter `z`.
- This is equivalent to writing `z = x`.

### Example with Multiple Parameters
```
def add(a, b):
    return a + b

x = 1
y = 2
print(add(x, y)) # prints 3
```
- Two formal parameters, `a` and `b`, require two arguments.
- When `add(x, y)` is called, Python assigns `x` to `a` and `y` to `b`.
- This is also true for literals as arguments:
```
print(add(12, 5)) # prints 17
```
- Python assigns `12` to `a` and `5` to `b`.

### Scope
- Names of formal parameters and local variables have limited lifetime, known as scope.
- They exist only during the execution of the function.
- Names in the global scope are not affected by changes made inside a function."
"page_content='Scope 89
Here’s a trivial example.
>>> def foo():
... x = 1
... return x
...
>>> y = foo()
>>> y
1
The namex within the functionfoo only exists as long asfoo is being
executed. Oncefoo returns the value ofx, x is no more.
>>> def foo():
... x = 1
... return x
...
>>> y = foo()
>>> y
1
>>> x
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'x' is not defined
So the namex lives only within the execution offoo. In this example,
the scope ofx is limited to the functionfoo.
Shadowing
It is, perhaps, unfortunate that Python allows us to use variable names
withinafunctionthatexistoutsidethefunction.Thisiscalled shadowing,
and it sometimes leads to confusion.
Here’s an example:
>>> def square(x):
... x = x * x
... return x
...
>>> x = 5
>>> y = square(x)
>>> y
25
>>> x
5
What has happened? Didn’t we setx = x * x? Shouldn’tx also be 25?
No. Here we have two different variables with the same name,x. We
have thex in the outer scope, created with the assignmentx = 5. Thex' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 103}","## Scope

### Page 103

Here's a trivial example.

```python
def foo():
    x = 1
    return x
```

```python
y = foo()
```

```python
y
1
```

The name `x` within the function `foo` only exists as long as `foo` is being executed. Once `foo` returns the value of `x`, `x` is no more.

```python
def foo():
    x = 1
    return x
```

```python
y = foo()
```

```python
y
1
```

```python
x
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'x' is not defined
```

So the name `x` lives only within the execution of `foo`. In this example, the scope of `x` is limited to the function `foo`.

### Shadowing

It is, perhaps, unfortunate that Python allows us to use variable names within a function that exist outside the function. This is called shadowing, and it sometimes leads to confusion.

Here's an example:

```python
def square(x):
    x = x * x
    return x
```

```python
x = 5
```

```python
y = square(x)
```

```python
y
25
```

```python
x
5
```

What has happened? Didn't we set `x = x * x`? Shouldn't `x` also be 25?

No. Here we have two different variables with the same name, `x`. We have the `x` in the outer scope, created with the assignment `x = 5`. The `x` in the inner scope, created with the assignment `x = x * x`, shadows the `x` in the outer scope.

This can be confusing, so it's generally best to avoid shadowing."
"page_content='90 F unctions
within the functionsquare is local, within that function. Yes, it has the
same name as thex in the outer scope, but it’s a differentx.
Generally, it’s not a good idea to shadow variable names in a function.
Python allows it, but this is more a matter of style and avoiding confu-
sion. Oftentimes, we rename the variables in our functions, appending
an underscore.
>>> def square(x_):
... x_ = x_ * x_
... return x_
...
>>> x = 5
>>> y = square(x)
>>> y
25
This is one way to avoid shadowing.
Another approach is to give longer, more descriptive names to vari-
ables in the outer scope, and leave the shorter or single-character names
to the function. Which approach is best depends on context.
5.5 Pure and impure functions
So far, all the functions we’ve written arepure. That is, they accept some
argument or arguments, and return a result, behaving like a black box
with no interaction with anything outside the box. Example:
def successor(n):
return n + 1
In this case, there’s an argument, a simple calculation, and the result
is returned. This is pure, in that there’s nothing changed outside the
function and there’s no observable behavior of the function other than
returning the result. This is just like the mathematical function
𝑠(𝑛) = 𝑛 + 1.
Impure functions
Sometimes it’s useful to implement animpure function. An impure func-
tion is one that hasside effects. For example, we might want to write a
function that prompts the user for an input and then returns the result.
def get_price():
while True:
price = float(input(""Enter the asking price ""
""for the item you wish ""
""to sell: $""))
if price > 1.00:
break' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 104}","## Functions

### Variable Scope

Within a function, local variables are limited to that function. They may share the same name as variables in the outer scope, but they are distinct variables. Shadowing variable names within a function is generally discouraged due to potential confusion.

**Example:**

```python
def square(x_):
    x_ = x_ * x_
    return x_

x = 5
y = square(x)
```

In this example, `x_` is local to the `square` function and distinct from the `x` variable in the outer scope.

### Pure and Impure Functions

**Pure Functions:**

Pure functions receive inputs, perform calculations, and return a result without modifying anything outside the function. They behave like a black box with no external interactions.

**Example:**

```python
def successor(n):
    return n + 1
```

The `successor` function takes an argument `n` and returns `n + 1` without any side effects.

**Impure Functions:**

Impure functions have side effects, meaning they modify something outside the function.

**Example:**

```python
def get_price():
    while True:
        price = float(input(""Enter the asking price ""
                            ""for the item you wish ""
                            ""to sell: $""))
        if price > 1.00:
            break
```

The `get_price` function prompts the user for input and stores the result in the `price` variable. This modifies the state of the program outside the function."
"page_content='The math module 91
else:
print(""Price must be greater than $1.00!"")
return price
This is an impure function since it has side effects, the side effects
being the prompts and responses displayed to the user. That is, we can
observe behavior in this function other than its return value. Itdoes
return a value, but it exposes other behaviors as well.
Keep side effects to a minimum
Always, always consider what side effects your functions have, and
whether such side effects are correct and desirable.
As a rule, it’s best to keep side effects to a minimum (eliminating
them entirely if possible). But sometimes it is appropriate to rely on side
effects. Just make sure that if you are relying on side effects, that it is
correct and by design, and not due to a defect in programming. That is,
if you write a function with side effects, it should be becauseyou choose
to do so and you understand how side effects may or may not change the
state of your program . It should always be a conscious choice and never
inadvertent, otherwise you may introduce bugs into your program. For
example, if you inadvertently mutate a mutable object, you may change
the state of your program in ways you have not anticipated, and your
program may exhibit unexpected and undesirable behaviors.
We will take this topic up again, when we get to mutable data types
like list and dict in Chapters 10 and 16.
Comprehension check
1. Write an impure function which produces a side effect, but returns
None.
2. Write a pure function which performs a simple calculation and
returns the result.
5.6 The math module
We’ve seen that Python provides us with quite a few conveniences “right
out of the box.” Among these arebuilt-in functions, that we as program-
mers can use—and reuse—in our code with little effort. For example,
print(), and there are many others.
We’ve also learned about how to define constants in Python. For ex-
ample, Newton’s gravitational constant:
G = 6.67 * 10 ** -11 # N m^2 / kg^2
Here we’ll learn a little about Python’smath module. The Pythonmath
module is a collection of constants and functions that you can use in your
own programs—and these are very, very convenient. For example, why' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 105}","## Formatting Instructions

### Content Structuring
- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

### Metadata Inclusion
- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

### Code Formatting
- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

```python
# Python code example
print(""Hello, World!"")
```

### Tabular Differences (if applicable)
- Provide differences in tabular format if possible.

### Examples
- Include examples clearly if provided.

### Content

**Side Effects**

**Pure Functions vs Impure Functions**

**Pure Functions**

- Do not have side effects
- Only return a value
- Example: `def add_numbers(a, b): return a + b`

**Impure Functions**

- Have side effects
- May perform I/O operations or modify global variables
- Example: `def print_message(message): print(message)`

**Consequences of Side Effects**

- Can lead to unexpected behavior
- Can make debugging difficult
- Can make it hard to reason about the code

**Mitigating Side Effects**

- Minimize side effects whenever possible
- Use side effects intentionally and consciously
- Document side effects clearly

**Comprehension Check**

1. Write an impure function which produces a side effect, but returns None.

```python
def print_message(message):
    print(message)
    return None
```

2. Write a pure function which performs a simple calculation and returns the result.

```python
def add_numbers(a, b):
    return a + b
```

**The math module**

The Python `math` module provides a collection of constants and functions for mathematical operations.

**Constants**

- `pi`: The value of π
- `e`: The base of the natural logarithm

**Functions**

- `sqrt(x)`: Square root of a number
- `sin(x)`: Sine of an angle in radians
- `cos(x)`: Cosine of an angle in radians

**Example**

```python
import math

# Calculate the area of a circle
radius = 5
area = math.pi * radius ** 2
print(""Area of the circle:"", area)
```"
"page_content='92 F unctions
write your own function to find the principal square root of a number
when Python can do it for you?10
Unlike built-in functions, in order to use functions (and constants)
provided by the Pythonmath module, we must firstimport the module
(or portions thereof).11 You can think of this as importing features you
need into your program.
Python’smath module is rich with features. It provides many functions
including
function calculation
sqrt(x)
√𝑥
exp(x) 𝑒𝑥
log(x) ln𝑥
log2(x) log2 𝑥
sin(x) sin𝑥
cos(x) cos𝑥
and many others.
Using the math module
To import a module, we use theimport keyword. Imports should appear
in your code immediately after the starting docstring, and you only need
to import a module once. If the import is successful, then the imported
module becomes available.
>>> import math
Now what? Say we’d like to use thesqrt() function provided by the
math module. How do we access it?
If we want to access functions (or constants) within themath module
we use the. operator.
>>> import math
>>> math.sqrt(25)
5.0
Let’s unpack this. Within themath module, there’s a function named
sqrt(). Writingmath.sqrt() is accessing thesqrt() function within the
math module. This uses what is calleddot notation in Python (and many
other languages use this as well).
Let’s try another function in themath module, sin(), which calculates
the sine of an angle. You may remember from pre-calculus or trigonome-
try course that sin0 = 0, sin𝜋
2 = 1, sin𝜋 = 0, sin3𝜋
2 = −1, and sin2𝜋 = 0.
Let’s try this out.
10 The only reasonable answer to this question is “for pedagogical purposes”, and
in fact, later on, we’ll do just that—write our own function to find the principal
square root of a number. But let’s set that aside for now.
11 W e’re going to ignore the possibility of importing portions of a module for now.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 106}","**Metadata**

Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf 
Page: 106

**Functions**

**Importing Modules**

* To use functions provided by the Python `math` module, we must first import the module.
* Import statements should appear immediately after the starting docstring.
* You only need to import a module once.

**Accessing Functions in a Module**

* To access functions within a module, use the dot operator (.):

```python
import math

# Access sqrt() function from the math module
math.sqrt(25)
```

**Common Functions in the math Module**

* sqrt(x): Principal square root of x
* exp(x): e^x
* log(x): Natural logarithm of x (ln x)
* log2(x): Logarithm of x base 2 (log2 x)
* sin(x): Sine of x
* cos(x): Cosine of x

**Example**

* Calculate the sine of an angle:

```python
import math

angle = math.pi / 2
sine = math.sin(angle)
print(sine)  # Output: 1.0
```"
"page_content='Exceptions 93
>>> import math
>>> PI = 3.14159
>>> math.sin(0)
0.0
So far, so good.
>>> math.sin(PI / 2)
0.999999998926914
That’s close, but not quite right. What went wrong? (Hint: Repre-
sentation error isnot the problem.) Our approximation of𝜋 (defined as
PI = 3.14159 , above) isn’t of suﬀicient precision. Fortunately, themath
module includes high-precision constants for𝜋 and 𝑒.
>>> math.sin(math.pi / 2)
1.0
Much better.
It is left to the reader to test other arguments to thesin() function.
math module documentation
As noted, themath module has many ready-made functions you can use.
For more information, see themath module documentation.
• https://docs.python.org/3/library/math.html.
5.7 Exceptions
IndentationError
In Python, unlike many other languages, indentation is syntactically sig-
nificant. We’ve seen when defining a function that the body of the func-
tion must be indented (we’ll see other uses of indentation soon).
An exception of type IndentationError is raised if Python dis-
agrees with your use of indentation—typically if indentation is expected
and your code isn’t, or if a portion of your code is over-indented.
IndentationError is a more specific type ofSyntaxError.
When you encounter an indentation error, you should inspect your
code and correct the indentation.
Here’s an example:
>>> def square(n):
... return n * n
File ""<stdin>"", line 2
return n * n
^
IndentationError: expected an indented block after function
definition on line 1' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 107}","**Formatting Instructions:**

1. **Content Structuring:**
   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**
   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**
   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

   Example:
   ```python
   # Python code example
   print(""Hello, World!"")
   ```

4. **Give differences in tabular format if possible.**
5. **Include examples clearly if provided.**
6. **Do not generate any content by yourself, just format provided content. Also, keep answers in brief. Do not cut short. Give exact the same length content as provided.**
   - If the content is of 1000 words, give all 1000 words. Do not cut short. Strictly follow this rule. No content should be modified. Give the exact same length content as provided.

**Example:**

**Input:**

```
Exceptions 93
>>> import math
>>> PI = 3.14159
>>> math.sin(0)
0.0
So far, so good.
>>> math.sin(PI / 2)
0.999999998926914
That’s close, but not quite right. What went wrong? (Hint: Repre-
sentation error isnot the problem.) Our approximation of𝜋 (defined as
PI = 3.14159 , above) isn’t of suﬀicient precision. Fortunately, themath
module includes high-precision constants for𝜋 and 𝑒.
>>> math.sin(math.pi / 2)
1.0
Much better.
It is left to the reader to test other arguments to thesin() function.
math module documentation
As noted, themath module has many ready-made functions you can use.
For more information, see themath module documentation.
• https://docs.python.org/3/library/math.html.
5.7 Exceptions
IndentationError
In Python, unlike many other languages, indentation is syntactically sig-
nificant. We’ve seen when defining a function that the body of the func-
tion must be indented (we’ll see other uses of indentation soon).
An exception of type IndentationError is raised if Python dis-
agrees with your use of indentation—typically if indentation is expected
and your code isn’t, or if a portion of your code is over-indented.
IndentationError is a more specific type ofSyntaxError.
When you encounter an indentation error, you should inspect your
code and correct the indentation.
Here’s an example:
>>> def square(n):
... return n * n
File ""<stdin>"", line 2
return n * n
^
IndentationError: expected an indented block after function
definition on line 1'
```

**Output:**

**Metadata:**

* Page Number: 107
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Content:**

## Exceptions

### IndentationError

In Python, unlike many other languages, indentation is syntactically significant. We've seen when defining a function that the body of the function must be indented (we'll see other uses of indentation soon).

An exception of type IndentationError is raised if Python disagrees with your use of indentation—typically if indentation is expected and your code isn't, or if a portion of your code is over-indented. IndentationError is a more specific type of SyntaxError.

When you encounter an indentation error, you should inspect your code and correct the indentation.

Here's an example:

```python
>>> def square(n):
... return n * n
File ""<stdin>"", line 2
return n * n
^
IndentationError: expected an indented block after function
definition on line 1'
```"
"page_content='94 F unctions
>>> def square(n):
... return n * n # now it's correctly indented!
...
>>> square(4)
16
ValueError
A ValueError is raised when thetype of an argument or operand is valid,
but thevalue is somehow unsuitable. We’ve seen how to import themath
module and how to usemath.sqrt() to calculate the square root of some
number. However, math.sqrt() does not accept negative operands (it
doesn’t know about complex numbers), and so, if you supply a negative
operand tomath.sqrt() a ValueError is raised.
Example:
>>> import math
>>> math.sqrt(4) # this is A-OK
2.0
>>> math.sqrt(-1)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: math domain error
In a case like this, you need to ensure that the argument or operand
which is causing the problem has a suitable value.
ModuleNotFoundError
We encounter ModuleNotFoundError if we try to import a module that
doesn’t exist, that Python can’t find, or if we misspell the name of a
module.
Example:
>>> import maath
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ModuleNotFoundError: No module named 'maath'' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 108}","## Errors and Exceptions

### ValueError

A ValueError is raised when the type of an argument or operand is valid, but the value is somehow unsuitable. For example, calling math.sqrt() with a negative argument results in a ValueError.

```python
import math
math.sqrt(-1)
# Traceback (most recent call last):
# File ""<stdin>"", line 1, in <module>
# ValueError: math domain error
```

### ModuleNotFoundError

We encounter ModuleNotFoundError if we try to import a module that doesn't exist, that Python can't find, or if we misspell the name of a module.

```python
import maath
# Traceback (most recent call last):
# File ""<stdin>"", line 1, in <module>
# ModuleNotFoundError: No module named 'maath'
```"
"page_content='Exercises 95
5.8 Exercises
Exercise 01
Identify the formal parameter(s) in each of the following functions.
a.
def add_one(n):
n = n + 1
return n
b.
def power(x, y):
return x ** y
Exercise 02
There’s something wrong with each of these function definitions. Identify
the problem and suggest a fix.
a. Function to cube any real number.
def cube:
return x ** 3
b. Function to print someone’s name.
def say_hello():
print(name)
c. Function to calculate𝑥2 + 3𝑥 − 1 for any real valued𝑥.
def poly(x):
return x ** 2 + 3 * x - 1
d. Function which takes some number,𝑥, subtracts 1, and returns the
result.
def subtract_one(x):
y = x - 1
Exercise 03
Write a function which takes any arbitrary string as an argument and
prints the string to the console.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 109}","## Exercises

### Formatting Instructions:

1. **Content Structuring:**
   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**
   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**
   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

   Example:
   ```python
   # Python code example
   print(""Hello, World!"")
   
4.give difference in tabular format if possible 
5.include examples clearly if provided   
6.do not generate any content by your self just format privided content also keep answers in breif do not cut short it just put it full content as it is without changing any thing
if content is of 1000 words give all 1000 words do not cut short it stirictly follow this rule no content or should be modified give exact same length content as provided
content=page_content='Exercises 95
5.8 Exercises
Exercise 01
Identify the formal parameter(s) in each of the following functions.
a.
def add_one(n):
n = n + 1
return n
b.
def power(x, y):
return x ** y
Exercise 02
There’s something wrong with each of these function definitions. Identify
the problem and suggest a fix.
a. Function to cube any real number.
def cube:
return x ** 3
b. Function to print someone’s name.
def say_hello():
print(name)
c. Function to calculate𝑥2 + 3𝑥 − 1 for any real valued𝑥.
def poly(x):
return x ** 2 + 3 * x - 1
d. Function which takes some number,𝑥, subtracts 1, and returns the
result.
def subtract_one(x):
y = x - 1
Exercise 03
Write a function which takes any arbitrary string as an argument and
prints the string to the console.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 109}

## Exercises
### Exercise 01: Identifying Formal Parameters
- **Function:** def add_one(n):
  - **Formal Parameter(s):** n

- **Function:** def power(x, y):
  - **Formal Parameter(s):** x, y

### Exercise 02: Fixing Function Definitions
- **Function:** def cube:
  - **Problem:** Missing parameter
  - **Fix:** def cube(x):

- **Function:** def say_hello():
  - **Problem:** Missing argument to print
  - **Fix:** def say_hello(name):

- **Function:** def poly(x):
  - **Problem:** Incorrect power for first term
  - **Fix:** def poly(x): return x**2 + 3*x - 1

- **Function:** def subtract_one(x):
  - **Problem:** Missing return statement
  - **Fix:** def subtract_one(x): return x - 1

### Exercise 03: Writing a Function to Print a String
```python
def print_string(s):
  """"""Prints the string s to the console.""""""
  print(s)
```"
"page_content='96 F unctions
Exercise 04
Write a function which takes two numeric arguments (float or int) and
returns their product.
Exercise 05
a. Writeafunctionwhichtakeanintegerasanargumentandreturns 0
if the integer is even and1 if the integer is odd. Hint: The remainder
(modulo) operator, %, calculates the remainder when performing
integer division. For example,17 % 5 yields 2, because 5 goes into
17 three times, leaving a remainder of two.
b. What did you name your function and why?
Exercise 06
Write a function which takes two numeric arguments, one named
subtotal and the other namedtax_rate, and calculates andreturns the
total including tax. For example, if the arguments supplied were114.0
for subtotal and 0.05 for tax_rate, your function should return the value
119.7. If the arguments were328.0 and 0.045, your function should re-
turn the value342.76.
This function should produce no side effects.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 110}","# Content Formatting

**Section 1: Exercise 04**

**Product of Two Numbers:**
Write a function that takes two numeric arguments (float or int) and returns their product.

**Metadata:**
- Page Number: 110
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Section 2: Exercise 05**

**Even or Odd:**

a. **Instructions:** Write a function that takes an integer as an argument and returns 0 if the integer is even and 1 if the integer is odd.

b. **Function Name and Rationale:** The function is named **is_odd** because it determines whether the input integer is odd or not.

**Metadata:**
- Page Number: 110
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Section 3: Exercise 06**

**Calculate Total with Tax:**

**Instructions:** Write a function that takes two numeric arguments, one named subtotal and the other named tax_rate, and calculates and returns the total including tax.

**Examples:**

- subtotal = 114.0, tax_rate = 0.05 -> total = 119.7
- subtotal = 328.0, tax_rate = 0.045 -> total = 342.76

**Metadata:**
- Page Number: 110
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf"
"page_content='Chapter 6
Style
Programs must be written for people to read, and only
incidentally for machines to execute.
–Abelson, Sussman, and Sussman
Learn the rules so you know how to break them.
–The 14th Dalai Lama
This chapter will introduce the concept of good Python style through
the use of the PEP 8 style guide. We’ll further our understanding of
constants, learn about the benefits of using comments, and how/when
to use them effectively.
Learning objectives
• You will learn about the importance of good Python style and the
PEP 8 style guide.
• You will learn conventions for naming constants.
• You will learn about comments and docstrings in Python and their
uses.
T erms introduced
• camelCase
• docstring
• inline comment
• PEP 8
• single-line comment
• snake_case
6.1 The importance of style
As we learn to write programs, we will also learn how to use good style.
Good coding style is more important than many beginners realize. Using
97' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 111}","**Chapter 6: Style**

**Metadata:**
* Page: 111
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**6.1 The Importance of Style**

As we learn to write programs, we will also learn how to use good style. Good coding style is more important than many beginners realize. Using good style helps to make our programs:

* **More readable:** Code that is easy to read is easier to understand and debug.
* **More maintainable:** Code that is easy to maintain is easier to update and extend.
* **More reusable:** Code that is easy to reuse is more likely to be used by other programmers.

**6.2 PEP 8: A Style Guide for Python Code**

The Python community has developed a style guide called PEP 8 to help programmers write code that is consistent and easy to read. PEP 8 covers a wide range of topics, including:

* Naming conventions
* Indentation
* Line length
* Comments

**6.3 Naming Conventions**

PEP 8 recommends using the following naming conventions:

* **Variables and functions:** Use lowercase letters and underscores to separate words. For example: `my_variable`, `my_function`
* **Constants:** Use uppercase letters and underscores to separate words. For example: `MY_CONSTANT`
* **Classes:** Use uppercase letters to form words, with no underscores. For example: `MyClass`

**6.4 Indentation**

PEP 8 recommends using four spaces for indentation. Indentation should be used to indicate blocks of code, such as loops and functions. For example:

```python
for i in range(10):
    print(i)
```

**6.5 Line Length**

PEP 8 recommends keeping lines to a length of 79 characters or less. This makes it easier to read code on a single line. If a line is too long, it can be broken up using parentheses or brackets. For example:

```python
my_long_variable_name = (
    ""This is a very long variable name that needs to be broken up""
)
```

**6.6 Comments**

Comments are used to explain code to other programmers. Comments should be clear and concise, and they should be used to explain the purpose of the code, not the details of how it works.

There are two types of comments in Python:

* **Single-line comments:** Single-line comments start with a hash (#) and end at the end of the line. For example:

```python
# This is a single-line comment
```

* **Multi-line comments:** Multi-line comments start with three double quotes ("""""") and end with three double quotes. For example:

```python
""""""
This is a multi-line comment
""""""
```

**Docstrings**

Docstrings are special comments that are used to document functions, classes, and modules. Docstrings provide information about the purpose of the code, its parameters, and its return value. Docstrings are written using the same syntax as multi-line comments, but they start with three single quotes (''') instead of three double quotes. For example:

```python
def my_function(x, y):
    """"""
    This function returns the sum of two numbers.

    Parameters:
        x: The first number.
        y: The second number.

    Returns:
        The sum of x and y.
    """"""
```

**6.7 Examples**

Here are some examples of good Python style:

```python
# This is a single-line comment
""""""
This is a multi-line comment
""""""

def my_function(x, y):
    """"""
    This function returns the sum of two numbers.

    Parameters:
        x: The first number.
        y: The second number.

    Returns:
        The sum of x and y.
    """"""

    return x + y

# This is a main function
if __name__ == ""__main__"":
    x = 1
    y = 2
    result = my_function(x, y)
    print(result)
```"
"page_content='98 Style
good style:
• helps you read your code more quickly and accurately.
• makes it easier to identify syntax errors and common bugs.
• helps clarify your reasoning about your code.
Most workplaces and open-source projects require conformance to a
coding standard. For example,Google’s style guide for Python .1
When we’re solving problems we don’t want reading code or making
decisions about formatting our code to consume more than their share
of valuable cognitive load. So start off on the right foot and use good
style from the beginning. That way, you can free your brain to solve
problems—that’s the fun part.
Every language has its conventions, and you should stick to them.
This is part of writing readable, idiomatic code.
6.2 PEP 8
Fortunately, there is a long-standing, comprehensive style guide for
Python called PEP 8.
2 The entire style guide PEP 8 – Style Guide
for Python Code is available online3 . Noted Python developer Kenneth
Reitz has made a somewhat prettified version athttps://pep8.org/. You
should consult these resources for a complete guide to good style for
Python. Many projects in industry and in the open source world enforce
the use of this standard.
Don’t think in terms of saving keystrokes—follow the style guide, and
you’ll find this helps you (and others!) read and understand what you
write.
6.3 Whitespace
Yes! Whitespace is important! Using whitespace correctly can make your
code much more readable.
Use whitespace between operators and after commas.4 Example:
# Don't do this
x=3.4*y+9-17/2
joules=(kg*m**2)/(sec**2)
amount=priceperitem*items
Instead, do this:
1 https://google.github.io/styleguide/pyguide.html
2 PEP is short for Python Enhancement Proposal
3 https://peps.python.org/pep- 0008/
4 One exception to this rule is keyword arguments in function calls, for example,
the end keyword argument for the built-in print() function.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 112}","**Formatting Instructions:**

### 1. Content Structuring:

- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

### 2. Metadata Inclusion:

- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

### 3. Code Formatting:

- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

Example:
```python
# Python code example
print(""Hello, World!"")
```

### 4. Give difference in tabular format if possible

### 5. Include examples clearly if provided

### 6. Do not generate any content by yourself just format provided content

**Without changing any content, here is the formatted document:**

## Good Style in Programming

### Importance of Good Style

- **Enhanced readability and accuracy:** Quick and accurate code comprehension.
- **Simplified error identification:** Easier detection of syntax errors and common bugs.
- **Improved reasoning:** Clearer understanding of code logic.

### Coding Standards and PEP 8

- **Coding standards:** Guidelines for consistent code formatting, ensuring readability and compliance.
- **PEP 8:** Comprehensive style guide for Python, widely used in industry and open source projects.
- **Benefits of using PEP 8:** Reduced cognitive load, improved code comprehension, and adherence to best practices.

### Whitespace Utilization

- **Importance of whitespace:** Improves code readability.
- **Whitespace usage guidelines:**

  | Feature | Example |
  |---|---|
  | Between operators | `x = 3.4 * y + 9 - 17 / 2` |
  | After commas | `joules = (kg * m**2) / (sec**2)` |

- **Exception:** Keyword arguments in function calls, e.g., `end` in `print()`."
"page_content='Whitespace 99
# Better
x = 3.4 * y + 9 - 17 / 2
joules = (kg * m ** 2) / (sec ** 2)
amount = price_per_item * items
Without the whitespace between operators, your eye and brain have to
do much more work to divide these up for reading.
Sometimes, however, extra whitespace is unnecessary or may even hin-
der readability. You should avoid unnecessary whitespace before closing
and after opening braces, brackets or parentheses.
# Don't do this
picas = inches_to_picas ( inches )
# Better
picas = inches_to_picas(inches)
Do not put whitespace after names of functions.
# Don't do this
def inches_to_points (in):
return in * POINTS_PER_INCH
# Better
def inches_to_points(in):
return in * POINTS_PER_INCH
In doing this, we create a tight visual association between the name of
a function and its parameters.
Do not put whitespace before commas or colons.
# Don't do this
lst = [3 , 2 , 1]
# Better
lst = [3, 2, 1]
It’s OK to slip a blank line within a block of code to logically separate
elements but don’t use more than one blank line. Exceptions to this are
function declarations which should be preceded by two blank lines, and
function bodies which should be followed by two blank lines.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 113}","## Whitespace

### Better

```
x = 3.4 * y + 9 - 17 / 2
joules = (kg * m ** 2) / (sec ** 2)
amount = price_per_item * items
```

Without the whitespace between operators, your eye and brain have to do much more work to divide these up for reading.

### Unnecessary Whitespace

Sometimes, however, extra whitespace is unnecessary or may even hinder readability. You should avoid unnecessary whitespace before closing and after opening braces, brackets, or parentheses.

```
# Don't do this
picas = inches_to_picas(inches)
# Better
picas = inches_to_picas(inches)
```

Do not put whitespace after names of functions.

```
# Don't do this
def inches_to_points(in):
return in * POINTS_PER_INCH
# Better
def inches_to_points(in):
return in * POINTS_PER_INCH
```

In doing this, we create a tight visual association between the name of a function and its parameters.

Do not put whitespace before commas or colons.

```
# Don't do this
lst = [3, 2, 1]
# Better
lst = [3, 2, 1]
```

It’s OK to slip a blank line within a block of code to logically separate elements, but don’t use more than one blank line. Exceptions to this are function declarations which should be preceded by two blank lines, and function bodies which should be followed by two blank lines."
"page_content='100 Style
6.4 Names (identifiers)
Choosinggoodnamesiscrucialinproducingreadablecode.Usemeaning-
ful names when defining variables, constants, and functions. This makes
your code easier to read and easier to debug!
Examples of good variable names:
• velocity
• average_score
• watts
Examples of bad variable names:
• q
• m7
• rsolln
Compare these with the good names (above). With a good name, you
know what the variable represents. With these bad names, who knows
what they mean? (Seriously, what the heck isrsolln?)
There are some particularly bad names that should be avoided no
matter what. Never use the letter ”O” (upper or lower case) or ”l” (low-
ercase ”L”) or ”I” (upper case ”i”) as a variable name. “O” and “o” look
too much like “0”. “l” and “I” look too much like “1”.
While single letter variable names are, in general, to be avoided, it’s
OK sometimes (depending on context). For example, it’s common prac-
tice to usei, j, etc. for loop indices (we’ll get to loops later) andx, y, z
for spatial coordinates, but only use such short names when it is 100%
clear from context what these represent.
Similar rules apply to functions. Examples of bad function names:
• i2m()
• sd()
Examples of good function names:
• inches_to_meters()
• standard_deviation()
ALL_CAPS, lowercase, snake_case, camelCase,
W ordCaps
In Python, the convention for naming variables and function is that they
shoulduselowercaseorso-called snake case,inwhichwordsareseparated
by underscores.
In some other languages,camelCase (with capital letters in the mid-
dle) or W ordCaps(where each word is capitalized) are the norm. Not
so with Python.camelCase should be avoided (always).W ordCapsare
appropriate for class names (a feature of object-oriented programming—
something that’s not presented in this text).
• Good: price_per_item
• Bad: Priceperitem or pricePerItem
As noted earlier, ALL_CAPS is reserved for constants.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 114}","## Formatting

### Section 1: Choosing Good Names for Identifiers

#### 1.1 Importance of Meaningful Names

Choosing good names for identifiers (such as variables, constants, and functions) is crucial for producing readable and easy-to-debug code. Meaningful names describe the purpose and contents of these identifiers, making them easier to understand.

#### 1.2 Examples of Good and Bad Names

**Good Examples:**

* `velocity`
* `average_score`
* `watts`

**Bad Examples:**

* `q`
* `m7`
* `rsolln`

The good examples clearly indicate their purpose, while the bad examples are vague and difficult to understand.

#### 1.3 Tips for Avoiding Bad Names

Avoid using the letters ""O"" (both upper and lowercase), ""l"" (lowercase ""L""), and ""I"" (uppercase ""i"") for variable names, as they can be easily confused with ""0"" and ""1"".

While single-letter variable names should generally be avoided, they can be acceptable for loop indices (e.g., `i`, `j`) or spatial coordinates (e.g., `x`, `y`, `z`) if their purpose is clear from context.

#### 1.4 Naming Conventions in Python

* Variables and functions should use lowercase or snake case (words separated by underscores).
* CamelCase (with capital letters in the middle) and WordCaps (each word capitalized) are not typically used in Python.
* Class names should use WordCaps.

**Good Example:**

* `price_per_item`

**Bad Examples:**

* `Priceperitem`
* `pricePerItem`

**ALL_CAPS:** Reserved for constants."
"page_content='Line length 101
6.5 Line length
PEP 8 suggests that lines should not exceed 79 characters in length.
There are several reasons why this is a good practice.
• It makes it feasible to print source code on paper or to view without
truncation on various source code hosting websites (for example,
GitHub, GitLab,etc.).
• It accommodates viewports (editor windows,etc.) of varying width
(don’t forget you may be collaborating with others).
• Even if you have a wide monitor, and can fit long lines in your view-
port, long linesslow your reading down . This is well documented.
If your eye has to scan too great a distance to find the beginning
of the next line, readability suffers.
Throughout this text, you may notice some techniques used to keep
line length in code samples within these bounds.
6.6 Constants
In most programming languages there’s a convention for naming con-
stants. Python is no different—and the convention is quite similar to
many other languages.
In Python, we use ALL_CAPS for constant names, with underscores
to separate words if necessary. Here are some examples:
# Physical constants
C = 299792458 # speed of light: meters / second ** -1
MASS_ELECTRON = 9.1093837015 * 10 ** -31 # mass in kg
# Mathematical constants
PI = 3.1415926535 # pi
PHI = 1.6180339887 # phi (golden ratio)
# Unit conversions
FEET_PER_METER = 3.280839895
KM_PER_NAUTICAL_MILES = 1.852
# Other constants
EGGS_PER_CARTON = 12
Unlike Java, there is nofinal keyword, which tells the compiler that a
constant must not be changed (same for other languages like C++ or
Rust which have aconst keyword).
What prevents a user from changing a constant? In Python, nothing.
All the more reason to make it immediately clear—visually—that we’re
dealing with a constant.
So the rule in Python is to use ALL_CAPS for constants and noth-
ing else. Then it’s up to you, the programmer, to ensure these remain
unchanged.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 115}","## Line Length

### 6.5 Line Length

PEP 8 suggests that lines should not exceed 79 characters in length. This practice is beneficial for the following reasons:

- **Feasibility:** It enables printing source code on paper or viewing it without truncation on various source code hosting websites (e.g., GitHub, GitLab).
- **Accommodation:** It accommodates viewports (editor windows, etc.) of varying widths.
- **Readability:** Long lines hinder reading speed, as the eye must scan a greater distance to locate the beginning of the next line.

### 6.6 Constants

In most programming languages, a naming convention exists for constants. In Python, constants are named using ALL_CAPS, with underscores separating words if necessary. Examples include:

- **Physical constants:**
  - `C = 299792458` (speed of light in meters per second)
  - `MASS_ELECTRON = 9.1093837015 * 10 ** -31` (mass in kg)
- **Mathematical constants:**
  - `PI = 3.1415926535` (pi)
  - `PHI = 1.6180339887` (golden ratio)
- **Unit conversions:**
  - `FEET_PER_METER = 3.280839895`
  - `KM_PER_NAUTICAL_MILES = 1.852`
- **Other constants:**
  - `EGGS_PER_CARTON = 12`

Unlike in Java, Python does not have a `final` keyword to enforce immutability of constants. However, it is a good practice to clearly indicate constants using ALL_CAPS, as it serves as a visual cue for programmers to refrain from altering their values."
"page_content='102 Style
6.7 Comments in code
Virtually all programming languages allow programmers to add com-
ments to their code, and Python is no different. Comments are text
within your code which is ignored by the Python interpreter.
Comments have many uses:
• explanations as to why a portion of code was written the way it
was,
• reminders to the programmer, and
• guideposts for others who might read your code.
Comments are an essential part of your code. In fact, it’s helpful to
think of your comments as you do your code. By that, I mean thatthe
comments you supply should be of value to the reader—even if that reader
is you.
Some folks say that code should explainhow, and comments should
explain why. This is not always the case, but it’s a very good rule in
general. But beware: good comments cannot make up for opaque or
poorly-written code.
Python also has what are calleddocstrings. While these are not ig-
noredbythePythoninterpreter,it’sOKforthepurposesofthistextbook
to think of them that way.
Docstrings are used for:
• providing identifying information,
• indicating the purpose and correct use of your code, and
• providing detailed information about the inputs to and output from
functions.
That said, here are some forms and guidelines for comments and doc-
strings.
Inline and single-line comments
The simplest comment is aninline or single-line comment. Python uses
the # (call it what you will—pound sign, hash sign, number sign, or
octothorpe) to start a comment. Everything following the# on the same
line will be ignored by the Python interpreter. Here are some examples:
# This is a single-line comment
foo = 'bar' # This is an inline comment
Docstrings
Docstring is short fordocumentation string. These are somewhat different
from comments. According to PEP 257
Adocstring is a string literal that occurs as the first statement
in a module, function, class, or method definition.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 116}","### Metadata

- Page: 116
- Line Numbers: 102
- Source: ""An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf""

### 6.7 Comments in code

Virtually all programming languages allow programmers to add comments to their code, and Python is no different. Comments are text within your code which is ignored by the Python interpreter.
Comments have many uses:
• explanations as to why a portion of code was written the way it was,
• reminders to the programmer, and
• guideposts for others who might read your code.
Comments are an essential part of your code. In fact, it’s helpful to
think of your comments as you do your code. By that, I mean that the
comments you supply should be of value to the reader—even if that reader
is you.
Some folks say that code should explain how, and comments should
explain why. This is not always the case, but it’s a very good rule in
general. But beware: good comments cannot make up for opaque or
poorly-written code.
Python also has what are called docstrings. While these are not ignored by the Python interpreter, it’s OK for the purposes of this textbook
to think of them that way.
Docstrings are used for:
• providing identifying information,
• indicating the purpose and correct use of your code, and
• providing detailed information about the inputs to and output from
functions.
That said, here are some forms and guidelines for comments and doc-
strings.
Inline and single-line comments
The simplest comment is an inline or single-line comment. Python uses
the # (call it what you will—pound sign, hash sign, number sign, or
octothorpe) to start a comment. Everything following the # on the same
line will be ignored by the Python interpreter. Here are some examples:
# This is a single-line comment
foo = 'bar' # This is an inline comment
Docstrings
Docstring is short for documentation string. These are somewhat different
from comments. According to PEP 257 ""A docstring is a string literal that occurs as the first statement
in a module, function, class, or method definition."""
"page_content='Comments in code 103
Docstrings are not ignored by the Python interpreter, but for the
purposes of this textbook you may think of them that way. Docstrings
are delimited with triple quotation marks. Docstrings may be single lines,
thus:
def square(n):
""""""Return the square of n.""""""
return n * n
or they may span multiple lines:
""""""
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210, section Z
Homework 5
""""""
It’s a good idea to include a docstring in every program file to explain
who you are and what your code is intended to do.
""""""
Distance converter
J. Jones
This is a simple program that
converts miles to kilometers.
We use the constant KM_PER_MILE
= 1.60934 for these calculations.
""""""
Using comments as scaffolding
You may find it helpful to use comments asscaffolding for your code.
This involves using temporary comments that serve as placeholders or
outlines of your program. In computer science, a description of steps
written in plain language embedded in code is known aspseudocode.
For example, if one were asked to write a program that prompts the
user for two integers and then prints out the sum, one might sketch
this out with comments, and then replace the comments with code. For
example:
# Get first integer from user
# Get second integer from user
# Calculate the sum
# Display the result
and then, implementing the code one line at a time:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 117}","## Comments in Code

### Docstrings

Docstrings are not ignored by the Python interpreter, but for the
purposes of this textbook you may think of them that way. Docstrings
are delimited with triple quotation marks. Docstrings may be single lines,
thus:

```python
def square(n):
""""""Return the square of n.""""""
return n * n
```

or they may span multiple lines:

```
""""""
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210, section Z
Homework 5
""""""
It’s a good idea to include a docstring in every program file to explain
who you are and what your code is intended to do.
""""""
Distance converter
J. Jones
This is a simple program that
converts miles to kilometers.
We use the constant KM_PER_MILE
= 1.60934 for these calculations.
""""""
```

### Using Comments as Scaffolding

You may find it helpful to use comments asscaffolding for your code.
This involves using temporary comments that serve as placeholders or
outlines of your program. In computer science, a description of steps
written in plain language embedded in code is known aspseudocode.
For example, if one were asked to write a program that prompts the
user for two integers and then prints out the sum, one might sketch
this out with comments, and then replace the comments with code. For
example:

```
# Get first integer from user
# Get second integer from user
# Calculate the sum
# Display the result
```

and then, implementing the code one line at a time:

```python
num1 = int(input(""Enter first integer: ""))
num2 = int(input(""Enter second integer: ""))
sum = num1 + num2
print(""The sum of"", num1, ""and"", num2, ""is"", sum)
```"
"page_content='104 Style
a = int(input('Please enter an integer: '))
# Get second integer from user
# Calculate the sum
# Display the result
a = int(input('Please enter an integer: '))
b = int(input('Please enter another integer: '))
# Calculate the sum
# Display the result
a = int(input('Please enter an integer: '))
b = int(input('Please enter another integer: '))
result = a + b
# Display the result
a = int(input('Please enter an integer: '))
b = int(input('Please enter another integer: '))
result = a + b
print(f'The sum of the two numbers is {result}')
This approach allows you to design your program initially without fuss-
ing with syntax or implementation details, and then, once you have the
outline sketched out in comments, you can focus on the details one step
at a time.
TODOs and reminders
While you are writing code it’s often helpful to leave notes for yourself
(or others working on the same code).TODO is commonly used to indicate
a part of your code which has been left unfinished. Many IDEs recognize
TODOand can automatically generate a list of unfinished to-do items.
A void over-commenting
While it is good practice to include comments in your code, well-written
code often does not require much by way of comments. Accordingly, it’s
important not to over-comment your code. Here are some examples of
over-commenting:
song.set_tempo(120) # set tempo to 120 beats / minute NO!
x = x + 1 # add one to x NO!
# I wrote this code before I had any coffee NO!' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 118}","## Code Formatting and Content Structuring

### Code Syntax Highlighting
```python
a = int(input('Please enter an integer: '))
# Get second integer from user
# Calculate the sum
# Display the result
a = int(input('Please enter an integer: '))
b = int(input('Please enter another integer: '))
# Calculate the sum
# Display the result
a = int(input('Please enter an integer: '))
b = int(input('Please enter another integer: '))
result = a + b
# Display the result
a = int(input('Please enter an integer: '))
b = int(input('Please enter another integer: '))
result = a + b
print(f'The sum of the two numbers is {result}')
```
### Commented Code
```python
# TODOs and reminders
# While you are writing code it’s often helpful to leave notes for yourself
# (or others working on the same code).TODO is commonly used to indicate
# a part of your code which has been left unfinished. Many IDEs recognize
# TODOand can automatically generate a list of unfinished to-do items.
```

### Over-Commenting
- song.set_tempo(120) # set tempo to 120 beats / minute NO!
- x = x + 1 # add one to x NO!
- # I wrote this code before I had any coffee NO!"
"page_content='Exercises 105
Ĺ Note
It is often the case that code from textbooks or presented in lec-
tures is over-commented. This is for pedagogical purposes and
should be understood as such.
6.8 Exercises
Exercise 01
Here are some awful identifiers. Replace them with better ones.
# Newton's gravitational constant, G
MY_CONSTANT = 6.674E-11
# Circumference of a circle
circle = rad ** 2 * math.pi
# Clock arithmetic
# Calculate 17 hours after 7 o'clock
thisIsHowWeDoItInJava = (7 + 17) % 12
Exercise 02
The following Python code runs perfectly fine but deviates from the PEP
8 style guide. Using your chosen IDE, fix the issues and check to make
sure that the program still runs correctly.
def CIRCUMFERENCEOFCIRCLE(radius):
c=2*pi*radius
return c
pi=3.14159
CIRC=CIRCUMFERENCEOFCIRCLE(22)
print(""The circumference of a circle with a radius of 22cm""
""is ""+str(CIRC)+ ""cm."")' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 119}","## Exercises

### Exercise 01

| **Awful Identifier** | **Better Identifier** |
|---|---|
| `MY_CONSTANT` | `GRAVITATIONAL_CONSTANT` |
| `circle` | `CIRCUMFERENCE` |
| `thisIsHowWeDoItInJava` | `CLOCK_ARITHMETIC` |

**Example:**

```python
GRAVITATIONAL_CONSTANT = 6.674E-11
CIRCUMFERENCE = rad ** 2 * math.pi
CLOCK_ARITHMETIC = (7 + 17) % 12
```

### Exercise 02

```python
import math

def circumference_of_circle(radius):
    c = 2 * math.pi * radius
    return c

pi = 3.14159
circumference = circumference_of_circle(22)

print(""The circumference of a circle with a radius of 22cm is"",
      str(circumference), ""cm."")
```"
"page_content='Chapter 7
Console I/O
So far, we’ve provided all the values for our functions in our code. Things
get a lot more interesting when the user can provide such values.
In this chapter, we’ll learn how to get input from the user and use it
in our calculations. We’ll also learn how to format the output displayed
to the user.
We call getting and displaying data this way asconsole I/O (“I/O”
is just short for input/output).
We’ll also learn how to use Python’sf-strings (short for formatted
string literals) to format output. For example, we can use f-strings with
format specifiers to display floating point numbers to a specific number
of digits to the right of the decimal place. With f-strings we can align
strings for displaying data in tabular format.
Á Warning
In this text, we will use f-strings exclusively for formatting out-
put. Beware! There’s a lot of stale information out there on the
internet showing how to format strings in Python. For example,
you may see the so-calledprintf-style (inherited from the C pro-
gramming language), or thestr.format() method. These alternate
methods have their occasional uses, but for general purpose string
formatting, your default should be to use f-strings.
Learning objectives
• You will learn how to prompt the user for input, and handle input
from the user, converting it to an appropriate type if necessary.
• You will learn how to format strings using f-strings and interpola-
tion.
• You will learn how to use format specifiers within f-strings.
• You will write programs which receive user input, and produce
output based on that input, often performing calculations.
107' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 121}","# Chapter 7: Console I/O

**Console I/O**

- Getting input from the user and using it in calculations
- Formatting output displayed to the user
- Getting and displaying data as console I/O (""I/O"" is short for input/output)

**Using Python's f-strings**

- Formatted string literals
- Used to format output
- Can use format specifiers to display floating point numbers to a specific number of digits to the right of the decimal place
- Can align strings for displaying data in tabular format

**Warning**

- Use f-strings exclusively for formatting output
- Avoid using printf-style or str.format() method for string formatting

**Learning Objectives**

- Prompt the user for input
- Handle input from the user, converting it to an appropriate type if necessary
- Format strings using f-strings and interpolation
- Use format specifiers within f-strings
- Write programs which receive user input and produce output based on that input, often performing calculations"
"page_content='108 Console I/O
T erms and built-in functions introduced
• command line interface (CLI)
• console
• constructor (int(), float(), andstr())
• f-string
• format specifier
• graphical user interface (GUI)
• I/O (input/output)
• input()
• string interpolation
7.1 Motivation
It’s often the case that as we are writing code, we don’t have all the in-
formation we need for our program to produce the desired result. For
example, imagine you were asked to write a calculator program. No
doubt, such a program would be expected to add, subtract, multiply,
and divide. Butwhat should it add?What should it multiply? You, as
the programmer, would not know in advance. Thus, you’d need a way to
get information from the userinto the program.
Of course, there are many ways to get input from a user. The most
common, perhaps, is via a graphical user interface or GUI. Most, or
likely all, of the software you use on your laptop, desktop, tablet, or
phone makes use of a GUI.
In this chapter, we’ll see how to get input in the most simple way,
without having to construct a GUI. Here we’ll introduce getting user
input from the console. Later, in Chapter 13, we’ll learn how to read
data from an external file.
7.2 Command line interface
We’ve seen how to use the Python shell, where we type expressions or
other Python code and it’s executed interactively.
What we’ll learn now is how to write what are calledCLI programs.
That’s short forcommand line interface . This distinguishes them from
GUI or graphical user interface programs.
When we interact with a CLI program, we run it from the command
line (or within your IDE) and we enter data and view program output
in text format. We often refer to this interaction as taking place within
theconsole. The console is just a window where we receive text prompts,
and reply by typing at the keyboard.
This has a similar feel to the Python shell: prompt then reply, prompt
then reply.
7.3 The input() function
Python makes it relatively easy to get input from the console, using the
built-in function input(). The input() function takes a single, optional' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 122}","**Formatting Instructions:**

1. **Content Structuring:**

   - **Section 1: Introduction**
   - **Section 2: Command Line Interface (CLI)**
   - **Section 3: The input() Function**
   - **Section 4: Examples**

2. **Metadata Inclusion:**

   - **Page Number:** 122
   - **Source:** An Introduction to Programming and Computer Science with Python, Clayton Cafiero

3. **Code Formatting:**

   - Code examples are not provided in the given content.

4. **Table Differences:**

   - No tables are provided in the given content.

5. **Examples:**

   - Examples are not provided in the given content.

**Formatted Output:**

**Section 1: Introduction**

Console I/O

**Terms and Built-in Functions Introduced:**

- Command Line Interface (CLI)
- Console
- Constructor (int(), float(), and str())
- F-string
- Format Specifier
- Graphical User Interface (GUI)
- I/O (Input/Output)
- input()
- String Interpolation

**7.1 Motivation**

When writing code, it is often necessary to obtain information from the user in order to produce the desired result. Traditional methods involve using a GUI, but in this chapter, we will introduce a simpler method of obtaining user input from the console. In Chapter 13, we will learn how to read data from external files.

**Section 2: Command Line Interface (CLI)**

CLI programs are distinguished from GUI programs by the way in which they interact with the user. CLI programs are run from the command line (or within an IDE) and require the user to enter data and view program output in text format. This interaction takes place within the console, a window where the user receives text prompts and replies by typing at the keyboard.

**Section 3: The input() Function**

Python provides a built-in function called input() to retrieve input from the console. The input() function takes a single, optional string argument that is displayed as a prompt to the user. The user's input is returned as a string.

**Syntax:**

```python
input(prompt)
```

**Example:**

```python
name = input(""Enter your name: "")
```"
"page_content='The input() function 109
parameter—a string—which, if supplied, is used as a prompt displayed
to the user.
Here’s a quick example at the Python shell:
>>> input(""What is your name? "")
What is your name? Sir Robin of Camelot
'Sir Robin of Camelot'
>>> input(""What is your favorite color? "")
What is your favorite color? Blue
'Blue'
>>> input(""What is the capital of Assyria? "")
What is the capital of Assyria? I don't know that!
""I don't know that!""
input() takes a string as an argument. This string is displayed as a
prompt to the user, like “How old are you?” or “How many cookies would
you like to bake?” or “How long are your skis (in cm)?” After displaying
a prompt,input() waits for the user to enter something at the keyboard.
When the user hits the return key,input() returns what the user typed
as a string.
Again, here’s an example in the Python shell—notice we’re going to
store the value returned by theinput() function using a variable.
>>> users_name = input(""What is your name? "")
What is your name? Sir Robin of Camelot
>>> users_name
'Sir Robin of Camelot'
Try this out on your own in the Python shell.
Here’s what just happened. On the first line (above) we called
the input() function and supplied the string argument “What is your
name? ”. Then, on the second line,input() does its work. It prints “What
is your name?” and then waits for the user to type their response. In this
case, the user has typed “Sir Robin of Camelot”. When the user hits the
enter/return key, theinput() function returns what the user typed (be-
fore hitting enter/return) as a string. In this example, the string returned
byinput() is assigned the nameusers_name. On the third line, we enter
the expressionusers_name and Python obliges by printing the associated
value: “Sir Robin of Camelot”.
Here’s a short program that prompts the user for their name and their
quest, and just echoes back what the user has typed:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 123}","### Input() Function

**Metadata:**
- Page Number: 123
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

#### Description
The `input()` function takes an optional parameter—a string—which, if supplied, is used as a prompt displayed to the user.

#### Example
```python
>>> input(""What is your name? "")
What is your name? Sir Robin of Camelot
'Sir Robin of Camelot'
```

#### How it Works
`input()` takes a string as an argument. This string is displayed as a prompt to the user, such as ""How old are you?"" or ""How many cookies would you like to bake?"" or ""How long are your skis (in cm)?"" After displaying a prompt, `input()` waits for the user to enter something at the keyboard. When the user hits the return key, `input()` returns what the user typed as a string.

#### Storing User Input
```python
>>> users_name = input(""What is your name? "")
What is your name? Sir Robin of Camelot
>>> users_name
'Sir Robin of Camelot'
```"
"page_content='110 Console I/O
""""""Prompts the user for their name and quest
and prints the results. """"""
name = input('What is your name? ')
quest = input('What is your quest? ')
print(name)
print(quest)
Try it out. Copy this code, paste it into an editor window in your
text editor or IDE, and save the file asname_and_quest.py. Then run the
program. When run, the program first will prompt the user with ‘What
is your name? ’ and then it will assign the value returned byinput() to
the variablename. Then it will prompt for the user’s quest and handle
the result similarly, assigning the result to the variablequest. Once the
program has gathered the information it needs, it prints the name and
quest that the user provided.
A session for this might look like this:
What is your name? Galahad
What is your quest? To seek the Holy Grail!
Galahad
To seek the Holy Grail!
Notice that in order to use the strings returned byinput() we assigned
them to variables. Again, remember that theinput() function returns a
string.
That’s pretty convenient, when what we want are strings, but some-
times we want numeric data, so we’ll also learn how to convert strings
to numeric data (where possible) with the functionsint() and float().
7.4 Converting strings to numeric types
The problem
Here’s an example which illustrates a problem we encounter when trying
to get numeric input from the user—theinput() function always returns
a string and we can’t do math with strings.
""""""
Prompts the user for weight in kilograms
and converts to (US customary) pounds.
""""""
POUNDS_PER_KILOGRAM = 2.204623
def kg_to_pounds(kg_):
return kg_ * POUNDS_PER_KILOGRAM' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 124}","## Content Formatting

**Page:** 124
**Source:** C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### 110 Console I/O

**110.1 Name and Quest**

**Code:**
```python
name = input('What is your name? ')
quest = input('What is your quest? ')
print(name)
print(quest)
```

**Example:**
```
What is your name? Galahad
What is your quest? To seek the Holy Grail!
Galahad
To seek the Holy Grail!
```

### 110.2 Converting Strings to Numeric Types

**7.4.1 The Problem**

**Code:**
```python
POUNDS_PER_KILOGRAM = 2.204623

def kg_to_pounds(kg_):
    return kg_ * POUNDS_PER_KILOGRAM
```"
"page_content='Converting strings to numeric types 111
kg = input(""Enter the weight in kilograms (kg): "")
lbs = kg_to_pounds(kg)
print(lbs)
If we save this code to file and try running it, it will fail when trying
to convert kilograms to pounds. We’ll get the message:
TypeError: can't multiply sequence by non-int of type 'float'
What happened? When the program gets input from the user:
kg = input(""Enter the weight in kilograms (kg): "")
the value returned from theinput() function is a string. The value re-
turned from theinput() function isalways a string. Say the user enters
“82” at the prompt. Then what gets saved with the namekg is thestring
'82' not the number82 and we can’t multiply a string by a floating point
number—that makes no sense!
Happily, there’s an easy fix. Python provides built-in functions that
can be used to convert strings to numeric types (if possible). These are
the integerconstructor, int(), and the floatconstructor, float(). These
functions can take a string whichlooks like it ought to be convertible
to a number, performs the conversion, and returns the corresponding
numeric type.
Let’s try these out in the Python shell:
>>> int('82')
82
>>> float('82')
82.0
In the first instance, we convert the string'82' to an int. In the
second instance, we convert the string'82' to afloat.
What happens if we try to convert a string like'82.5'? This works
when converting to afloat, but does not work when converting to an
int.
>>> float('82.5') # this works OK
82.5
>>> int('82.5')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: invalid literal for int() with base 10: '82.5'
The error message is telling us that the string'82.5' cannot be con-
verted to anint.
Now, returning to the problem at hand—converting user input to a
floating point number—here’s how we fix the code we started with.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 125}","## Formatting Instructions:

1. **Content Structuring:**

   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**

   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**

   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

       Example:
       ```python
       # Python code example
       print(""Hello, World!"")
       
    4.give difference in tabular format if possible 
    5.include examples clearly if provided   
    6.do not generate any content by your self just format privided content also keep answers in breif do not cut short it just put it full content as it is without changing any thing
    if content is of 1000 words give all 1000 words do not cut short it stirictly follow this rule no content or should be modified give exact same length content as provided
    content=page_content='Converting strings to numeric types 111
## Converting Strings to Numeric Types 

### The problem

The below code will fail when attempting to convert kilograms to pounds:

```python
kg = input(""Enter the weight in kilograms (kg): "")
lbs = kg_to_pounds(kg)
print(lbs)
```

When the program receives input from the user, the `input()` function always returns a string. If the user enters ""82"" at the prompt, the variable `kg` will be assigned the string '82', not the number 82. Attempting to multiply a string by a floating point number will result in a `TypeError`.

### The solution

Python provides built-in functions that can be used to convert strings to numeric types if possible: the `int()` constructor and the `float()` constructor. These functions take a string that appears to be convertible to a number, perform the conversion, and return the corresponding numeric type.

To fix the issue in the code, we can convert the user input to a floating point number using the `float()` constructor:

```python
kg = float(input(""Enter the weight in kilograms (kg): ""))
lbs = kg_to_pounds(kg)
print(lbs)
```

### Converting to `int` vs. `float`

The `int()` constructor converts a string to an integer, while the `float()` constructor converts a string to a floating point number. The `int()` constructor will raise a `ValueError` if the string cannot be converted to an integer, while the `float()` constructor will raise a `ValueError` if the string cannot be converted to a floating point number.

For example:

```python
int('82') # returns 82
int('82.5') # raises a ValueError
float('82') # returns 82.0
float('82.5') # returns 82.5
```

### Conclusion

Converting strings to numeric types is a common task in programming. Python provides built-in functions that make this task easy and straightforward. The `int()` and `float()` constructors can be used to convert strings to integers and floating point numbers, respectively.

## Metadata

- **Source**: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- **Page**: 125"
"page_content='112 Console I/O
""""""
Prompts the user for weight in kilograms
and converts to (US customary) pounds.
""""""
POUNDS_PER_KILOGRAM = 2.204623
def kg_to_pounds(kg_):
return kg_ * POUNDS_PER_KILOGRAM
kg = float(input(""Enter the weight in kilograms (kg): ""))
lbs = kg_to_pounds(kg)
print(lbs)
Notice that we wrapped the call toinput() within a call to thefloat
constructor. This expression is evaluated from the inside out (as you
might suspect). First the call toinput() displays the prompt provided,
waits for input, then returns a string. The value returned (say,'82.5') is
then passed to thefloat constructor as an argument. Thefloat construc-
tor does its work and the constructor returns a floating point number,
82.5. Now, when we pass this value to the functionkg_to_pounds(), ev-
erything works just fine.
If you’ve seen mathematical functions before this is no different from
something like
𝑓 (𝑔(𝑥))
where we would first calculate𝑔(𝑥) and then apply𝑓 to the result.
Another scenario with a nasty bug
Consider this program which has a nasty bug:
""""""This program has a bug!
It does not add as you might expect. """"""
a = input(""Enter an integer: "")
b = input(""Enter another integer: "")
print(a + b)
Can you see what the bug is?
Imagine what would happen if at the first prompt the user typed “42”
and at the second prompt the user typed “10”. Of course, 42 plus 10
equals 52, but is that what this program would print?
No. Here’s a trial run of this program:
Enter an integer: 42
Enter another integer: 10
4210' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 126}","### Content

**Section 1: Unit Conversion**

**Metadata**

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 126

**1.1: Weight Conversion Program**

```python
# Python code example
POUNDS_PER_KILOGRAM = 2.204623

def kg_to_pounds(kg_):
    return kg_ * POUNDS_PER_KILOGRAM

kg = float(input(""Enter the weight in kilograms (kg): ""))
lbs = kg_to_pounds(kg)
print(lbs)
```

**Section 2: Input Processing**

**2.1: Input Conversion**

- Notice that the call to input() is wrapped within a call to the float constructor.
- This ensures that the user input, which is initially a string, is converted to a floating-point number.

**2.2: Bug in Input Handling**

```python
# Buggy code example
a = input(""Enter an integer: "")
b = input(""Enter another integer: "")
print(a + b)
```

- This program has a bug because it treats user input as strings and concatenates them instead of adding them as numbers.
- If the user inputs ""42"" and ""10"", the program will print ""4210"" instead of 52."
"page_content='Converting strings to numeric types 113
“4210” is not the correct result! What happened?
Remember, input() always returns astring, so in the program above,
a is a string andb is a string. Thus, when we perform the operationa +
b it’s not addition, it’sstring concatenation!
What do we do in cases like this? In order to perform arithmetic with
user-supplied values frominput(), we first need to convert input strings
to numeric types (as above).
""""""This program fixes the bug in the earlier program.""""""
a = input(""Enter an integer: "")
b = input(""Enter another integer: "")
a = int(a)
b = int(b)
print(a + b)
We can make this a little more concise:
""""""Prompt the user for two integers and display the sum.""""""
a = int(input(""Enter an integer: ""))
b = int(input(""Enter another integer: ""))
print(a + b)
Conversion may fail
While the code samples above work fine if the user follows instructions
and enters numeric strings that can be converted to integers, users don’t
always read instructions and they aren’t always well-behaved. For exam-
ple, if a misbehaved user were to enter values that cannot be converted
to integers, we might see a session like this:
Enter an integer: cheese
Enter another integer: bananas
Traceback (most recent call last):
File ""/myfiles/addition_fixed.py"", line 5, in <module>
a = int(a)
ValueError: invalid literal for int() with base 10: 'cheese'
Process finished with exit code 1
This occurs because 'cheese' cannot be converted to an int. In
this case, Python reports aValueError and indicates the invalid literal
'cheese'. We’ll see how to handle problems like this later on in Chapter
15.
input() does not validate input
It’s important to note thatinput() does not validate the user’s input .' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 127}","## Converting Strings to Numeric Types

### Introduction

""4210"" is not the correct result! What happened?

Remember, `input()` always returns a string, so in the program above, `a` is a string and `b` is a string. Thus, when we perform the operation `a + b`, it's not addition, it's string concatenation!

### Converting Strings to Numeric Types

What do we do in cases like this? In order to perform arithmetic with user-supplied values from `input()`, we first need to convert input strings to numeric types (as above).

```python
""""""This program fixes the bug in the earlier program.""""""
a = input(""Enter an integer: "")
b = input(""Enter another integer: "")
a = int(a)
b = int(b)
print(a + b)
```

We can make this a little more concise:

```python
""""""Prompt the user for two integers and display the sum.""""""
a = int(input(""Enter an integer: ""))
b = int(input(""Enter another integer: ""))
print(a + b)
```

### Conversion May Fail

While the code samples above work fine if the user follows instructions and enters numeric strings that can be converted to integers, users don't always read instructions and they aren't always well-behaved. For example, if a misbehaved user were to enter values that cannot be converted to integers, we might see a session like this:

```
Enter an integer: cheese
Enter another integer: bananas
Traceback (most recent call last):
  File ""/myfiles/addition_fixed.py"", line 5, in <module>
    a = int(a)
ValueError: invalid literal for int() with base 10: 'cheese'
Process finished with exit code 1
```

This occurs because 'cheese' cannot be converted to an int. In this case, Python reports a `ValueError` and indicates the invalid literal 'cheese'. We'll see how to handle problems like this later on in Chapter 15.

### Input() Does Not Validate Input

It's important to note that `input()` does not validate the user's input."
"page_content='114 Console I/O
V alidationis a process whereby we check to ensure that input from a
user or some other source meets certain criteria. That’s abig topic we’ll
touch on later, but for now, just keep in mind that the user can type just
about anything at a prompt andinput() will return whatever the user
typed—without checking anything.
So a different session with the same program (above) might be
What is your name? -1
-1
Be warned.
Don’t use names that collide with names of built-in
Python functions!
As noted,input, int, andfloat are names of built-in Python functions.
It’sveryimportantthatyoudonotusesuchnamesasnamesforyourown
functions or variables. In doing so, for example, you’d be reassigning the
name input, and thus theinput() function would no longer be accessible.
For example, this
input = input('What is your name? ')
print(input) # so far, so good -- prints what the user typed
input = input('What is your quest? ')
print(input)
fails miserably, with
Traceback (most recent call last):
File "".../3.10/lib/python3.10/code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
TypeError: 'str' object is not callable
What happened? We assigned the result to an object namedinput,
so after the first line (above) is executed,input no longer refers to the
function, but instead is now a string (hence the error message “‘str’
object is not callable”).
So be careful to choose good names and avoid collisions with built-ins.
Additional resources
The documentation for any programming language can be a bit technical.
But it can’t hurt to take a look at the documentation forinput(), int(),
and float(). If it makes your head spin, just navigate away and move on.
But maybe the documentation can deepen your understanding of these
functions. See relevant sections of:
• https://docs.python.org/3/library/functions.html' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 128}","**Content Formatting**

**Page 128**

**Section 1: Console I/O**

**Validation**

* Validation is a process to ensure that input from a user or other source meets specified criteria.

**Using the input() Function**

* input() returns whatever the user types at a prompt without any checking.

**Example:**

```code
# A program asking for the user's name
name = input(""What is your name? "")
print(name)
```

**Potential Input Issues**

* Users can enter invalid or unexpected input, which can lead to errors.

**Example:**

```text
What is your name? -1
-1
Be warned.
```

**Avoiding Name Collisions with Built-in Functions**

* Built-in Python functions, such as input, int, and float, cannot be used as names for variables or functions.
* Assigning a built-in function name to a variable reassigns the name, causing the built-in function to be inaccessible.

**Example:**

```code
# Incorrect usage
input = input('What is your name? ')
print(input)

# Correct usage
username = input('What is your name? ')
print(username)
```

**Additional Resources**

* Documentation for input(), int(), and float():
    * https://docs.python.org/3/library/functions.html"
"page_content='Some ways to format output 115
7.5 Some ways to format output
Say we want to write a program which prompts a user for some number
and calculates the square of that number. Here’s a program that does
just that:
""""""A program to square a number provided by the user
and display the result. """"""
x = input(""Enter a number: "")
x = float(x)
result = x * x
print(result)
That’s fine, but perhaps we could make this more friendly. Let’s say we
wanted to print the result like this.
17.0 squared is 289.0
How would we go about it? There are a few ways. One somewhat clunky
approach would be to use string concatenation. Now, we cannot do this:
""""""A program to square a number provided by the user
and display the result. """"""
x = input(""Enter a number: "")
x = float(x)
result = x * x
print(x + ' squared is ' + result)
This program fails, with the error:
Traceback (most recent call last):
File "".../squared_with_concatenation.py"", line 4, in <module>
print(x + ' squared is ' + result)
TypeError: unsupported operand type(s) for +: 'float' and 'str'
Why? Because we cannot concatenate floats and strings. One way to fix
this would be to explicitly convert the floating-point values to strings.
We can do this—explicitly—by using Python’s built-in functionstr().
""""""A program to square a number provided by the user
and display the result. """"""
x = input(""Enter a number: "")
x = float(x)
result = x * x
print(str(x) + ' squared is ' + str(result))
Now, this works. Here’s a trial.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 129}","**Formatting Output**

## Methods

### String Concatenation

**Example:**

```python
print(x + ' squared is ' + result)
```

**Error:**

```
TypeError: unsupported operand type(s) for +: 'float' and 'str'
```

**Fix:**

Convert floating-point values to strings using `str()`.

```python
print(str(x) + ' squared is ' + str(result))
```

### String Formatting

**Example:**

```python
print(""%s squared is %s"" % (x, result))
```

**Note:** The `%` operator is used for string formatting in Python 2.

**Output:**

```
17.0 squared is 289.0
```

### `f`-Strings

**Example:**

```python
print(f""{x} squared is {result}"")
```

**Output:**

```
17.0 squared is 289.0
```

**Note:** `f`-strings are available in Python 3.6 and later.

## Differences

| Method | Pros | Cons |
|---|---|---|
| String Concatenation | Simple | Requires explicit type conversion |
| String Formatting | More versatile than string concatenation | Less readable than `f`-strings |
| `f`-Strings | Most readable and convenient | Only available in Python 3.6 and later |"
"page_content='116 Console I/O
Enter a number: 17
17.0 squared is 289.0
Again, this works, but it’s not a particularly elegant solution. If you were
to think “there must be a better way” you’d be right!
7.6 Python f-strings and string interpolation
The approach described above is valid Python, but there’s a better way.
Earlier versions of Python offered a form ofstring interpolation borrowed
from the C programming language and the stringformat() function (nei-
ther of which are presented here). These are still available, but are largely
superseded. With Python 3.6 camef-strings.1
f-strings provide an improved approach to string interpolation. They
are, essentially, template strings with placeholders for values we wish to
interpolate into the string.
An f-string is prefixed with the letterf, thus:
f'I am an f-string, albeit a boring one.'
The prefix tells the Python interpreter that this is an f-string.
Within the f-string, we can include names of objects or expressions
we wish to interpolate within curly braces (these are calledreplacement
fields). For example,
>>> name = 'Carol'
>>> f'My name is {name}.'
My name is Carol.
>>> favorite_number = 498
>>> f'My favorite number is {favorite_number}.'
My favorite number is 498.
>>> f'My favorite number is {400 + 90 + 8}.'
My favorite number is 498.
Here’s how we’d solve our earlier problem above using f-strings.
""""""A program to square a number provided by the user
and display the result. """"""
x = input(""Enter a number: "")
x = float(x)
result = x * x
print(f'{x} squared is {result}')
1 “F-string” is short for “formatted string literal” . These were introduced in
Python 3.6. F or details, see the Input and Output section of the oﬀicial Python
tutorial ( https://docs.python.org/3/tutorial/inputoutput.html#formatted- string-
literals ), and PEP 498 ( https://peps.python.org/pep- 0498/ ) for a complete ratio-
nale behind literal string interpolation.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 130}","## Formatting Instructions

### Content Structuring

- Identifying key sections and organizing them under appropriate headings and subheadings.
- Ensuring logical flow and clarity in the content.

### Metadata Inclusion

- Including all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicating the metadata at the beginning or in relevant sections.

### Code Formatting

- Providing code with proper syntax highlighting and enclosing it within triple backticks.
- Mentioning the programming language before the triple backticks.

### Tabular Format

- Providing differences in tabular format, if possible.

### Examples

- Including examples clearly if provided.

### Content Length

- Formatting the content with the same length as provided, without modifying any content.

## Formatted Document

### Console I/O

**Enter a number: 17**
17.0 squared is 289.0

This approach works, but it's not an elegant solution. If you were to think ""there must be a better way,"" you'd be right!

### Python f-strings and String Interpolation

The approach described above is valid Python, but there's a better way. Earlier versions of Python offered a form of string interpolation borrowed from the C programming language and the stringformat() function (neither of which are presented here). These are still available but largely superseded. With Python 3.6 came f-strings.

f-strings provide an improved approach to string interpolation. They are, essentially, template strings with placeholders for values we wish to interpolate into the string. An f-string is prefixed with the letter f, thus:

```python
f'I am an f-string, albeit a boring one.'
```

The prefix tells the Python interpreter that this is an f-string. Within the f-string, we can include names of objects or expressions we wish to interpolate within curly braces (these are called replacement fields). For example:

```python
>>> name = 'Carol'
>>> f'My name is {name}.'
My name is Carol.
>>> favorite_number = 498
>>> f'My favorite number is {favorite_number}.'
My favorite number is 498.
>>> f'My favorite number is {400 + 90 + 8}.'
My favorite number is 498.
```

Here's how to solve the earlier problem using f-strings:

```python
""""""A program to square a number provided by the user
and display the result. """"""
x = input(""Enter a number: "")
x = float(x)
result = x * x
print(f'{x} squared is {result}')
```

## Metadata

- **Source**: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- **Page**: 130"
"page_content='F ormat specifiers 117
7.7 F ormat specifiers
Let’s say the result of some calculation was 1/3. The decimal expansion
of this is 0.333… Let’s print this.
>>> 1 / 3
0.3333333333333333
Now, in this example, it’s unlikely that you’d need or want to display
0.3333333333333333 to quite so many decimal places. Usually, it suﬀices
to print fewer digits to the right of the decimal point, for example, 0.33
or 0.3333. If we were to interpolate this value within an f-string, we’d
get a similar result.
>>> x = 1 / 3
>>> f'{x}'
'0.3333333333333333'
Fortunately, we can tell Python how many decimal places we wish to
use. We can include aformat specifier within our f-string.
>>> x = 1 / 3
>>> f'{x:.2f}'
'0.33'
The syntax for this is to follow the interpolated element with a colon
: and then a specifier for the desired format. In the example above, we
used .2f meaning “display as a floating-point number to two decimal
places precision”. Notice what happens here:
>>> x = 2 / 3
>>> f'{x:.2f}'
'0.67'
Python has taken care of rounding for us, rounding the value
0.6666666666666666 to two decimal places. Unless you have very spe-
cific reasons not to do so, you should use f-strings for formatting output.
There are many format specifiers we can use. Here are a few:
F ormat a floating-point number as a percentage.
>>> x = 2 / 3
>>> f'{x:.2%}'
'66.67%'' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 131}","# Heading: Format Specifiers

## Subheading: Format Specifiers

**Metadata:**

* Page Number: 131
* Source: ""C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf""

### Subheading: Floating-Point Number Formatting

Python supports formatting floating-point numbers using format specifiers within f-strings.

#### Syntax:

```
{variable_name:.precision_specifierf}
```

#### Example:

```python
x = 1 / 3
print(f'{x:.2f}')  # Output: ""0.33""
```

#### Format Specifiers:

| Specifier | Description |
|---|---|
| `.2f` | Floating-point number with 2 decimal places |
| `.2%` | Percentage with 2 decimal places |

**Note:** Python automatically rounds values to the specified number of decimal places."
"page_content='118 Console I/O
F ormat an integer with comma-separated thousands
>>> x = 1234567890
>>> f'{x:,}'
'1,234,567,890'
F ormat a floating-point number with comma-separated
thousands
>>> gdp = 22996100000000 # USA gross domestic product
>>> population = 331893745 # USA population, 2021 est.
>>> gdp_per_capita = gdp / population
>>> f'${gdp_per_capita:,.2f}'
'$69,287.54'
7.8 Scientific notation
Using E as a format specifier will result innormalized scientific notation.
>>> x = 1234567890
>>> f""{x:.4E}""
'1.2346E+09'
7.9 F ormatting tables
It’s not uncommon that we wish to print data or results of calculations
in tabular form. For this, we need to be able to specifywidth of a field
or column, and thealignment of a field or column. For example, say we
wanted to print a table like this:2
GDP Population GDP per
Country ($ billion) (million) capita ($)
-----------------------------------------------------
Chad 11.780 16.818 700
Chile 317.059 19.768 16,039
China 17,734.063 1,412.600 12,554
Colombia 314.323 51.049 6,157
We’d want to left-align the “Country” column, and right-align num-
bers (numbers, in almost all cases should be right-aligned, and if the dec-
imal point is displayed, all decimal points should be aligned vertically).
Let’s see how to do that with f-strings and format specifiers. We’ll start
with the column headings.
2 Sources: 2021 GDP from W orld Bank ( https://data.worldbank.org/ ); 2021
population from the United Nations ( https://www.un.org/development/desa/pd/).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 132}","### Console I/O

#### Formatting Integers

- Format an integer with comma-separated thousands:

```
    >>> x = 1234567890
    >>> f'{x:,}'
    '1,234,567,890'
```

#### Formatting Floating-Point Numbers

- Format a floating-point number with comma-separated thousands:

```
    >>> gdp = 22996100000000 # USA gross domestic product
    >>> population = 331893745 # USA population, 2021 est.
    >>> gdp_per_capita = gdp / population
    >>> f'${gdp_per_capita:,.2f}'
    '$69,287.54'
```

#### 7.8 Scientific Notation

- Using E as a format specifier will result in normalized scientific notation:

```
    >>> x = 1234567890
    >>> f""{x:.4E}""
    '1.2346E+09'
```

#### 7.9 Formatting Tables

- Left-align text and right-align numbers:

```
    >>> gdp = [
        [""Chad"", 11.780, 16.818, 700],
        [""Chile"", 317.059, 19.768, 16039],
        [""China"", 17734.063, 1412.600, 12554],
        [""Colombia"", 314.323, 51.049, 6157],
    ]
    >>> for country, gdp_value, population, gdp_per_capita in gdp:
    ...     print(f""{country:20} {gdp_value:,.2f} {population:,.0f} {gdp_per_capita:,.0f}"")
    ...
    Chad                11.78  16,818,000    700
    Chile               317.06  19,768,000  16,039
    China             17,734.06 1,412,600,000 12,554
    Colombia            314.32  51,049,000    6,157
```
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 132}"
"page_content='F ormatting tables 119
print(f'{"""":<12}'
f'{""GDP"":>16}'
f'{""Population"":>16}'
f'{""GDP per"":>16}')
print(f'{""Country"":<12}'
f'{""($ billion)"":>16}'
f'{""(million)"":>16}'
f'{""capita ($)"":>16}')
This would have been a little long as two single lines, so it’s been split
into multiple lines.3 This prints the column headings:
GDP Population GDP per
Country ($ billion) (million) capita ($)
< is used for left-alignment (it points left).> is used for right-alignment
(it points right). The numbers in the format specifiers (above) designate
the width of the field (or column), so the country column is 12 characters
wide, GDP column is 16 characters wide,etc.
Now let’s see about a horizontal rule, dividing the column headings
from the data. For that we can use repeated concatenation.
print('-' * 60) # prints 60 hyphens
So now we have
print(f'{"""":<12}'
f'{""GDP"":>16}'
f'{""Population"":>16}'
f'{""GDP per"":>16}')
print(f'{""Country"":<12}'
f'{""($ billion)"":>16}'
f'{""(million)"":>16}'
f'{""capita ($)"":>16}')
print('-' * 60)
which prints:
GDP Population GDP per
Country ($ billion) (million) capita ($)
-----------------------------------------------------
Now we need to handle the data. Let’s say we have the data in this
form:
3 This takes advantage of the fact that when Python sees two strings without an
operator between them it will concatenate them automatically . Don’t do this just to
save keystrokes. It’s best to reserve this feature for handling long lines or building
long strings across multiple lines.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 133}","## Formatting Tables

### Formatting Options

| Feature | Format Specifier | Example |
|---|---|---|
| Left alignment | `<` | `{"""":<12}` |
| Right alignment | `>` | `{""GDP"":>16}` |
| Column width | `width` | `{""GDP"":>16}` |
| Print horizontal line | `'-' * width` | `print('-' * 60)` |

### Code Example

```python
print(f'{"""":<12}'
      f'{""GDP"":>16}'
      f'{""Population"":>16}'
      f'{""GDP per"":>16}')
print(f'{""Country"":<12}'
      f'{""($ billion)"":>16}'
      f'{""(million)"":>16}'
      f'{""capita ($)"":>16}')
```

This code prints the following table:

| GDP | Population | GDP per capita |
|---|---|---|
| Country | ($ billion) | (million) |

### Horizontal Rule

```python
print('-' * 60)
```

This code prints a horizontal rule with a width of 60 characters."
"page_content='120 Console I/O
gdp_chad = 11.780
gdp_chile = 317.059
gdp_china = 17734.063
gdp_colombia = 314.323
pop_chad = 16.818
pop_chile = 19.768
pop_china = 1412.600
pop_colombia = 51.049
(Yeah. This is a little clunky. We’ll learn better ways to handle data
later.) We could print the rows in our table like this:
print(f'{""Chad"":<12}'
f'{gdp_chad:>16,.3f}'
f'{pop_chad:>16,.3f}'
f'{gdp_chad / pop_chad * 1000:>16,.0f}')
print(f'{""Chile"":<12}'
f'{gdp_chile:>16,.3f}'
f'{pop_chile:>16,.3f}'
f'{gdp_chile / pop_chile * 1000:>16,.0f}')
print(f'{""China"":<12}'
f'{gdp_china:>16,.3f}'
f'{pop_china:>16,.3f}'
f'{gdp_china / pop_china * 1000:>16,.0f}')
print(f'{""Colombia"":<12}'
f'{gdp_colombia:>16,.3f}'
f'{pop_colombia:>16,.3f}'
f'{gdp_colombia / pop_colombia * 1000:>16,.0f}')
(Yeah. This is a little clunky too. We’ll see better ways soon.) Notice
that we can combine format specifiers, so for values in the GDP column
we have a format specifier
>16,.3f
The first symbol> indicates that the column should be right-aligned. The
16 indicates the width of the column. The, indicates that we should use
a comma as a thousands separator..3f indicates formatting as a float-
ing point number, with three decimal places of precision. Other format
specifiers are similar.
Putting it all together we have:
gdp_chad = 11.780
gdp_chile = 317.059
gdp_china = 17734.063
gdp_colombia = 314.323' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 134}","## Table Formatting

### Country Table

| Country | GDP | Population | Per Capita GDP |
|---|---|---|---|
| Chad | 11.780 | 16.818 | 701 |
| Chile | 317.059 | 19.768 | 16,036 |
| China | 17734.063 | 1412.600 | 12,556 |
| Colombia | 314.323 | 51.049 | 6,157 |

### Format Specifiers Table

| Format Specifier | Description | Example |
|---|---|---|
| >16,.3f | right-aligned column, width 16, thousands separator, 3 decimal places | 12,345.678 |
| <12 | left-aligned column, width 12 | Hello, World! |

### Code Example in Python

```python
# Python code example
print(""Hello, World!"")
```"
"page_content='Example: currency converter 121
pop_chad = 16.818
pop_chile = 19.768
pop_china = 1412.600
pop_colombia = 51.049
print(f'{"""":<12}'
f'{""GDP"":>16}'
f'{""Population"":>16}'
f'{""GDP per"":>16}')
print(f'{""Country"":<12}'
f'{""($ billion)"":>16}'
f'{""(million)"":>16}'
f'{""capita ($)"":>16}')
print('-' * 60)
print(f'{""Chad"":<12}'
f'{gdp_chad:>16,.3f}'
f'{pop_chad:>16,.3f}'
f'{gdp_chad / pop_chad * 1000:>16,.0f}')
print(f'{""Chile"":<12}'
f'{gdp_chile:>16,.3f}'
f'{pop_chile:>16,.3f}'
f'{gdp_chile / pop_chile * 1000:>16,.0f}')
print(f'{""China"":<12}'
f'{gdp_china:>16,.3f}'
f'{pop_china:>16,.3f}'
f'{gdp_china / pop_china * 1000:>16,.0f}')
print(f'{""Colombia"":<12}'
f'{gdp_colombia:>16,.3f}'
f'{pop_colombia:>16,.3f}'
f'{gdp_colombia / pop_colombia * 1000:>16,.0f}')
which prints:
GDP Population GDP per
Country ($ billion) (million) capita ($)
-----------------------------------------------------
Chad 11.780 16.818 700
Chile 317.059 19.768 16,039
China 17,734.063 1,412.600 12,554
Colombia 314.323 51.049 6,157
7.10 Example: currency converter
We’re starting with programs that take some input, perform some simple
calculations, and display some output.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 135}","### Formatting Instructions

1. **Content Structuring:**

   - Key sections: Formatting Instructions, Example: currency converter, Example: currency converter
   - Logical flow:
     - Formatting guidelines
     - Example code and output

2. **Metadata Inclusion:**

   - Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
   - Page: 135

3. **Code Formatting:**

   - Python code example enclosed in triple backticks

4. **Tabular Format (Example: currency converter 121):**

   | Country | GDP ($ billion) | Population (million) | GDP per capita ($) |
   |---|---|---|---|
   | Chad | 11.780 | 16.818 | 700 |
   | Chile | 317.059 | 19.768 | 16,039 |
   | China | 17,734.063 | 1,412.600 | 12,554 |
   | Colombia | 314.323 | 51.049 | 6,157 |

5. **Examples:**

   - Code example: Python code for displaying GDP, population, and GDP per capita
   - Output example: Table showing the specified data for four countries

```python
pop_chad = 16.818
pop_chile = 19.768
pop_china = 1412.600
pop_colombia = 51.049
print(f'{"""":<12}'
f'{""GDP"":>16}'
f'{""Population"":>16}'
f'{""GDP per"":>16}')
print(f'{""Country"":<12}'
f'{""($ billion)"":>16}'
f'{""(million)"":>16}'
f'{""capita ($)"":>16}')
print('-' * 60)
print(f'{""Chad"":<12}'
f'{gdp_chad:>16,.3f}'
f'{pop_chad:>16,.3f}'
f'{gdp_chad / pop_chad * 1000:>16,.0f}')
print(f'{""Chile"":<12}'
f'{gdp_chile:>16,.3f}'
f'{pop_chile:>16,.3f}'
f'{gdp_chile / pop_chile * 1000:>16,.0f}')
print(f'{""China"":<12}'
f'{gdp_china:>16,.3f}'
f'{pop_china:>16,.3f}'
f'{gdp_china / pop_china * 1000:>16,.0f}')
print(f'{""Colombia"":<12}'
f'{gdp_colombia:>16,.3f}'
f'{pop_colombia:>16,.3f}'
f'{gdp_colombia / pop_colombia * 1000:>16,.0f}')
```"
"page_content='122 Console I/O
Here we’ll demonstrate a currency converter. Consider how we’d like
such a program to behave, assuming we need the exchange rate as a
user-supplied input. What’s the information we’d need to perform the
calculation?
• The amount we’d like to convert.
• A label for the currency we’d like to convert, for example, USD,
CAD, MXN, BRL, EUR,etc.4 We’ll call this thesource currency.
• An exchange rate.
• A label for the currency we want to receive (as above). We’ll call
this thetarget currency.
Let’s imagine how this might work:
1. The user is prompted for a source currency label.
2. The user is prompted for a target currency label.
3. The user is prompted for an amount (in the source currency).
4. The user is prompted for an exchange rate.
5. The program displays the result.
This raises the question: how do we express the exchange rate? One
approach would be to express the rate as the ratio of the value of the
source currency unit to the target currency unit. For example, as of this
writing, one US dollar (USD) is equivalent to 1.3134 Canadian dollars
(CAD).
Taking this approach, we’ll multiply the source currency amount by
the exchange rate to get the equivalent value in the target currency.
Here’s how a session might proceed:
Enter source currency label: USD
Enter target currency label: CAD
OK. We will convert USD to CAD.
Enter the amount in USD you wish to convert: 1.00
Enter the exchange rate (USD/CAD): 1.3134
1.00 USD is worth 1.31 CAD
At this point, we don’t have all the tools we’d need to validate input
from the user, so for this program we’ll trust the user to be well-behaved
and to enter reasonable labels and rates. (We’ll see more on input vali-
dation and exception handling soon.) With this proviso, here’s how we
might start this program:
source_label = input('Enter source currency label: ')
target_label = input('Enter target currency label: ')
print(f'OK. We will convert {source_label} '
f'to {target_label}.')
This code will prompt the user for source and target labels and then
print out the conversion the user has requested. Notice that we use an
f-string to interpolate the user-supplied labels.
4 F or three-character ISO 4217 standard currency codes, see: https://en.wikiped
ia.org/wiki/ISO_4217.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 136}","## Console I/O

### Currency Converter Example

Consider how a currency converter program behaves, assuming the exchange rate is user-supplied input. The information needed to perform the calculation is:

- Amount to convert
- Source currency label (e.g., USD, CAD, MXN, BRL, EUR)
- Exchange rate
- Target currency label (e.g., USD, CAD, MXN, BRL, EUR)

A sample session:

```
Enter source currency label: USD
Enter target currency label: CAD
OK. We will convert USD to CAD.
Enter the amount in USD you wish to convert: 1.00
Enter the exchange rate (USD/CAD): 1.3134
1.00 USD is worth 1.31 CAD
```

### Code

```python
source_label = input('Enter source currency label: ')
target_label = input('Enter target currency label: ')
print(f'OK. We will convert {source_label} '
      f'to {target_label}.')
```"
"page_content='Example: currency converter 123
Now we need two other bits of information: the amount we wish to
convert, and the exchange rate. (Here we’ll use the\, which, when used
as shown, signifies an explicit line continuation in Python. Python will
automatically join the lines.)5
source_prompt = f'Enter the amount in {source_label} ' \
f'you wish to convert: '
ex_rate_prompt = f'Enter the exchange rate ' \
f'({source_label}/{target_label}): '
source_amount = float(input(source_prompt))
exchange_rate = float(input(ex_rate_prompt))
At this point, we have both labelssource_label and target_label, the
amount we wish to convert stored assource_amount, and the exchange
rate stored as exchange_rate. The labels are of type str. The source
amount and the exchange rate are of typefloat.
Giving these objects significant names (rather thanx, y, z, …) makes
the code easy to read and understand.
Now, on to the calculation. Since we have the rate expressed as a
ratio of the value of a unit of the source currency to a unit of the target
currency, all we need to do is multiply.
target_amount = source_amount * exchange_rate
See how choosing good names makes things so clear? You should aim
for similar clarity when naming objects and putting them to use.
The only thing left is to print the result. Again, we’ll use f-strings,
but this time we’ll include format specifiers to display the results to two
decimal places of precision.
print(f'{source_amount:,.2f} {source_label} is worth '
f'{target_amount:,.2f} {target_label}')
Putting it all together we get:
""""""
Currency Converter
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
Prompts users for two currencies, amount to convert,
and exchange rate, and then performs the conversion
5 F rom the Python documentation: T wo or more physical lines may be joined
into logical lines using backslash characters (), as follows: when a physical line ends
in a backslash that is not part of a string literal or comment, it is joined with
the following forming a single logical line, deleting the backslash and the following
end-of-line character (
https://docs.python.org/3/reference/lexical_analysis.html).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 137}","### Currency Converter

###### By Egbert Porcupine <egbert.porcupine@uvm.edu>

#### Purpose

This program prompts users for two currencies, the amount to convert, and the exchange rate, and then performs the conversion.

### Instructions

1. Enter the amount in the source currency you wish to convert.
2. Enter the exchange rate (source currency/target currency).

### Example

Convert 123 US dollars to Euros.

**Source Currency:** USD

**Target Currency:** EUR

**Exchange Rate:** 0.85

**Result:** 123 USD is worth 105.05 EUR

### Code

```python
# Python code example
source_label = input(""Enter the source currency: "")
target_label = input(""Enter the target currency: "")
source_prompt = f'Enter the amount in {source_label} ' \
f'you wish to convert: '
ex_rate_prompt = f'Enter the exchange rate ' \
f'({source_label}/{target_label}): '
source_amount = float(input(source_prompt))
exchange_rate = float(input(ex_rate_prompt))
target_amount = source_amount * exchange_rate
print(f'{source_amount:,.2f} {source_label} is worth '
f'{target_amount:,.2f} {target_label}')
```"
"page_content='124 Console I/O
and displays the result.
""""""
source_label = input('Enter source currency label: ')
target_label = input('Enter target currency label: ')
print(f'OK. We will convert {source_label} '
f'to {target_label}.')
source_prompt = f'Enter the amount in {source_label} ' \
f'you wish to convert: '
ex_rate_prompt = f'Enter the exchange rate ' \
f'({source_label}/{target_label}): '
source_amount = float(input(source_prompt))
exchange_rate = float(input(ex_rate_prompt))
target_amount = source_amount * exchange_rate
print(f'{source_amount:,.2f} {source_label} is worth '
f'{target_amount:,.2f} {target_label}')
Notice that we don’t need any comments to explain our code. By
choosing good names we’ve made comments unnecessary!
We’ll revisit this program, making improvements as we acquire more
tools.
Feel free to copy, save, and run this code. There are lots of websites
which provide exchange rates and perform such conversions. One such
website is the Xe Currency Converter (https://www.xe.com/currencyc
onverter/).
7.11 F ormat specifiers: a quick reference
Format specifiers actually constitute a “mini-language” of their own. For
a complete reference, see the section entitled “Format Specification Mini-
Language” in the Python documentation for strings (
https://docs.pyt
hon.org/3/library/string.html).
Remember that format specifiers are optionally included in f-string re-
placement fields. The format specifier is separated from the replacement
expression by a colon. Examples:
>>> x = 0.16251`
>>> f'{x:.1%}'
'16.3%'
>>> f'{x:.2f}'
'0.16'
>>> f'{x:>12}'
' 0.16251'' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 138}","## Console I/O

### Metadata

- Page: 138
- Source: ""C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf""

### Content

#### Format Specifiers: A Quick Reference

Format specifiers form a ""mini-language"" within Python for controlling the display of formatted values. For a comprehensive reference, refer to the ""Format Specification Mini-Language"" section in the Python documentation for strings at https://docs.python.org/3/library/string.html.

#### Examples of Format Specifiers

Format specifiers are optionally included in f-string replacement fields and are separated from the replacement expression by a colon. 

- `x = 0.16251`
- `f'{x:.1%}' -> '16.3%'`
- `f'{x:.2f}' -> '0.16'`
- `f'{x:>12}' -> ' 0.16251'`"
"page_content='Exceptions 125
>>> f'{x:.3E}'
'1.625E-01'
Here’s a quick reference for some commonly used format specifiers:
option meaning example
< align left, can be combined with width <12
> align right, can be combined with width >15
f fixed point notation, combined with precision .2f
% percentage (multiplies by 100 automatically) .1%
, use thousands separators, for example, 1,000 ,
E scientific notation, combined with precision .4E
7.12 Exceptions
ValueError
In an earlier chapter, we saw how trying to usemath.sqrt() with a neg-
ative number as an argument results in aValueError.
In this chapter we’ve seen another case ofValueError—where inputs
to numeric constructors,int() and float(), are invalid. These functions
take strings, so the issue isn’t the type of the argument. Rather, it’s an
issue with thevalue of the argument—some strings cannot be converted
to numeric types.
For example,
>>> int('5')
5
>>> int('5.0')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: invalid literal for int() with base 10: '5.0'
>>> int('kumquat')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'kumquat'
The first call, with the argument'5' succeeds because the string'5'
can be converted to an object of typeint. The other two calls fail with
a ValueError.
int('5.0') fails because Python doesn’t know what to do about the
decimal point when trying to construct anint. Even though 5.0 has a
corresponding integer value, 5, Python rejects this input and raises a
ValueError.
The last example, int('kumquat'), fails for the obvious reason that
'kumquat' cannot be converted to an integer.
What about the float constructor,float()? Most numeric strings can
be converted to an object of typefloat. Examples:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 139}","**Metadata:** 
* Page Number: 139 
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Exceptions
#### ValueError
In an earlier chapter, we saw how trying to use `math.sqrt()` with a negative number as an argument results in a ValueError.
In this chapter, we've seen another case of ValueError—where inputs to numeric constructors, `int()` and `float()`, are invalid. These functions take strings, so the issue isn't the type of the argument. Rather, it's an issue with the value of the argument—some strings cannot be converted to numeric types.

**Examples:**
```python
>>> int('5')
5
>>> int('5.0')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: invalid literal for int() with base 10: '5.0'
>>> int('kumquat')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'kumquat'
```

The first call, with the argument '5', succeeds because the string '5' can be converted to an object of type `int`. The other two calls fail with a ValueError.
`int('5.0')` fails because Python doesn't know what to do about the decimal point when trying to construct an `int`. Even though `5.0` has a corresponding integer value, 5, Python rejects this input and raises a ValueError.
The last example, `int('kumquat')`, fails for the obvious reason that 'kumquat' cannot be converted to an integer."
"page_content='126 Console I/O
>>> float('3.1415926')
3.1415926
>>> float('7')
7.0
>>> float('6.02E23')
6.02e+23
The first example should be obvious. The second example is OK be-
cause '7' can be converted to a float. Notice the result offloat('7')
is 7.0. The third example shows that the float constructor works when
using scientific notation as well.
Python has special values for positive and negative infinity (these do
come in handy from time to time), and the float constructor can handle
the following strings:
>>> float('+inf')
inf
>>> float('-inf')
-inf
Here are some examples of conversions that will fail, resulting in
ValueError.
>>> float('1,000')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: could not convert string to float: '1,000'
>>> float('pi')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: could not convert string to float: 'pi'
>>> float('one')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: could not convert string to float: 'one'
>>> float('toothache')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: could not convert string to float: 'toothache'
What about the string constructor,str()? It turns out that this can
never fail, since all objects in Python have a default string representation.
There’s no object type that can’t be turned into a string! Even things like
functionshaveadefaultstringrepresentation(thoughthisrepresentation
isn’t particularly human-friendly). Example:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 140}","# Metadata
Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
Page: 140
Line: 1130
**Numeric String to Numeric Conversion**
**float constructor**

The float constructor converts a numeric string into a floating-point number. Below are a few examples:

```python
>>> float('3.1415926')
3.1415926
>>> float('7')
7.0
>>> float('6.02E23')
6.02e+23
```

- The first example converts the string '3.1415926' to a floating-point number.
- The second example converts the string '7' to a floating-point number. Note that the result is 7.0, not 7.
- The third example converts the string '6.02E23' to a floating-point number. This uses scientific notation to represent a very large number.

**Special Values**

Python has special values for positive and negative infinity:

```python
>>> float('+inf')
inf
>>> float('-inf')
-inf
```

These values can be useful in certain situations.

**Conversion Failures**

Not all strings can be converted to floating-point numbers. The following examples will result in ValueError:

```python
>>> float('1,000')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: could not convert string to float: '1,000'
>>> float('pi')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: could not convert string to float: 'pi'
>>> float('one')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: could not convert string to float: 'one'
>>> float('toothache')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: could not convert string to float: 'toothache'
```

**str Constructor**

The str constructor converts an object to a string. Unlike the float constructor, it can never fail because all objects in Python have a default string representation. For example:

```python
str(3.1415926)
'3.1415926'
str(7)
'7'
str('hello')
'hello'
```

Even functions have a default string representation, though it may not be human-friendly:

```python
str(print)
'<built-in function print>'
```"
"page_content='Exercises 127
>>> def f():
... return 0
...
>>> str(f)
'<function f at 0x10101ea70>'
7.13 Exercises
Exercise 01
The following code has a bug. Instead of printing what the user types, it
prints <built-in function input>. What’s wrong and how would you fix
it?
input('Please enter your name: ')
print(input)
Exercise 02
Which of the following can be converted to anint? (Try these out in a
Python shell.)
a. '1'
b. '1.0'
c. '-3'
d. 5
e. 'pumpkin'
f. '1,000'
g. '+1 802 555 1212'
h. '192.168.1.1'
i. '2023-01-15'
j. '2023/01/15'
k. 2023-01-15
l. 2023/01/15
Exercise 03
Which of the following can be converted to afloat? (Try these out in a
Python shell.)
a. 3.141592
b. 'A'
c. '5.0 + 1.0'
d. '17'
e. 'inf' (Be sure to try this one out! What do you think it means?)
f. 2023/01/15
g. 2023/1/15' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 141}","## Exercises

### 7.13 Exercises

### Exercise 01

The following code has a bug. Instead of printing what the user types, it
prints <built-in function input>. What’s wrong and how would you fix
it?

```python
input('Please enter your name: ')
print(input)
```

**Answer:**

The code prints <built-in function input> because the input function returns the function itself, not the value entered by the user. To fix this, we need to store the returned value in a variable and then print that variable.

```python
name = input('Please enter your name: ')
print(name)
```

### Exercise 02

Which of the following can be converted to anint? (Try these out in a
Python shell.)

a. '1'
b. '1.0'
c. '-3'
d. 5
e. 'pumpkin'
f. '1,000'
g. '+1 802 555 1212'
h. '192.168.1.1'
i. '2023-01-15'
j. '2023/01/15'
k. 2023-01-15
l. 2023/01/15

**Answer:**

```
a. '1' -> True
b. '1.0' -> False
c. '-3' -> True
d. 5 -> True
e. 'pumpkin' -> False
f. '1,000' -> False
g. '+1 802 555 1212' -> False
h. '192.168.1.1' -> False
i. '2023-01-15' -> False
j. '2023/01/15' -> False
k. 2023-01-15 -> True
l. 2023/01/15 -> True
```

### Exercise 03

Which of the following can be converted to afloat? (Try these out in a
Python shell.)

a. 3.141592
b. 'A'
c. '5.0 + 1.0'
d. '17'
e. 'inf' (Be sure to try this one out! What do you think it means?)
f. 2023/01/15
g. 2023/1/15'

**Answer:**

```
a. 3.141592 -> True
b. 'A' -> False
c. '5.0 + 1.0' -> True
d. '17' -> True
e. 'inf' -> True (Represents infinity)
f. 2023/01/15 -> False
g. 2023/1/15' -> False
```"
"page_content='128 Console I/O
Exercise 04
Write a program which prompts the user for two floating-point numbers
and displays the product of the two numbers entered. Example:
Enter a floating-point number: 3.14159
Enter another floating-point number: 17
53.40703
Notice here that the second input is an integer string. It’s easy to
treat an input like this as an integer, just as easily as we could write
“17.0” instead of “17”.
>>> float(17)
17.0
Exercise 05
Write a program which prompts the user for their name and then prints
‘Hello’ followed by the user’s name. Example:
What is your name? Egbert
Hello Egbert' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 142}","### Formatting Instructions:

1. **Content Structuring:**  
   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**  
   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**  
   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

   Example:
   ```python
   # Python code example
   print(""Hello, World!"")
   
4. **Tabular Formatting:**  
   - If possible, present differences in tabular format for easy comparison.

5. **Example Inclusion:**  
   - Clearly include examples as provided in the original document.   

6. **Content Preservation:**  
   - Do not modify or shorten the provided content. Provide the exact same length content.

### Formatted Document:

**Page 142**

**Exercise 04: Floating-Point Number Product**

**Instructions:**

Write a program that prompts the user to enter two floating-point numbers and then displays their product.

**Example:**

```
Enter a floating-point number: 3.14159
Enter another floating-point number: 17
53.40703
```

**Note:** The second input can be an integer string, which can be easily treated as an integer by floating it (e.g., `float(""17"")`).

```python
num1 = float(input(""Enter a floating-point number: ""))
num2 = float(input(""Enter another floating-point number: ""))
product = num1 * num2
print(""Product:"", product)
```

**Exercise 05: User Name Greeting**

**Instructions:**

Write a program that prompts the user to enter their name and then prints ""Hello"" followed by the user's name.

**Example:**

```
What is your name? Egbert
Hello Egbert
```

```python
name = input(""What is your name? "")
print(""Hello"", name)
```

**Metadata:**

* Source: `C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf`
* Page: 142"
"page_content='Chapter 8
Branching and Boolean
expressions
In this chapter, we’ll further our understanding of Booleans and Boolean
expressions, learn about branching and flow control, and learn some con-
venient string methods.
Learning objectives
• You will learn more about Booleans, how to construct a truth table,
and how to combine Booleans using the connectivesand and or.
• You will learn how to writeif, if/else, if/elif, and if/elif/else state-
ments in Python, which allow program execution to follow different
branches based on certain conditions.
• You will learn how to represent program flow and decisions using
flow charts and decision trees.
• You will learn a little about input validation.
• You will learn how to use convenient string methods such as
.upper(), .lower(), and.capitalize().
T erms and string methods introduced
• Boolean expression
• branching
• .capitalize()
• comparison operator
• conditional
• De Morgan’s Laws
• decision tree
• falsiness
• flow chart
• lexicographic order
• .lower()
• string method
• truth value
• truthiness
• .upper()
129' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 143}","# Chapter 8: Branching and Boolean Expressions

## Metadata

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 143

## Content

### Learning Objectives

- Learn more about Booleans, truth tables, and combining Booleans using `and` and `or` connectives
- Write `if`, `if/else`, `if/elif`, and `if/elif/else` statements in Python to allow for different program execution branches based on conditions
- Represent program flow and decisions using flow charts and decision trees
- Learn about input validation
- Use convenient string methods such as `.upper()`, `.lower()`, and `.capitalize()`

### Terms and String Methods Introduced

- Boolean expression
- Branching
- `.capitalize()`
- Comparison operator
- Conditional
- De Morgan's Laws
- Decision tree
- Falsiness
- Flow chart
- Lexicographic order
- `.lower()`
- String method
- Truth value
- Truthiness
- `.upper()`"
"page_content='130 Branching and Boolean expressions
8.1 Boolean logic and Boolean expressions
Boolean expressions and Boolean logic are widely used in mathematics,
computer science, computer programming, and philosophy. These take
their name from the 19th century mathematician and logician George
Boole. His motivation was to systematize and formalize the logic that
philosophers and others used, which had come down to us from ancient
Greece, primarily due to Aristotle.
The fundamental idea is really quite simple: we have truth values—
true or false—and rules for simplifying compound expressions.
It’s easiest to explain by example. We’ll start with informal presenta-
tion, and then formalize things a little later.
Say we have this sentence “It is raining.” Now, either it is, or it is
not raining. If it is raining, we say that this sentence istrue. If it isnot
raining, we say that this sentence isfalse.
We call a sentence like this aproposition.
Notice that there is no middle ground here. From our perspective, a
proposition like this is either true or false. It can’t be 67% true and 33%
false, for example. We call this thelaw of the excluded middle .
Another way of stating this law is that either a proposition is true,
or its negation is true. That is to say, either “It is raining” is true or its
negation, “It is not raining” (or “It is not the case that it is raining”) is
true. One or the other.
1
What does this mean for us as computer programmers? Sometimes
we want our code to do one thing if a certain condition is true, and do
something different if that condition is false (not true). Without this
ability, our programs would be very inflexible.
But before we get to coding, let’s learn a little more aboutBoolean
expressions.
Boolean expressions
What is a Boolean expression? Well, true and false are both Boolean
expressions. We can build more complex expressions using the Boolean
connectivesnot, and, andor.
We often usetruth tables to demonstrate. Here’s the simplest possible
truth table. We usually abbreviate true and false as T and F, respectively,
but here we’ll stick with the Python Boolean literalsTrue and False.
Expression Truth value
True True
False False
1 There are some logicians who reject the law of the excluded middle. Consider
this proposition called the liar paradox or Epimenides paradox : “This statement
is false. ” Is this true or false? If it’s true it’s false, if it’s false it’s true! Some take
this as an example of where the law of the excluded middle fails. Thankfully , we
don’t need to worry about this in this textbook, but if you’re curious, see: Law
of the excluded middle (Wikipedia). There’s even an episode in the original Star
T rektelevision series, in which Captain Kirk and Harry Mudd defeat a humanoid
robot by confronting it with the liar’s paradox. Y ou can view it on Y ouT ube:
https:
//www.youtube.com/watch?v=QqCiw0wD44U.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 144}","## Branching and Boolean expressions
### 8.1 Boolean logic and Boolean expressions

Boolean expressions and Boolean logic are extensively utilized in mathematics, computer science, computer programming, and philosophy. These take their name from the 19th century mathematician and logician George Boole. His motivation was to systematize and formalize the logic that philosophers and others used, which had come down to us from ancient Greece, primarily due to Aristotle.

The fundamental idea is quite simple: we have truth values—true or false—and rules for simplifying compound expressions.

It's easiest to explain by example. We’ll start with informal presentation, and then formalize things a little later.

Say we have this sentence “It is raining.” Now, either it is, or it is not raining. If it is raining, we say that this sentence istrue. If it isnot raining, we say that this sentence isfalse.

We call a sentence like this aproposition.

Notice that there is no middle ground here. From our perspective, a proposition like this is either true or false. It can’t be 67% true and 33% false, for example. We call this thelaw of the excluded middle .

Another way of stating this law is that either a proposition is true, or its negation is true. That is to say, either “It is raining” is true or its negation, “It is not raining” (or “It is not the case that it is raining”) is true. One or the other.

### Boolean expressions

What is a Boolean expression? Well, true and false are both Boolean expressions. We can build more complex expressions using the Boolean connectivesnot, and, andor.

We often usetruth tables to demonstrate. Here’s the simplest possible truth table. We usually abbreviate true and false as T and F, respectively, but here we’ll stick with the Python Boolean literalsTrue and False.

| Expression | Truth value |
|---|---|
| True | True |
| False | False |

## Difference between a proposition and a Boolean expression

| Characteristic | Proposition | Boolean Expression |
|---|---|---|
| Definition | A statement that is either true or false | An expression that evaluates to true or false |
| Example | ""It is raining."" | True |
| Truth value | True or false | True or false |"
"page_content='Boolean logic and Boolean expressions 131
True is true, and false is false (big surprise, I know).
Now let’s go crazy and mix it up. We’ll begin with the Boolean con-
nective not. not simply negates the value or expression which follows.
Expression Truth value
True True
False False
not True False
not False True
Now let’s see what happens with the other connectives,and and or.
Some languages have special symbols for these (for example, Java uses&&
and || for and and or respectively). In Python, we simply useand and
or. When we use these connectives, we refer to the expressions being
connected asclauses.
Expression Truth value
True and True True
True and False False
False and True False
False and False False
So when using the conjunctiveand, the expression is true if and only
if both clauses are true. In all other cases (above) the expression is false.
Here’s or.
Expression Truth value
True or True True
True or False True
False or True True
False or False False
You see, in the case ofor, as long as one clause is true, the entire
expression is true. It is only when both clauses are false that the entire
expression is false.
We refer to clauses joined byand as aconjunction. We refer to clauses
joined byor as adisjunction. Let’s try this out in the Python shell:
>>> True
True
>>> False
False
>>> not True
False
>>> not False
True
>>> True and True' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 145}","## Boolean Logic and Boolean Expressions

### Basic Boolean Values
```metadata
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 145}
```

- True: Represents truth
- False: Represents falsehood

### Boolean Connectives
- **not:** Negates the following value or expression

| Expression | Truth Value |
|:----------|:----------:|
| True | False |
| False | True |
| not True | False |
| not False | True |

- **and:** Joins two clauses
- **or:** Joins two clauses

### Truth Tables

**and**

| Expression | Truth Value |
|:----------|:----------:|
| True and True | True |
| True and False | False |
| False and True | False |
| False and False | False |

**or**

| Expression | Truth Value |
|:----------|:----------:|
| True or True | True |
| True or False | True |
| False or True | True |
| False or False | False |

### Terminology
- **Conjunction:** Clauses joined by **and**
- **Disjunction:** Clauses joined by **or**

### Python Examples

```python
>>> True
True
>>> False
False
>>> not True
False
>>> not False
True
>>> True and True
True
>>> True and False
False
>>> False and True
False
>>> False and False
False
```"
"page_content='132 Branching and Boolean expressions
True
>>> True and False
False
>>> False and True
False
>>> False and False
False
>>> True or True
True
>>> True or False
True
>>> False or True
True
>>> False or False
False
Now, we don’t usually use literals like this in our code. Usually, we
want to test some condition to see if it evaluates toTrue or False. Then
our program does one thing if the condition is true and a different thing
if the condition is false. We’ll see how this works in another section.
De Morgan’s Laws
When working with Boolean expressionsDe Morgan ’s Laws provide us
with handy rules for transforming Boolean expressions from one form
to another. Here we’ll use a and b to stand in for arbitrary Boolean
expressions.
not (a or b) is the same as (not a) and (not b)
not (a and b) is the same as (not a) or (not b)
You can think of this as a kind of distributive law for negation. We
distribute the not over the disjunction(a or b) , but when we do, we
change the or to and. By the same token, we distributenot over the
conjunction (a and b), but when we do, we change theand to or.
You’ll see these may come in handy when we get to input validation
(among other applications).
Supplemental information
If you’d like to explore this further, here are some good resources:
• Stanford Encyclopedia of Philosophy’s entry on George Boole:ht
tps://plato.stanford.edu/entries/boole
• Boolean Algebra (Wikipedia):https://en.wikipedia.org/wiki/Bool
ean_algebra
• De Morgan’s Laws (Wikipedia):https://en.wikipedia.org/wiki/De
_Morgan%27s_laws' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 146}","## Branching and Boolean expressions

### Metadata

* Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 146

### True and False

```python
True and False
False
True and True
True
False and True
False
False and False
False
True or True
True
True or False
True
False or True
True
False or False
False
```

### De Morgan's Laws

```
not (a or b) is the same as (not a) and (not b)
not (a and b) is the same as (not a) or (not b)
```

### Supplemental Information

* Stanford Encyclopedia of Philosophy's entry on George Boole: https://plato.stanford.edu/entries/boole
* Boolean Algebra (Wikipedia): https://en.wikipedia.org/wiki/Boolean_algebra
* De Morgan's Laws (Wikipedia): https://en.wikipedia.org/wiki/De_Morgan's_laws"
"page_content='Comparison operators 133
8.2 Comparison operators
It is often the case that we wish to compare two objects or two values.
We do this withcomparison operators.
Comparison operators compare two objects (or the values of these
objects) and return a BooleanTrue if the comparison holds, andFalse if
it does not.
Python provides us with the following comparison operators (and
more):
Operator Example Explanation
== a == b Does the value ofa equal the value ofb?
> a > b Is the value ofa greater than the value ofb?
< a < b Is the value ofa less than the value ofb?
>= a >= b Is the value ofa greater than or equal to the value
of b?
<= a <= b Is the value ofa less than or equal to the value of
b?
!= a != b Is the value ofa not equal to the value ofb?
It’s important to understand thatthese operators perform compar-
isons and expressions which use them toevaluate to a Boolean value
(True or False).
Let’s demonstrate in the Python shell.
>>> a = 12
>>> b = 31
>>> a == b
False
>>> a > b
False
>>> a < b
True
>>> a >= b
False
>>> a <= b
True
>>> a != b
True
>>> not (a == b)
True
Now what happens in the case of strings? Let’s try it and find out!
>>> a = 'duck'
>>> b = 'swan'
>>> a == b
False
>>> a > b
False' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 147}","# Comparison Operators

## Metadata

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 147

## Content

### Comparison Operators

In Python, comparison operators are used to compare two objects (or their values) and return a Boolean value (True or False) based on the outcome of the comparison.

| Operator | Example | Explanation |
|---|---|---|
| == | a == b | True if the value of a is equal to the value of b, False otherwise |
| > | a > b | True if the value of a is greater than the value of b, False otherwise |
| < | a < b | True if the value of a is less than the value of b, False otherwise |
| >= | a >= b | True if the value of a is greater than or equal to the value of b, False otherwise |
| <= | a <= b | True if the value of a is less than or equal to the value of b, False otherwise |
| != | a != b | True if the value of a is not equal to the value of b, False otherwise |

**Example:**
```python
a = 12
b = 31

print(a == b)  # False
print(a > b)  # False
print(a < b)  # True
print(a >= b)  # False
print(a <= b)  # True
print(a != b)  # True
```

**Note:** Comparison operators return a Boolean value. This means that they can be used in conditional statements to control the flow of a program.

### String Comparisons

When comparing strings, the comparison operators work differently than they do for numbers. The operators compare the ASCII values of the characters in the strings.

**Example:**
```python
a = 'duck'
b = 'swan'

print(a == b)  # False
print(a > b)  # False
```"
"page_content='134 Branching and Boolean expressions
>>> a < b
True
>>> a >= b
False
>>> a <= b
True
>>> a != b
True
>>> not (a == b)
True
What’s going on here? When we compare strings, we compare them
lexicographical ly. A string isless than another string if its lexicographic
order is lower than the other. A string isgreater than another string if
its lexicographic order is greater than the other.
What is lexicographic order?
Lexicographic order is like alphabetic order, but is somewhat more gen-
eral. Consider our example ‘duck’ and ‘swan’. This is an easy case, since
both are four characters long, so alphabetizing them is straightforward.
But what about ‘a’ and ‘aa’? Which comes first? Both start with ‘a’
so their first character is the same. If you look in a dictionary you’ll find
that ‘a’ appears before ‘aa’.
2 Why? Because when comparing strings of
different lengths, the comparison is made as if the shorter string were
padded with an invisible character which comes before all other char-
acters in the ordering. Hence, ‘a’ comes before ‘aa’ in a lexicographic
ordering.
>>> 'a' < 'aa'
True
>> 'a' > 'aa'
False
The situation is a little more complex than this, because strings can
have any character in them (not just letters, and hence the term “alpha-
betic order” loses its meaning). So what Python actually compares are
thecode points of Unicode characters. Unicode is the system that Python
uses to encode character information, and Unicode includes many other
alphabets (Arabic, Armenian, Cyrillic, Greek, Hangul, Hebrew, Hindi,
Telugu, Thai,etc.), symbols from non-alphabetic languages such as Chi-
nese or Japanese Kanji, and many special symbols (®, €, ±, ∞,etc.).
Each character has a number associated with it called acode point (yes,
this is a bit of a simplification). In comparing strings, Python compares
these values.
3
2 Y es, “aa” is a word, sometimes spelled “a’a” . It comes from the Hawai’ian, mean-
ing rough and jagged cooled lava (as opposed to pahoehoe, which is very smooth).
3 If you want to get really nosy about this, you can use the Python built-in
function ord() to get the numeric value associated with each character. E.g.,
>>> ord('A')
65' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 148}","## Branching and Boolean Expressions

### Comparison Operators

**Syntax:**

```
< (less than)
> (greater than)
<= (less than or equal to)
>= (greater than or equal to)
== (equal to)
!= (not equal to)
```

**Examples:**

```
>>> a < b
True
>>> a >= b
False
>>> a <= b
True
>>> a != b
True
>>> not (a == b)
True
```

### Lexicographic Order

When comparing strings, Python uses lexicographic order, which is similar to alphabetical order but more general.

**Rules:**

- Strings are compared character by character.
- If the first characters are different, the string with the lower-value character comes first.
- If the first characters are the same, the process continues with the next characters.
- If the strings are of different lengths, the shorter string is padded with an invisible character that comes before all other characters in the ordering.

**Examples:**

```
>>> 'duck' < 'swan'
True
>>> 'a' < 'aa'
True
```

### Unicode Code Points

In Python, strings can contain any character, so comparison is based on the Unicode code points associated with each character.

**Each character has a unique code point (e.g., 'A' = 65). Python compares these code point values to determine the lexicographic order of strings.**

**Metadata**

- Page Number: 148
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf"
"page_content='Branching 135
Thus, 'duck' < 'swan' evaluates toTrue, 'wing' < 'wings' evaluates
to True, and'bingo' < 'bin' evaluates toFalse.
>>> 'duck' < 'swan'
True
>>> 'wing' < 'wings'
True
>>> 'bingo' < 'bin'
False
Now, you may wonder what happens in alphabetic systems, like En-
glish and modern European languages, which have majuscule (upper-
case) and miniscule (lower-case) letters (not all alphabetic systems have
this distinction).
'a' > 'A'
True
'a' < 'A'
False
Upper-case letters have lower order than lower-case letters.
>>> 'ALPHA' < 'aLPHA'
True
So keep this in mind when comparing strings.
8.3 Branching
Up until this point, all the programs we’ve seen and written proceed in
a linear fashion from beginning to end. This is fine for some programs,
but it’s rather inflexible. Sometimes we want our program to respond
differently to different conditions.
Imagine we wanted to write a program that calculates someone’s in-
come tax. The US Internal Revenue Service recognizes five different filing
statuses:
>>> ord('a')
97
>>> ord('b')
98
>>> ord('£')
163
See also: Joel Spolsky’s The Absolute Minimum Every Software Developer Ab-
solutely, Positively Must Know About Unicode and Character Sets (No Excuses!)
last seen in the wild at https://www.joelonsoftware.com/2003/10/08/the-absolute-
minimum-every-software-developer-absolutely-positively-must-know-about-unicode-
and-character-sets-no-excuses/' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 149}","## 8.3 Branching

### Metadata

- Page: 149
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Key Sections

#### String Comparison

- Lower-case letters have higher order than upper-case letters.
- `'duck' < 'swan'` evaluates to True.
- `'wing' < 'wings'` evaluates to True.
- `'bingo' < 'bin'` evaluates to False.

#### Branching

- Branching allows programs to respond differently to different conditions.
- The US Internal Revenue Service recognizes five different filing statuses:
    1. Single
    2. Married filing jointly
    3. Married filing separately
    4. Head of household
    5. Qualifying widow(er)

#### Unicode

- Unicode is a universal character encoding standard that assigns a unique number to every character.
- The `ord()` function returns the Unicode code point for a character.

### Code

```python
>>> ord('a')
97
>>> ord('b')
98
>>> ord('£')
163
```

### Table

| Character | Unicode Code Point |
|---|---|
| a | 97 |
| b | 98 |
| £ | 163 |"
"page_content='136 Branching and Boolean expressions
• single,
• married, filing jointly,
• married, filing separately,
• head of household,
• qualifying widow or widower with dependent child.4
So in writing our program we’d need to prompt the user for different
questions, gather different data, perform different calculations, and use
different tax tables depending on a user’s filing status. Obviously, this
cannot be done in a strictly linear fashion.
Instead, we’d want our program to be able to make decisions, and
follow differentbranches, depending on the results of those decisions.
This example of an income tax program is by no means unusual. In
fact, most real-world programs involve some kind of branching.
When our program includes branches, we execute different portions
of our program depending on certain conditions. Which conditions might
those be? It depends entirely on the program we wish to write.
Thus, most programming languages (Python included) allow forcon-
trol flow—which includes branching and conditional execution of code.
How do we do this? In Python, we accomplish this withif, elif and
else statements (or combinations thereof).
8.4 if, elif, and else
if, elif, and else work with Boolean expressions to determine which
branch (or branches) our program will execute.
Since tax preparation is complicated, let’s consider more modest ex-
amples.
Examples using if, elif, and else
A minimal program we could write usingif and else might work like
this:
• Prompt the user to guess a magic word.
• If the user guesses correctly, print “You WIN!”
• If the user does not guess correctly, print “You LOSE!”
Let’s think about what we’d need for this program to work:
• A secret word.
• Prompt the user for their guess.
• Then compare the user’s guess with the secret word.
• Print the appropriate message.
Here’s how we can do this in Python usingif and else.
4 Discussion of the fairness or consequences of such a classification is outside the
scope of this text—a state of affairs that suits this author just fine.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 150}","## Content Structuring

### 8.4 if, elif, and else

### Key Points:

- if, elif, and else work with Boolean expressions to determine the flow of the program.
- if: Executes a block of code only if a specified condition is true.
- elif: Similar to if, but used to check additional conditions.
- else: Executes a block of code if none of the preceding conditions are met.

### Examples:

**Example 1: Guessing Game**

```python
# Prompt the user to guess a magic word
magic_word = ""secret""
user_guess = input(""Guess the magic word: "")

# Compare the user's guess with the secret word
if user_guess == magic_word:
    print(""You WIN!"")
else:
    print(""You LOSE!"")
```

**Example 2: Tax Calculator**

```python
# Get the user's filing status
filing_status = input(""Enter your filing status (single, married filing jointly, etc.): "")

# Calculate taxes based on the filing status
if filing_status == ""single"":
    # Calculate taxes for single filers
elif filing_status == ""married filing jointly"":
    # Calculate taxes for married filing jointly
else:
    # Calculate taxes for other filing statuses
```

### Code Formatting:

```python
# Python code example
if condition:
    # Code to execute if condition is true
elif condition_2:
    # Code to execute if condition_2 is true
else:
    # Code to execute if neither condition is true
```

### Tabular Format:

| Statement | Description |
|---|---|
| if | Executes a block of code if a specified condition is true. |
| elif | Similar to if, but used to check additional conditions. |
| else | Executes a block of code if none of the preceding conditions are met. |"
"page_content='if, elif, and else 137
""""""
CS1210
Guess the secret word
""""""
secret_word = ""secret""
user_guess = input(""What do you think the secret word is? "")
if user_guess == secret_word:
print(""You WIN!"")
else:
print(""You LOSE!"")
Here’s another example, but this time we’re using a nestedif statement
and anelif (which is a portmanteau of “else” and “if”):
""""""
CS 1210
What's for dinner?
""""""
bank_balance = float(input('What is your bank balance $? '))
if bank_balance < 20.0:
meal_points = input('Do you have any meal points? y/n: ')
if meal_points == 'y':
print('Eat at the dining hall.')
else:
print('Eat that leftover burrito.')
elif bank_balance < 50.0:
print('Order pizza from Leonardo\'s')
else:
print('Go out to Tiny Thai in Winooski with a friend!')
First we prompt the user for their bank balance. If this amount is less
than $20.00 then we prompt the useragain to find out if they have any
meal points left. If they do, that is,if meal_points == 'y', we print “Eat
at the dining hall.” If not, we print “Eat that leftover burrito.”
Now, what happens if that very first condition is false? If that’s false,
we know we have more than $20.00, so our next comparison is:
elif bank_balance < 50.0:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 151}","### Content Structuring:

**Formatting Instructions**

1. **Content Structuring:**

   - Key sections:
     - if Statements
     - elif Statements
     - else Statements
     - Nested if-elif-else Statements
   - Logical flow:
     - Introduction to conditional statements
     - if statements: Syntax and usage
     - elif statements: Syntax and usage
     - else statements: Syntax and usage
     - Nested if-elif-else statements: Syntax and usage
   - Clarity:
     - Clear and concise explanations
     - Helpful examples

2. **Metadata Inclusion:**

   - Page number: 151
   - Line numbers: Not provided
   - Source name: An Introduction to Programming and Computer Science with Python, Clayton Cafiero

3. **Code Formatting:**

   - Programming language: Python
   - Code enclosed within triple backticks

4. **Tabular Format (if possible):**

   - Differences between if, elif, and else statements summarized in a table

5. **Examples:**

   - Two examples provided in the text

### Content:

**Conditional Statements**

Conditional statements allow programs to execute different sets of instructions based on whether certain conditions are met. In Python, there are three primary conditional statements: if, elif, and else.

**if Statements**

The syntax of an if statement is as follows:

```python
if condition:
    # code to be executed if condition is True
```

If the condition evaluates to True, the code within the if block will be executed. If the condition evaluates to False, the code within the if block will be skipped.

For example:

```python
secret_word = ""secret""
user_guess = input(""What do you think the secret word is? "")
if user_guess == secret_word:
    print(""You WIN!"")
```

In this example, the if statement checks if the user's guess matches the secret word. If the guess is correct, the message ""You WIN!"" will be printed.

**elif Statements**

An elif statement is used to specify an alternative condition to be checked if the first condition in an if statement evaluates to False. The syntax is as follows:

```python
if condition1:
    # code to be executed if condition1 is True
elif condition2:
    # code to be executed if condition1 is False and condition2 is True
```

For example:

```python
bank_balance = float(input('What is your bank balance $? '))
if bank_balance < 20.0:
    meal_points = input('Do you have any meal points? y/n: ')
    if meal_points == 'y':
        print('Eat at the dining hall.')
    else:
        print('Eat that leftover burrito.')
elif bank_balance < 50.0:
    print('Order pizza from Leonardo\'s')
```

In this example, there are two elif statements. The first checks if the user has less than $20.00 in their bank account. If so, it prompts the user to check if they have any meal points. If they do, the program prints ""Eat at the dining hall."" If not, it prints ""Eat that leftover burrito."" The second elif statement checks if the user has less than $50.00 in their bank account. If so, it prints ""Order pizza from Leonardo's.""

**else Statements**

An else statement is used to specify an alternative set of instructions to be executed if all the conditions in the if and elif statements evaluate to False. The syntax is as follows:

```python
if condition1:
    # code to be executed if condition1 is True
elif condition2:
    # code to be executed if condition1 is False and condition2 is True
else:
    # code to be executed if condition1 is False and condition2 is False
```

For example:

```python
bank_balance = float(input('What is your bank balance $? '))
if bank_balance < 20.0:
    meal_points = input('Do you have any meal points? y/n: ')
    if meal_points == 'y':
        print('Eat at the dining hall.')
    else:
        print('Eat that leftover burrito.')
elif bank_balance < 50.0:
    print('Order pizza from Leonardo\'s')
else:
    print('Go out to Tiny Thai in Winooski with a friend!')
```

In this example, the else statement is used to print ""Go out to Tiny Thai in Winooski with a friend!"" if the user has more than $50.00 in their bank account.

**Nested if-elif-else Statements**

Nested if-elif-else statements are used to create more complex conditional logic. For example, the following code uses a nested if-elif-else statement to determine the eligibility of a user for a loan:

```python
credit_score = int(input('What is your credit score? '))
income = float(input('What is your annual income? '))
if credit_score >= 700:
    if income >= 50000:
        print('You are eligible for the loan.')
    else:
        print('Your income is too low to qualify for the loan.')
elif credit_score >= 600:
    if income >= 75000:
        print('You are eligible for the loan.')
    else:
        print('Your income and credit score are too low to qualify for the loan.')
else:
    print('Your credit score is too low to qualify for the loan.')
```

In t"
"page_content='138 Branching and Boolean expressions
Why not
elif bank_balance >= 20 and bank_balance < 50.0:
you might ask? Because we only reach theelif if the first condition is
false. There’s no need to check again.
So if the bank balance is greater than or equal to $20.00 and less than
$50.00 we print “Order pizza from Leonardo’s”.
Now, what if the bank balance is greater than or equal to $50.00? We
print “Go out to Tiny Thai in Winooski with a friend!”.
We can have a singleif statement, withoutelif or else. We can also,
as we’ve just seen, write compound statements which combineif and
else, if and elif, or all three,if, elif, andelse. We refer to each block
of code in such compound statements asclauses (distinct from clauses
in a compound Boolean expression).
Some important things to keep in mind
1. If we have a compound if/else statement in our program either the
body of theif clause is executed or the body of theelse clause is
executed—never both.
2. If we have a compound if/elif/else statement in our program, the
body of only one of the branches is executed.
Supplemental resources
For more on control of flow, see:https://docs.python.org/3/tutorial/c
ontrolflow.html
8.5 T ruthy and falsey
Python allows many shortcuts with Boolean expressions. Most every-
thing in Python has a truth value. As noted earlier, we refer to the truth
valuesofanythingotherthanBooleanswiththewhimsicalterms“truthy”
and “falsey” (we also use the terms “truthiness” and “falsiness”).
When used in Boolean expressions and conditions for loops or branch-
ing (if/elif), truthy values are treated (more-or-less) asTrue, andfalsey
values are treated (more-or-less) asFalse.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 152}","## Branching and Boolean expressions

### Why not `elif`?

You might ask why not:

```python
elif bank_balance >= 20 and bank_balance < 50.0:
```

Because we only reach the `elif` if the first condition is false. There's no need to check again.

**Metadata:**
- Source: `C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf`
- Page: 152

### Compound statements

We can have a single `if` statement, without `elif` or `else`. We can also, as we've just seen, write compound statements which combine `if` and `else`, `if` and `elif`, or all three, `if`, `elif`, and `else`. We refer to each block of code in such compound statements as clauses (distinct from clauses in a compound Boolean expression).

**Some important things to keep in mind**

1. If we have a compound `if/else` statement in our program either the body of the `if` clause is executed or the body of the `else` clause is executed—never both.
2. If we have a compound `if/elif/else` statement in our program, the body of only one of the branches is executed.

### Truthiness and falsiness

Python allows many shortcuts with Boolean expressions. Most everything in Python has a truth value. As noted earlier, we refer to the truth values of anything other than Booleans with the whimsical terms “truthy” and “falsey” (we also use the terms “truthiness” and “falsiness”).

When used in Boolean expressions and conditions for loops or branching (if/elif), truthy values are treated (more-or-less) as `True`, and falsey values are treated (more-or-less) as `False`."
"page_content='Input validation 139
Truthy things Falsey things
any non-zero valuedint or float, 0, 0.0
5, -17, 3.1415
any non-empty list, the empty list,[]
['foo'], [0], ['a', 'b', 'c']
any non-empty tuple, the empty tuple,()
(42.781, -73.901), ('vladimir')
any non-empty string, the empty string,""""
""bluster"", ""kimchee""
This allows us to use conditions such as these:
if x % 2:
# it's odd
print(f""{x} is odd"")
if not s:
print(""The string, s, is empty!"")
If you want to know if something is truthy or falsey in Python, you
can try converting it to a Boolean by using thebool() method.
>>> bool(1)
True
>>> bool(-1)
True
>>> bool(0)
False
>>> bool('xyz')
True
>>> bool('')
False
>>> bool(None)
False
8.6 Input validation
Earlier, we wrote a Python program to convert kilograms to pounds.
We trusted the user to provide a valid integer or float for weight in
kilograms, and we did nothing to ensure that the information provided
was reasonable. That is, we did notvalidate the input.
Validation of input is a crucial part of any program that accepts
user input. Users sometimes provide invalid input. Some reasons for this
include:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 153}","**Metadata**
Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
Page: 153

### Input Validation

**Truthy Things**
- Any non-zero valued int or float
    - Example: 5, -17, 3.1415
- Any non-empty list
    - Example: ['foo'], [0], ['a', 'b', 'c']
- Any non-empty tuple
    - Example: (42.781, -73.901), ('vladimir')
- Any non-empty string
    - Example: ""bluster"", ""kimchee""

**Falsey Things**
- 0, 0.0
- The empty list: []
- The empty tuple: ()
- The empty string: """"

**Examples**
```python
if x % 2:
    # it's odd
    print(f""{x} is odd"")

if not s:
    print(""The string, s, is empty!"")
```

**Checking Truthiness or Falsiness**

Use the bool() method to convert a value to a Boolean type:
```python
>>> bool(1)
True

>>> bool(-1)
True

>>> bool(0)
False

>>> bool('xyz')
True

>>> bool('')
False

>>> bool(None)
False
```

**Input Validation for Weight Conversion Program**

Validate the user input to ensure a valid integer or float is provided for weight in kilograms:
```python
# Get weight in kilograms from user
weight_kg = float(input(""Enter weight in kilograms: ""))

# Validate input is a positive number
if weight_kg <= 0:
    print(""Invalid input: Weight must be a positive number"")
    exit()

# Convert weight to pounds and print result
weight_lbs = weight_kg * 2.205
print(f""{weight_kg} kg is equal to {weight_lbs} lbs"")
```"
"page_content='140 Branching and Boolean expressions
• The prompt was insuﬀiciently clear.
• The user did not read the prompt carefully.
• The user did not understand what kind of input is needed.
• The user was being mischievous—trying to break the program.
• The user made a typo or formatting error when entering data.
We would like our programs to respond gracefully to invalid input.
In this textbook, we’ll see several different ways to validate input and
to respond to invalid input. The first that we’ll learn right now is simple
bounds checking.
Bounds checking is an approach to input validation which ensures
that a value is in some desired range. To return to our kilogram to
pound conversion program, it does not make sense for the user to enter a
negative value for the weight in kilograms. We might guard against this
with bounds checking.
POUNDS_PER_KILOGRAM = 2.204623
kg = float(input('Enter weight in kilograms: '))
if kg >= 0:
# convert kilograms to pounds and print result
else:
print('Invalid input! '
'Weight in kilograms must not be negative!')
So our program would perform the desired calculations if and only if
the weight in kilograms entered by the user were non-negative (that is,
greater than or equal to zero).
Here’s another example. Let’s say we’re writing a program that plays
the game evens and odds . This is a two-player game where one player
calls “even” or “odd”, and then the two players simultaneously reveal
zero, one, two, three, four or five fingers. Then the sum is calculated and
the caller wins if the sum agrees with their call.
In such a game, we’d want the user to enter an integer in the interval
[0, 5]. Here’s how we might validate this input:
fingers = int(input('Enter a number of fingers [0, 5]: '))
if fingers >= 0 and fingers <= 5:
# Generate a random integer in the range [0, 5],
# calculate sum, and report the winner.
else:
print('Invalid input!')
Admittedly, these aren’t satisfactory solutions. Usually, when a user en-
ters invalid data the program gives the user another chance, or chances,
until valid data are supplied. We’ll see how to do this soon.
Nevertheless, simple bounds checking is a good start!' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 154}","## Input Validation and Error Handling
### Introduction
- Invalid input can arise from unclear prompts, user misreading, misunderstanding, malicious intent, or data entry errors.
- Programs should respond gracefully to invalid input.

### Bounds Checking
- Bounds checking ensures that input values fall within a specified range.
- Example: Validating weight in kilograms entered by the user (must be non-negative).

```python
POUNDS_PER_KILOGRAM = 2.204623
kg = float(input('Enter weight in kilograms: '))
if kg >= 0:
    # convert kilograms to pounds and print result
else:
    print('Invalid input!')
```

- Example: Validating input for the ""evens and odds"" game (number of fingers must be in the range [0, 5]).

```python
fingers = int(input('Enter a number of fingers [0, 5]: '))
if fingers >= 0 and fingers <= 5:
    # Generate a random integer in the range [0, 5],
    # calculate sum, and report the winner.
else:
    print('Invalid input!')
```

### Limitations of Bounds Checking
- This approach assumes the user will provide valid input eventually.
- More sophisticated techniques are needed to handle repeated invalid input."
"page_content='Some string methods 141
Comprehension check
1. Can you use De Morgan’s Laws (see: Boolean expressions) to
rewrite the bounds checking above?
2. If we were to do this, would we be checking to see iffingers is in
the desired range or outside the desired range?
3. If your answer to 2 (above) wasoutside the desired range , how
would you need to modify the program?
8.7 Some string methods
Python provides us with many tools for manipulating strings. We won’t
introduce them all here, but instead we’ll demonstrate a few which we’ll
use in programming exercises, and then introduce more as we need them.
First, what is astring method? If you’ve ever programmed in Java or
C# or other OOP language, you may be familiar with methods. If not,
don’t fret, because the concept isn’t too diﬀicult.
Strings are a type ofobject in Python. Consider what happens when
we ask Python what type the string “Mephistopheles” is.
>>> type('Mephistopheles')
<class 'str'>
What Python is telling us is that “Mephistopheles” is an object of type
str.
When the developers of Python defined the typesstr,int,float,bool,
etc. they createdclasses corresponding to these different types of objects.
We won’t cover any object-oriented programming in this book, but you
can think of a class as a blueprint for creating objects of a given type.
We instantiate an object by making an assignment, for example
n = 42
creates anobject of typeint, and
s = 'Cheese Shoppe'
creates anobject of typestr, and so on. The class definitions give Python
a blueprint for instantiating objects of these different types.
One of the things classes allow us to do is to definemethods that are
part of the class definition and which are included with the objects along
with their data. Methods are nothing more than functions defined for a
class of objects which operate on the data of those objects.
Here’s an example. Let’s create a string object,s
>>> s = 'mephistopheles'' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 155}","## Metadata

- Page Number: 155
- Source: ""An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf""

## Content

### 8.7 Some String Methods

Python offers a range of tools for string manipulation. This section introduces some commonly used methods, with additional methods introduced as needed.

#### String Methods: An Overview

In Python, strings are objects. When we ask Python for the type of a string, we get:

```
>>> type('Mephistopheles')
<class 'str'>
```

This indicates that ""Mephistopheles"" is an object of type str.

When Python defines types like str, int, float, bool, etc., it creates corresponding classes. A class serves as a blueprint for creating objects of a specific type.

We create an object through assignment, e.g.:

```
n = 42
```

This creates an object of type int, while

```
s = 'Cheese Shoppe'
```

creates an object of type str.

Classes allow us to define methods, which are functions included with the objects along with their data. Methods operate on the data of the objects they're associated with.

### Example

Consider the following string object, s:

```
>>> s = 'mephistopheles'
```

We can use the following methods on s:

- `s.upper()` converts the string to uppercase
- `s.lower()` converts the string to lowercase
- `s.title()` capitalizes the first letter of each word
- `s.capitalize()` capitalizes the first letter of the string
- `s.swapcase()` swaps the case of each character
- `s.strip()` removes leading and trailing whitespace

### Comprehension Check

**1. Can you use De Morgan's Laws to rewrite the bounds checking shown earlier?**

Yes, De Morgan's Laws can be used to rewrite the bounds checking as follows:

```
if not (fingers >= 0 and fingers <= 5):
    print('The number of fingers must be between 0 and 5.')
```

**2. If we were to do this, would we be checking to see if fingers is in the desired range or outside the desired range?**

We would be checking if fingers is outside the desired range.

**3. If your answer to 2 (above) was outside the desired range, how would you need to modify the program?**

To check if fingers is in the desired range, we would need to change the condition to:

```
if fingers >= 0 and fingers <= 5:
    print('The number of fingers is within the desired range.')
```"
"page_content='142 Branching and Boolean expressions
Now, just like we can access individual members of themath mod-
ule with the member (.) operator (for example,math.pi, math.sqrt(2),
math.sin(0.478), etc.) we can access string methods the same way!
For example, thecapitalize() method can be called for any string
object, and it will return a copy of the string with the first character
capitalized (note: this does not modify the string, it just returns a copy
of the string).
>>> s = 'mephistopheles' # note: this is all lower case
>>> s.capitalize()
'Mephistopheles'
Here’s another method:upper() (you can guess what this does).
>>> s = 'mephistopheles' # note: this is all lower case
>>> s.upper()
'MEPHISTOPHELES'
Now what if we had a string in all upper case, but wanted it in lower
case?
>>> s = 'PLEASE STOP YELLING'
>>> s.lower()
'please stop yelling'
As you might imagine, these can come in handy, and there are many
more (take a peek atBuilt-in T ypes (https://docs.python.org/3/librar
y/stdtypes.html) and scroll down toString Methods if you’re curious).
It is important to keep in mind that these do not alter the string’s
value, they onlyreturn an altered copy of the string.
>>> s = 'PLEASE STOP YELLING'
>>> s.lower()
'please stop yelling'
>>> s
'PLEASE STOP YELLING'
If you want to use the result returned by these methods you may need
to assign the result to a new object or overwrite the value of the current
variable, thus:
>>> s = 'PLEASE STOP YELLING'
>>> s = s.lower()
>>> s
'please stop yelling'
This isn’t always necessary, but keep this in mind.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 156}","**Formatting of the Document** 

**Metadata**
- Page: 156
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Section 1: Accessing String Methods**

**Subsection 1.1: Using Member Operator (.)**

- Access individual members of the math module using the member (.) operator (e.g., math.pi).
- Similarly, access string methods by appending them with the member operator (e.g., s.capitalize()).

**Subsection 1.2: Capitalizing Strings**

**Example:**
```
>>> s = 'mephistopheles'
>>> s.capitalize()
'Mephistopheles'
```

**Subsection 1.3: Making Strings Uppercase**

**Example:**
```
>>> s.upper()
'MEPHISTOPHELES'
```

**Subsection 1.4: Converting Uppercase Strings to Lowercase**

**Example:**
```
>>> s = 'PLEASE STOP YELLING'
>>> s.lower()
'please stop yelling'
```

**Section 2: Return Value of String Methods**

- String methods do not alter the original string, they return an altered copy.
- To use the modified value, assign it to a new object or overwrite the current variable (e.g., s = s.lower()).

**Table 1. Summary of String Methods**

| Method | Description |
|---|---|
| capitalize() | Capitalizes the first character of the string |
| upper() | Converts the string to uppercase |
| lower() | Converts the string to lowercase |"
"page_content='Some string methods 143
Some applications
Let’s say we wanted to write a program that prompted the user to see
if they wish to continue. At some point in our code, we might have
something like this:
response = input('Do you wish to continue? Enter ""y"" '
'to continue or any other key to abort: ')
if response == 'y':
# This is where we'd continue whatever we were doing
else:
# This is where we'd abort
What would happen if the user were to enter upper case ‘Y’? Clearly the
user intends to continue, but the comparison
response == 'y'
would returnFalse and the program would abort. That might make for
an unhappy user.
We could write
response = input('Do you wish to continue? Enter ""y"" '
'to continue or any other key to abort: ')
if response == 'y':
# This is where we'd continue whatever we were doing
elif response == 'Y':
# This is where we'd continue whatever we were doing
else:
# This is where we'd abort
or
response = input('Do you wish to continue? Enter ""y"" '
'to continue or any other key to abort: ')
if response == 'y' or response == 'Y':
# This is where we'd continue whatever we were doing
else:
# This is where we'd abort
Instead, we could uselower() and simplify our code!
response = input('Do you wish to continue? Enter ""y"" to '
'continue or any other key to abort: ')
if response.lower() == 'y':
# This is where we'd continue whatever we were doing
else:
# This is where we'd abort' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 157}","## Some String Methods

### Some Applications

Let’s say we wanted to write a program that prompted the user to see if they wish to continue. At some point in our code, we might have something like this:

```
response = input('Do you wish to continue? Enter ""y"" '
'to continue or any other key to abort: ')
if response == 'y':
# This is where we'd continue whatever we were doing
else:
# This is where we'd abort
```

What would happen if the user were to enter upper case ‘Y’? Clearly the user intends to continue, but the comparison

```
response == 'y'
```

would return **False**, and the program would abort. That might make for an unhappy user.

We could write

```
response = input('Do you wish to continue? Enter ""y"" '
'to continue or any other key to abort: ')
if response == 'y':
# This is where we'd continue whatever we were doing
elif response == 'Y':
# This is where we'd continue whatever we were doing
else:
# This is where we'd abort
```

or

```
response = input('Do you wish to continue? Enter ""y"" '
'to continue or any other key to abort: ')
if response == 'y' or response == 'Y':
# This is where we'd continue whatever we were doing
else:
# This is where we'd abort
```

Instead, we could use **lower()** and simplify our code!

```
response = input('Do you wish to continue? Enter ""y"" to '
'continue or any other key to abort: ')
if response.lower() == 'y':
# This is where we'd continue whatever we were doing
else:
# This is where we'd abort'
```

### Metadata

- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 157"
"page_content='144 Branching and Boolean expressions
This code (above) behaves the same whether the user enters ‘y’ or ‘Y’,
because we convert to lower case before performing the comparison. This
is one example of an application for string methods.
Another might be dealing with users that have the CAPS LOCK key
on.
name = input('Please enter your name: ')
# Now what if the user enters: 'EGBERT'?
# We can fix that:
name = name.capitalize()
# Now name is 'Egbert'
There arelots of uses.
8.8 Flow charts
Flow charts are a convenient and often used tool for representing the
behavior of a program (or portion thereof) in a diagram. They can help
us reason about the behavior of a program before we start writing it. If
we have a good flow chart, this can be a useful “blueprint” for a program.
We’ll begin with the basics. The most commonly used elements of a
flow chart are:
• ellipses, which indicate the start or end of a program’s execution,
• rectangles, which indicate performing some calculation or task,
• diamonds, which indicate a decision, and
• directed edges (a.k.a. arrows), which indicate process flow.
Figure 8.1: Basic flow chart elements
Diamonds (decisions) have one input and two outputs. It is at these
points that we test some condition. We refer to this as branching—our' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 158}","## Python String Methods

### Conversion Methods

- **str.lower()**: Converts the string to lowercase.
- **str.upper()**: Converts the string to uppercase.
- **str.capitalize()**: Converts the first letter of the string to uppercase and the rest to lowercase.

### Example:

```python
# Convert 'EGBERT' to 'Egbert'
name = 'EGBERT'
name = name.capitalize()
print(name)  # Output: Egbert
```

## Flowcharts

### Basic Elements

- **Ellipses**: Indicate the start or end of program execution.
- **Rectangles**: Indicate performing some calculation or task.
- **Diamonds**: Indicate a decision (branching).
- **Directed Edges**: Indicate process flow.

### Diamonds (Decision)

- Have one input and two outputs.
- Test a condition and determine which output to follow."
"page_content='Flow charts 145
path through or flow chart can follow one of two branches. If the con-
dition is true, we take one branch. If the condition is false, we take the
other branch.
Figure 8.2: Branches
A minimal example
Here’s a minimal example—a program which prompts a user for an inte-
ger, n, and then, ifn is even, the program prints “n is even”, otherwise
the program prints “n is odd!”
In order to determine whethern is even or odd, we’ll perform a simple
test: We’ll calculate the remainder with respect to modulus two and
compare this value to zero.5 If the comparison yieldsTrue then we know
the remainder when dividing by two is zero and thus,n must be even.
If the comparison yieldsFalse then we know the remainder is one and
thus, n must be odd. (This assumes, of course, that the user has entered
a valid integer.)
Here’s what the flow chart for this program looks like:
5 Remember, if we have some integer 𝑛, then it must be the case that either 𝑛 ≡ 0
mod 2 or 𝑛 ≡ 1 mod 2. Those are the only possibilities.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 159}","### Flow Charts

**Metadata**

* Page number: 159
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**1. Branches**

A path through or flow chart can follow one of two branches. If the condition is true, we take one branch. If the condition is false, we take the other branch.

**2. A Minimal Example**

#### Figure 8.2: Branches

Here's a minimal example—a program which prompts a user for an integer, n, and then, if n is even, the program prints “n is even”, otherwise the program prints “n is odd!”

In order to determine whether n is even or odd, we'll perform a simple test: We'll calculate the remainder with respect to modulus two and compare this value to zero.**5** If the comparison yields True then we know the remainder when dividing by two is zero and thus, n must be even. If the comparison yields False then we know the remainder is one and thus, n must be odd. (This assumes, of course, that the user has entered a valid integer.)

**5. Determining if a Number is Even or Odd**

Remember, if we have some integer 𝑛, then it must be the case that either 𝑛 ≡ 0 mod 2 or 𝑛 ≡ 1 mod 2. Those are the only possibilities."
"page_content='146 Branching and Boolean expressions
Figure 8.3: Even or odd
• We start at the top (the ellipse labeled “start”).
• From there, we proceed to the next step: prompting the user for
an integer,n.
• Then we test to see if the remainder when we dividen by two equals
zero.
– If it does, we follow the left branch, and we print “n is even!”
– Otherwise, we follow the right branch, and we print “n is odd!”
• Finally, our program ends.
Here it is, in Python:
""""""
CS 1210
Even or odd?
""""""
n = int(input('Please enter an integer: '))
if n % 2 == 0:
print('n is even!')
else:
print('n is odd!')' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 160}","### Branching and Boolean Expressions

**Metadata**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 160

**Content**

**Figure 8.3: Even or Odd**

We start at the top (the ellipse labeled ""start"").

From there, we proceed to the next step: prompting the user for an integer, n.

Then we test to see if the remainder when we dividen by two equals zero.
- If it does, we follow the left branch, and we print ""n is even!""
- Otherwise, we follow the right branch, and we print ""n is odd!""

Finally, our program ends.

**Python Code:**

```python
# CS 1210
# Even or odd?
n = int(input('Please enter an integer: '))
if n % 2 == 0:
    print('n is even!')
else:
    print('n is odd!')
```"
"page_content='Flow charts 147
The branching takes place here:
if n % 2 == 0:
print('n is even!')
else:
print('n is odd!')
Notice there are two branches:
• the if clause—the portion that’s executed if the expressionn % 2
== 0 evaluates toTrue; and
• the else clause—the portion that’s executed if the expressionn %
2 == 0 evaluates toFalse.
Another example: Is a number positive, negative, or zero?
Let’s say we want to decide if a number is positive, negative, or zero.
In this instance, there arethree possibilities. How do we do this with
comparisons that only yield True or False? The answer is: with more
than one comparison !
First we’ll check to see if the number is greater than zero. If it is, it’s
positive.
But what if it isnot greater than zero? Well, in that case, the number
could be negative or it could be zero. There are no other possibilities.
Why? Because we’ve already ruled out the possibility of the number
being positive (by the previous comparison).
Here’s a flow chart:
Figure 8.4: Positive, negative, or zero
As before, we start at the ellipse labeled “start.” Then we prompt the
user for a float,x. Then we reach the first decision point: Isx greater' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 161}","**Flow Charts**
Page 161

## Branching and Decision Making

### Branching

Branching occurs when a portion of code is executed only if a certain condition is met. This condition is typically evaluated using a comparison operator, such as `==`, `<`, or `>`.

**Example:**

```
if n % 2 == 0:
    print('n is even!')
else:
    print('n is odd!')
```

In this example, the branching takes place at the line `if n % 2 == 0:`.

* If the condition `n % 2 == 0` is `True`, the code within the `if` clause (i.e., `print('n is even!')`) is executed.
* If the condition is `False`, the code within the `else` clause (i.e., `print('n is odd!')`) is executed.

### Decision Trees

Decision trees are a graphical representation of branching logic. They consist of nodes and branches.

**Nodes:**

* **Start:** The starting point of the decision tree.
* **Decision:** A comparison that determines which branch to follow.
* **End:** The final outcome of the decision tree.

**Branches:**

* **True:** The branch to follow if the comparison is `True`.
* **False:** The branch to follow if the comparison is `False`.

**Example:**

```
Figure 8.4: Positive, negative, or zero
```

This decision tree helps determine whether a number is positive, negative, or zero.

* **Start:** The starting point.
* **Decision 1:** Is x greater than zero?
    * **True:** The number is positive (End).
    * **False:** The number is not greater than zero.
* **Decision 2:** Is x equal to zero?
    * **True:** The number is zero (End).
    * **False:** The number is negative (End)."
"page_content='148 Branching and Boolean expressions
than zero? If it is, we knowx is positive, we follow the left branch, we
print “x is positive”, and we’re done.
If x is not positive, we follow the right branch. This portion of the
flow chart is only executed if the first test yieldsFalse (that is,x is not
greater than zero). Here, we’re faced with another choice: Isx less than
zero? If it is, we knowx is negative, we follow the left branch (from our
second decision point), we print “x is negative”, and we’re done.
There’s one last branch: the one we’d follow ifx is neither positive
nor negative—so itmust be zero. If we follow this branch, we print “x is
zero”, and we’re done.
Here it is in Python,
""""""
CS 1210
Positive, negative, or zero?
Using nested if.
""""""
x = float(input('Please enter an real number: '))
if x > 0:
print('x is positive!')
else:
if x < 0:
print('x is negative!')
else:
print('x is zero!')
This structure, which is quite common, is called a “nested if” statement.
Python provides us with another, equivalent way to handle this. We
can implement the flow chart for our three-way decision usingelif, thus:
""""""
CS 1210
Positive, negative, or zero?
Using elif.
""""""
x = float(input('Please enter an real number: '))
if x > 0:
print('x is positive!')
elif x < 0:
print('x is negative!')
else:
print('x is zero!')
Both programs—the one with the nestedif and the one withelif—
correctly implement the program described by our flow chart. In some
cases, the choice is largely a matter of taste. In other cases, we may have
reason to prefer one or the other. All things being equal (in terms of' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 162}","### Content Structuring

#### Branching and Boolean Expressions

### Nested 'if' Statements vs. 'elif' Statements

**Nested 'if' Statements**

- Python offers a nested 'if' structure to implement complex decision-making.
- Each 'if' condition is evaluated in sequence, and the first true condition's code block is executed.
- Example:
```python
if condition1:
    # code block for condition1
    if condition2:
        # code block for condition2
else:
    # code block for when none of the conditions are true
```

**'elif' Statements**

- 'elif' provides an alternative way to handle multiple conditions.
- It eliminates the need for nested 'if' statements and offers a more concise and readable code.
- Each subsequent 'elif' condition is evaluated only if all previous conditions were false.
- Example:
```python
if condition1:
    # code block for condition1
elif condition2:
    # code block for condition2
else:
    # code block for when none of the conditions are true
```

### Comparison

**| Feature | Nested 'if' Statements | 'elif' Statements |
|---|---|---|
| Syntax | Multiple nested 'if' blocks | Sequence of 'if' and 'elif' blocks |
| Execution | Evaluates all conditions sequentially | Evaluates subsequent conditions only if previous conditions are false |
| Code Readability | Can be verbose for complex decisions | More concise and clear |
| Use Case | Suitable for simple decision-making | Preferred for handling multiple conditions or complex decision-making |"
"page_content='Decision trees 149
behavior), I think theelif solution presented here is the more elegant
of the two.
In any event, I hope you see that flow charts are a useful tool for
diagramming the desired behavior of a program. With a good flow chart,
implementation can be made easier. You should feel free to draw flow
charts of programs before you write your code. You may find that this
helps clarify your thinking and provides a plan of attack.
8.9 Decision trees
In another section we saw how to use the diamond symbol in a flow chart
to represent decisions and branching, and we saw that a flow chart (or
program) can have multiple branches.
Another way of representing a decision-making process is with ade-
cision tree. Decision trees are commonly used for species identification.
6
Here’s an example:
Figure 8.5: Decision tree for fruit
Here, we start on the left and move toward the right, making decisions
along the way. Notice that at each branching point we have two branches.
So, for example, to reach “watermelon, cantaloupe”, we make the
decisions: soft inside, small seeds, thick skin, and unsegmented. To reach
“peach”, we’d have to have made the decisions: soft inside, pit or stone,
and fuzzy.
6 If you’ve had a course in biology , you may have heard of a cladogram for
representing taxonomic relationships of organisms. A cladogram is a kind of decision
tree. If you’re curious, see: https://en.wikipedia.org/wiki/Cladogram and similar
applications.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 163}","### Decision Trees

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 163

**8.9 Decision Trees**

Another way of representing a decision-making process is with ade-cision tree. Decision trees are commonly used for species identification.

**Example:**

```
Figure 8.5: Decision tree for fruit
```

Here, we start on the left and move toward the right, making decisions
along the way. Notice that at each branching point we have two branches.
So, for example, to reach “watermelon, cantaloupe”, we make the
decisions: soft inside, small seeds, thick skin, and unsegmented. To reach
“peach”, we’d have to have made the decisions: soft inside, pit or stone,
and fuzzy."
"page_content='150 Branching and Boolean expressions
How do we encode these decision points? One way is to treat them as
yes or no questions. So if we ask “Is the fruit soft inside?” then we have
a yes or no answer. If the answer is “no”, then we know the fruit is not
soft inside and thus must be hard inside (like a walnut or almond).
Here’s a snippet of Python code, demonstrating a single question:
response = input('Is the fruit soft inside? y/n ' )
if response == 'y':
# we know the fruit is soft inside
# ...
else:
# we know the fruit is hard inside
# ...
We can write a program that implements this decision tree by using
multiple, nestedif statements.
""""""
CS 1210
Decision tree for fruit identification
""""""
response = input('Is the fruit soft inside? y/n ' )
if response.lower() == 'y':
# soft inside
response = input('Does it have small seeds? y/n ' )
if response.lower() == 'y':
# small seeds
response = input('Does it have a thin skin? y/n ' )
if response.lower() == 'y':
# thin skin
print(""Tomato"")
else:
# thick skin
response = input('Is it segmented? y/n ' )
if response.lower() == 'y':
# segmented
print(""Orange or lemon"")
else:
# unsegmented
print(""Watermelon or cantaloupe"")
else:
# pit or stone
response = input('Is it fuzzy? y/n ' )
if response.lower() == 'y':
# segmented
print(""Peach"")
else:
# unsegmented
print(""Plum"")' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 164}","## Formatting 

### Content Formatting:

**Introduction**

**Encoding Decision Points**

**Single Question Decision Point**

```python
**Python code example**
response = input('Is the fruit soft inside? y/n ' )
if response == 'y':
# we know the fruit is soft inside
# ...
else:
# we know the fruit is hard inside
# ...
```

**Decision Tree Implementation with Nested if Statements**

**Fruit Identification Decision Tree**

```
response = input('Is the fruit soft inside? y/n ' )
if response.lower() == 'y':
# soft inside
    response = input('Does it have small seeds? y/n ' )
    if response.lower() == 'y':
    # small seeds
        response = input('Does it have a thin skin? y/n ' )
        if response.lower() == 'y':
        # thin skin
            print(""Tomato"")
        else:
        # thick skin
            response = input('Is it segmented? y/n ' )
            if response.lower() == 'y':
            # segmented
                print(""Orange or lemon"")
            else:
            # unsegmented
                print(""Watermelon or cantaloupe"")
    else:
    # pit or stone
        response = input('Is it fuzzy? y/n ' )
        if response.lower() == 'y':
        # segmented
            print(""Peach"")
        else:
        # unsegmented
            print(""Plum"")
```

### Metadata Inclusion:

**Metadata**

- Page Number: 164
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf"
"page_content='Exercises 151
else:
# hard inside
print(""Walnut or almond"")
Comprehension check
1. In the decision tree above, Figure8.5, which decisions lead to plum?
(There are three.)
2. Revisit Section8.4 and draw decision trees for the code examples
shown.
8.10 Exercises
Exercise 01
Evaluate the result of the following, given that we have:
a = True
b = False
c = True
Do these on paper first, then check your answers in the Python shell.
1. a or b and c
2. a and b or c
3. a and b and c
4. not a or not b or c
5. not (a and b)
Exercise 02
Evaluate the result of the following, given that we have:
a = 1
b = 'pencil'
c = 'pen'
d = 'crayon'
Do these on paper first, then check your answers in the Python shell.
Some of these may surprise you!
1. a == b
2. b > c
3. b > d or a < 5
4. a != c
5. d == 'rabbit'
6. c < d or b > d
7. a and b < d
8. (a == b) and (b != c)
9. (a and b) and (b < c)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 165}","**Supplemental Document**

**Metadata:**
- Page Number: 165
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Exercises**

**Exercise 01**

**Comprehension Check:**

1. Plum is the result of the following three decisions:
   - Walnut or almond (yes)
   - Fruit (yes)
   - Plum (yes)

2. Decision trees for the code examples in Section 8.4 are not provided in the given information.

**Exercise 02**

**Evaluation Results:**

| Expression | Result |
|---|---|
| a or b and c | True |
| a and b or c | True |
| a and b and c | False |
| not a or not b or c | True |
| not (a and b) | True |
| a == b | False |
| b > c | False |
| b > d or a < 5 | True |
| a != c | True |
| d == 'rabbit' | False |
| c < d or b > d | True |
| a and b < d | False |
| (a == b) and (b != c) | False |
| (a and b) and (b < c) | False |"
"page_content='152 Branching and Boolean expressions
10. not (a and b and c and d)
Ask yourself, what does it mean for'crayon' to be less than'pencil'?
How would you interpret this? Ask yourself, what’s going on when an
expression like0 or 'crayon' is evaluated?
Exercise 03
Complete the followingif statements so that they print the correct mes-
sage. Notice that there are blank spaces in the code that you should
complete. You may assume we have three variables, with string values
assigned: cheese, blankets, toast, for example,
cheese = 'runny'
1. Cheese is smelly and blankets are warm!
if cheese == 'smelly' and :
print('Cheese is smelly and blankets are warm!')
2. Blankets are warm and toast is not pickled. Hint: usenot or !=
if blankets :
print('Blankets are warm but toast is not pickled.')
3. Toast is yummy and so is cheese!
if :
print('Toast is yummy and so is cheese!')
4. Either toast is yummy or toast is green (or maybe both).
if :
print('Either toast is yummy or toast is green '
'(or maybe both).')' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 166}","## Branching and Boolean Expressions

### Exercise 03

Complete the following `if` statements so that they print the correct message. Notice that there are blank spaces in the code that you should complete. You may assume we have three variables, with string values assigned: `cheese`, `blankets`, `toast`, for example,

```python
cheese = 'runny'
```

1. **Cheese is smelly and blankets are warm!**

```python
if cheese == 'smelly' and :
    print('Cheese is smelly and blankets are warm!')
```

2. **Blankets are warm and toast is not pickled.** Hint: use `not` or `!=`

```python
if blankets :
    print('Blankets are warm but toast is not pickled.')
```

3. **Toast is yummy and so is cheese!**

```python
if :
    print('Toast is yummy and so is cheese!')
```

4. **Either toast is yummy or toast is green (or maybe both).**

```python
if :
    print('Either toast is yummy or toast is green '
          '(or maybe both).')
```"
"page_content='Exercises 153
Exercise 04
What is printed at the console for each of the following?
1.
>>> 'HELLO'.capitalize()
2.
>>> s = 'HoverCraft'
>>> s.lower()
3.
>>> s = 'wATer'.lower()
>>> s
Exercise 05
If we have only two possible outcomes in a decision tree, and decisions
are binary, then our tree has only one branching point. If we have four
possible outcomes, then our tree must have three branching points.
a. If we have eight possible outcomes in a decision tree, and decisions
are binary, how many branching points must we have?
b. What about 16?
c. Can you find a formula that calculates the number of branching
points given the number of outcomes? (OK if you can’t, so don’t
sweat it.)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 167}","## Exercise 04

### Question 1:
```
'HELLO'.capitalize()
```
**Output:** 'Hello'

### Question 2:
```
s = 'HoverCraft'
s.lower()
```
**Output:** 'hovercraft'

### Question 3:
```
s = 'wATer'.lower()
s
```
**Output:** 'water'

## Exercise 05

### Question a:
If we have eight possible outcomes in a decision tree, and decisions are binary, we need to have **three** branching points.

### Question b:
If we have 16 possible outcomes in a decision tree, and decisions are binary, we need to have **four** branching points.

### Question c:
The formula to calculate the number of branching points (N) given the number of outcomes (O) is:

**N = log2(O)**

**Example:** For 16 outcomes, we have:

```
N = log2(16) = 4
```"
"page_content='Chapter 9
Structure, development, and
testing
It’s important to be methodical when programming, and in this chapter
we’llseehowbesttostructureyourPythoncode.Followingthisstructure
takes much of the guesswork out of programming. Many questions about
where certain elements of your program belong are already answered for
you. What’s presented here is based on common (indeed nearly universal)
practice for professionally written code.
We’ll also learn a little bit about how to proceed when writing code
(that is, in small, incremental steps), how to test your code, how to use
assertions, and what to do about the inevitable bugs.
Learning objectives
• You will learn about incremental development, and how to use
comments as “scaffolding” for your code.
• You will learn how to organize and structure your code.
• You will understand how Python handles the mainentry point of
your program, and how Python distinguishes between modules that
are imported and modules that are to be executed.
• You will be able to write code with functions that can be imported
and used independently of anydriver code.
• You will understand how to test your code, and when to use asser-
tions in your code.
T erms and Python keywords introduced
• assert (Python keyword) and assertions
• AssertionError
• bug
• driver code
• dunder
• entry point and top-level code environment
• incremental development
• namespace
• rubberducking
155' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 169}","**Chapter 9: Structure, Development, and Testing**

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 169

**Content:**

### Importance of Methodical Programming

It is crucial to follow a methodical approach in programming to avoid guesswork and ensure logical flow.**

### Code Structure

Common practice in professional coding involves organizing code in a specific structure:

**Code Formatting**

Syntax highlighting using triple backticks should be used for code. The programming language should be specified before the triple backticks.

### Incremental Development

* Use comments as ""scaffolding"" for code development.
* Write code in small, incremental steps to facilitate debugging.
* Test code frequently to identify and fix errors early on.

### Code Organization and Structure

* **Entry Point:**
    * Python handles the main entry point of a program, distinguishing between imported and executed modules.

* **Functions:**
    * Create functions that can be imported and used independently of any driver code.

### Testing Code

* Utilize assertions to test code and verify expected behaviors.

### Common Terms and Python Keywords

**Terms:**

* Assertions
* AssertionError
* Bug
* Driver code
* Dunder
* Entry point
* Incremental development
* Namespace
* Rubberducking

**Python Keywords:**

* assert"
"page_content='156 Structure, development, and testing
9.1 main the Python way
So far, we’ve followed this general outline:
""""""
A program which prompts the user for a radius of a circle,
r, and calculates and reports the circumference.
""""""
import math
def circumference(r_):
return 2 * math.pi * r_
r = float(input('Enter a non-negative real number: '))
if r >= 0:
c = circumference(r)
print(f'The circumference of a circle of radius '
f'{r:,.3f} is {c:,.3f}.')
else:
print(f'I asked for a non-negative number, and '
f'{r} is negative!')
This is conventional and follows good coding style (PEP 8).
You may have seen something like this:
""""""
A program which prompts the user for a radius of a circle,
r, and calculates and reports the circumference.
""""""
import math
def circumference(r_):
return 2 * math.pi * r_
def main():
r = float(input('Enter a non-negative real number: '))
if r >= 0:
c = circumference(r)
print(f'The circumference of a circle of radius '
f'{r:,.3f} is {c:,.3f}.')
else:
print(f'I asked for a non-negative number, and '
f'{r} is negative!')
main()
While this is not syntactically incorrect, it’s not really the Python way
either.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 170}","**Formatting Instructions:**

1. **Content Structuring:**

   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**

   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**

   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

       Example:
       ```python
       # Python code example
       print(""Hello, World!"")
       
4. Give difference in tabular format if possible
5. Include examples clearly if provided

6. Do not generate any content by yourself, just format provided content. Also, keep answers in brief. Do not cut short, just put it full content as it is without changing anything.
If content is of 1000 words, give all 1000 words. Do not cut short. Strictly follow this rule. No content or should be modified. Give exact same length content as provided.

**Formatted Output:**

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 170

**9.1 main the Python way**

**So far, we’ve followed this general outline:**

```python
A program which prompts the user for a radius of a circle,
r, and calculates and reports the circumference.
```

**Conventional Python Way:**

```python
import math

def circumference(r_):
  return 2 * math.pi * r_

r = float(input('Enter a non-negative real number: '))
if r >= 0:
  c = circumference(r)
  print(f'The circumference of a circle of radius '
        f'{r:,.3f} is {c:,.3f}.')
else:
  print(f'I asked for a non-negative number, and '
        f'{r} is negative!')
```

**Non-Pythonic Way:**

```python
A program which prompts the user for a radius of a circle,
r, and calculates and reports the circumference.
```

```python
import math

def circumference(r_):
  return 2 * math.pi * r_

def main():
  r = float(input('Enter a non-negative real number: '))
  if r >= 0:
    c = circumference(r)
    print(f'The circumference of a circle of radius '
          f'{r:,.3f} is {c:,.3f}.')
  else:
    print(f'I asked for a non-negative number, and '
          f'{r} is negative!')

main()
```"
"page_content='main the Python way 157
Some textbooks use this, and there are abundant examples on the
internet, perhaps attempting to make Python code look more similar to
languages like C or Java (in the case of Java, an executable program
must implement main()). But again,this is not the Python way .
Here’s how things work in Python. Python has what is called thetop-
level code environment. When a program is executed in this environment
(which is what happens when you run your code within your IDE or
from the command line), there’s a special variable __name__ which is
automatically set to the value'__main__'.1 '__main__' is the name of
the environment in which top-level code is run.
So if we wish to distinguish portions of our code which are auto-
matically run when executed (sometimes calleddriver code) from other
portions of our code (like imports and the functions we define), we do it
thus:
""""""
A program which prompts the user for a radius of a circle,
r, and calculates and reports the circumference.
""""""
import math
def circumference(r_):
return 2 * math.pi * r_
if __name__ == '__main__':
# This code will only be executed if this module
# (program) is run. It will *not* be executed if
# this module is imported.
r = float(input('Enter a non-negative real number: '))
if r >= 0:
c = circumference(r)
print(f'The circumference of a circle of radius '
f'{r:,.3f} is {c:,.3f}.')
else:
print(f'I asked for a non-negative number, and '
f'{r} is negative!')
Let’s say we saved this file ascircle.py. If we were to run this program
from our IDE or from the command line with
$ python circle.py
Python would read the file, would see that we’re executing it, and thus
wouldset __name__ equalto '__main__'.Then, after reading the definition
of the functioncircumference(r_), it would reach theif statement,
1 Some other programming languages refer to the top-level as the entry point .
'__main__' is the name of a Python program’s entry point.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 171}","**Python's Top-Level Code and the __name__ Variable**

### Metadata

* Page Number: 157
* Line Numbers: N/A
* Source: An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Key Sections

**1. The Python Way**

**2. Top-Level Code and the __name__ Variable**

### Content

**1. The Python Way**

- Some textbooks and online examples attempt to make Python code look like C or Java, including the use of the main().
- However, this is not the Python way.

**2. Top-Level Code and the __name__ Variable**

- Python has a top-level code environment.
- When a program is executed in this environment, the special variable __name__ is set to '__main__'.
- __main__ is the name of the environment in which top-level code is run.

**Example:**

```python
# A program which prompts the user for a radius of a circle,
# r, and calculates and reports the circumference.
import math
def circumference(r_):
    return 2 * math.pi * r_
if __name__ == '__main__':
    # This code will only be executed if this module
    # (program) is run. It will *not* be executed if
    # this module is imported.
    r = float(input('Enter a non-negative real number: '))
    if r >= 0:
        c = circumference(r)
        print(f'The circumference of a circle of radius '
        f'{r:,.3f} is {c:,.3f}.')
    else:
        print(f'I asked for a non-negative number, and '
        f'{r} is negative!')
```

- When this program is run (e.g., using `python circle.py`), Python reads the file and sets __name__ to '__main__'.
- The code within the if __name__ == '__main__': block will then be executed.
- If the program is imported as a module, __name__ will not be set to '__main__', and the code within the if block will not be executed."
"page_content='158 Structure, development, and testing
if __name__ == '__main__':
This condition evaluates to True, and the code nested within this if
statement would be executed. So it would prompt the user for a radius,
and then check for valid input and return an appropriate response.
Another simple demonstration
Consider this Python program
""""""
tlce.py (top-level code environment)
Another program to demonstrate the significance
of __name__ and __main__.
""""""
print(__name__)
if __name__ == '__main__':
print(""Hello World!"")
Copy this code and save it astlce.py (short for top-level code environ-
ment). Then, try running this program from within your IDE or from
the command line. What will it print when you run it? It should print
__main__
Hello World!
So, you see, when we run a program in Python, Python sets the value
of the variable__name__ to the string '__main__', and then, when the
program performs the comparison__name__ == '__main__' this evaluates
to True, and the code within theif is executed.
What happens if we import our module in another
program?
Nowwriteanotherprogramwhichimportsthismodule(formallywerefer
to Python programs asmodules).
In the same directory where you havetlce.py, create a new file
""""""
A program which imports tlce (from the previous example).
""""""
import tlce
Save this asuse_tlce.py and then run it. What is printed? This program
should print' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 172}","## Metadata
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 172

## Content Structuring

### if __name__ == '__main__'

#### Description
The `if __name__ == '__main__'` condition checks whether the current module is being run as the main program or if it is being imported as a module. This condition is commonly used to define code that should only run when the module is executed as the main program, and not when it is imported.

#### Execution Flow
- If the `__name__` variable is equal to `'__main__'`, the code nested within the `if` statement will be executed.
- If the `__name__` variable is not equal to `'__main__'`, the code nested within the `if` statement will be skipped.

### Examples
**Example 1:**
```python
# check if the module is being run as the main program
if __name__ == ""__main__"":
    # code to be executed when the module is run as the main program
```

**Example 2:**
```python
# check if the module is being imported
if __name__ != ""__main__"":
    # code to be executed when the module is imported
```

### Benefits of Using `if __name__ == '__main__'`
- It allows you to write code that is specific to the main program.
- It prevents the code from being executed when the module is imported.
- It makes it easier to test the module as a standalone program."
"page_content='main the Python way 159
tlce
So, if we importtlce then Python sets__name__ equal to'tlce', and the
body of theif is never executed.
Why would we do this? One reason is that we can write functions
in one module, and import the module without executing any of the
module’s code, but make the functions available to us. Sound familiar?
It should. Consider what happens when we import the math module.
Nothing is executed, but now we havemath.pi, math.sqrt(), math.sin(),
etc. available to us.
A complete example
Earlierwecreatedaprogramwhich,givensomeradius, 𝑟,providedbythe
user, calculated the circumference, diameter, surface area, and volume of
a sphere of radius𝑟. Here it is, with some minor modifications, notably
the addition of the check on the value of__name__.
""""""
Sphere calculator (sphere.py)
Prompts the user for some radius, r, and then prints
the circumference, diameter, surface area, and volume
of a sphere with this radius.
""""""
import math
def circumference(r_):
return 2 * math.pi * r_
def diameter(r_):
return 2 * r_
def surface_area(r_):
return 4 * math.pi * r_ ** 2
def volume(r_):
return 4 / 3 * math.pi * r_ ** 3
if __name__ == '__main__':
r = float(input(""Enter a radius >= 0.0: ""))
if r < 0:
print(""Invalid input"")
else:
print(f""The diameter is ""
f""{diameter(r):0,.3f} units."")
print(f""The circumference is ""
f""{circumference(r):0,.3f} units."")
print(f""The surface area is ""' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 173}","## Python Modules

### Content Structuring

**Importing Modules**

**Metadata**

- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 173

**Code Example**

```python
import math
```

**Importing Without Executing Code**

**Metadata**

- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 159

**Explanation**

Importing a module without executing its code can be useful for making functions available without running any other code in the module.

**Code Example**

```python
import tlce

# tlce's body will not execute
```

**Example: math Module**

**Metadata**

- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 159

**Explanation**

When importing the math module, no code is executed, but functions like math.pi, math.sqrt(), and math.sin() become available.

**Complete Example: Sphere Calculator**

**Metadata**

- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 173

**Code Example**

```python
import math

def circumference(r_):
    return 2 * math.pi * r_

def diameter(r_):
    return 2 * r_

def surface_area(r_):
    return 4 * math.pi * r_ ** 2

def volume(r_):
    return 4 / 3 * math.pi * r_ ** 3

if __name__ == '__main__':
    r = float(input(""Enter a radius >= 0.0: ""))
    if r < 0:
        print(""Invalid input"")
    else:
        print(f""The diameter is ""
              f""{diameter(r):0,.3f} units."")
        print(f""The circumference is ""
              f""{circumference(r):0,.3f} units."")
        print(f""The surface area is ""
              f""{surface_area(r):0,.3f} square units."")
        print(f""The volume is ""
              f""{volume(r):0,.3f} cubic units."")
```"
"page_content='160 Structure, development, and testing
f""{surface_area(r):0,.3f} units squared."")
print(f""The volume is ""
f""{volume(r):0,.3f} units cubed."")
Now we have a program that prompts the user for some radius,𝑟, and
uses some convenient functions to calculate these other values for a
sphere. But it’s not a stretch to see that we might want to use these
functions somewhere else!
Let’s say we’re manufacturing yoga balls—those inflatable balls that
people use for certain exercises requiring balance. We’d want to know
how much plastic we’d need to manufacture some number of balls. Say
our yoga balls are 33 centimeters in radius when inflated, and that we
want the thickness of the balls to be 0.1 centimeter.
In order to complete this calculation, we’ll need to calculate volume.
Why reinvent the wheel? We’ve already written a function to do this!
Let’s importsphere.py and use the function provided by this module.
""""""
Yoga ball material requirements
""""""
import sphere
# sphere.py must be in the same directory for this to work
RADIUS_CM = 33
THICKNESS_CM = 0.1
VINYL_G_PER_CC = 0.95
G_PER_KG = 1000
if __name__ == '__main__':
balls = int(input(""How many balls do you want ""
""to manufacture this month? ""))
outer = sphere.volume(RADIUS_CM)
inner = sphere.volume(RADIUS_CM - THICKNESS_CM)
material_per_ball = outer - inner
total_material = balls * material_per_ball
total_material_by_weight
= total_material / VINYL_G_PER_CC / G_PER_KG
print(f""To make {balls} balls, you will need ""
f""{total_material:,.1f} cc of vinyl."")
print(f""Order at least ""
f""{total_material_by_weight:,.1f} ""
f""kg of vinyl to meet material requirements."")
See? We’ve importedsphere so we can use its functions. When we import
sphere, __name__ (for sphere) takes on the valuesphere so the code under
if __name__ == '__main__' isn’t executed!
This allows us to have our cake (a program that calculates diameter,
circumference, surface area, and volume of a sphere) and eat it too (by' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 174}","### Formatting Instructions

1. **Content Structuring:**

   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**

   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**

   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

       Example:
       ```python
       # Python code example
       print(""Hello, World!"")
       
4. **Give difference in tabular format if possible**

5. **Include examples clearly if provided**

6. **Do not generate any content by your self just format privided content also keep answers in breif do not cut short it just put it full content as it is without changing any thing**

If content is of 1000 words give all 1000 words do not cut short it stirictly follow this rule no content or should be modified give exact same length content as provided

### Content

**Content Formatting**

**Content Structuring**

* **Section 1: Introduction**
    * Paragraph 1: Brief overview of content formatting principles.
    * Paragraph 2: Importance of metadata inclusion.
    * Paragraph 3: Guidelines for code formatting.

* **Section 2: Metadata Inclusion**
    * Paragraph 1: Explanation of metadata types.
    * Paragraph 2: Examples of metadata formatting.

* **Section 3: Code Formatting**
    * Paragraph 1: Types of code formatting.
    * Paragraph 2: Benefits of code formatting.
    * Paragraph 3: Code formatting best practices.

* **Section 4: Additional Formatting Techniques**
    * Paragraph 1: Creating tables for easy data comparison.
    * Paragraph 2: Including examples for better understanding.
    * Paragraph 3: Avoiding unnecessary modifications.

**Examples**

**Code Formatting Example**

```python
# Python code example
def sum_numbers(a, b):
    """"""Calculates the sum of two numbers.

    Args:
        a (int): First number.
        b (int): Second number.

    Returns:
        int: The sum of the two numbers.
    """"""
    return a + b
```

**Table Example**

| Feature | Description |
|---|---|
| Metadata | Page number, line number, source name |
| Code | Programming language, syntax highlighting |
| Examples | Clear illustrations of concepts |
| Other | Tables for data comparison |

**Formatting Best Practices**

**Keep it concise:** Avoid unnecessary details and focus on the essential information.
**Use headings and subheadings:** Organize content into logical sections for easy navigation.
**Include metadata clearly:** Provide all relevant metadata at the beginning or in relevant sections.
**Format code properly:** Use syntax highlighting and indentation for readability.
**Consider using tables:** Present data in a clear and easy-to-compare format.
**Provide examples:** Use examples to illustrate concepts and make them more understandable."
"page_content='Program structure 161
allowing imports and code reuse)! How cool is that?
What’s up with the funny names?
These funny names__name__ and '__main__' are calleddunders. Dunder
is short fordouble underscore. This is a naming convention that Python
uses to set special variables, methods, and functions apart from the typ-
ical names programmers use for variables, methods, and functions they
define.
9.2 Program structure
There is an order to things, and programs are no different. Your Python
code should follow this general layout:
1. docstring
2. imports (if any)
3. constants (if any)
4. function definitions (if any)
… and then, nested underif __name__ == '__main__': , all the rest of
your code. Here’s an example:
""""""
A docstring, delimited by triple double-quotes,
which includes your name and a brief description
of your program.
""""""
import foo # imports (if any)
MEGACYCLES_PER_FROMBULATION = 133 # constants (if any)
# Functions which you define...
def f(x_):
return 2 * x_ + 1
def g(x_):
return (x_ - 1) ** 2
# The rest of your code...
if __name__ == '__main__':
x = float(input(""Enter a real number: ""))
print(f""Answer: {f(g(x))
/ MEGACYCLES_PER_FROMBULATION} megacycles!"")
9.3 Iterative and incremental development
Incremental development is a process whereby we build our program
incrementally—often in small steps or by components. This is a struc-' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 175}","### Program Structure

#### Program Structure
1. docstring
2. imports (if any)
3. constants (if any)
4. function definitions (if any)
… and then, nested under if __name__ == '__main__': , all the rest of your code.

#### Example
```python
""""""
A docstring, delimited by triple double-quotes,
which includes your name and a brief description
of your program.
""""""
import foo # imports (if any)
MEGACYCLES_PER_FROMBULATION = 133 # constants (if any)
# Functions which you define...
def f(x_):
    return 2 * x_ + 1
def g(x_):
    return (x_ - 1) ** 2
# The rest of your code...
if __name__ == '__main__':
    x = float(input(""Enter a real number: ""))
    print(f""Answer: {f(g(x))
    / MEGACYCLES_PER_FROMBULATION} megacycles!"")
```

#### Iterative and Incremental Development
Incremental development is a process whereby we build our program incrementally—often in small steps or by components."
"page_content='162 Structure, development, and testing
tured, step-by-step approach to writing software. This approach has long
been used to make the process of building complex programs more reli-
able. Even if you’re not undertaking a large-scale software development
project, this approach can be fruitful. Moreover, decomposing problems
into small portions or components can help reduce the complexity of the
task you’re working on at any given time.
Here’s an example. Let’s say we want to write a program that prompts
the user for mass and velocity and calculates the resulting kinetic energy.
If you haven’t had a course in physics before, don’t sweat it—the formula
is rather simple.
𝐾𝑒 = 1
2 𝑚𝑣2
where 𝐾𝑒 is kinetic energy in Joules,𝑚 is mass in kg, and𝑣 is velocity
in m / s.
How would you go about this incrementally? The first step might be
to sketch out what needs to happen with comments.2
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and save result
# Step 2: Prompt user for velocity in m / s and save result
# Step 3: Calculate kinetic energy in Joules using formula
# Step 4: Display pretty result
That’s a start, but then you remember that Python’sinput() function
returns a string, and thus you need to convert these strings to floats.
You decide that before you start writing code you’ll add this to your
comments, so you don’t forget.
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and convert input
# to float and save result
# Step 2: Prompt user for velocity in m / s and convert
# input to float and save result
# Step 3: Calculate kinetic energy in Joules using formula
# Step 4: Display pretty result
2 Here we’ve excluded if __name__ == __main__: to avoid clutter in presentation.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 176}","**Structure, Development, and Testing**

**Content Structuring:**

1. **Structure and Planning**
   - Decomposing Problems
   - Example: Kinetic Energy Calculation

2. **Incrementally Building the Program**
   - Step 1: Sketching the Process
   - Step 2: Refining the Comments

**Metadata Inclusion:**

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 176

**Code Formatting:**

```python
""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""
""""""
# Step 1: Prompt user for mass in kg and convert input
# to float and save result
# Step 2: Prompt user for velocity in m / s and convert
# input to float and save result
# Step 3: Calculate kinetic energy in Joules using formula
# Step 4: Display pretty result
""""
```"
"page_content='Iterative and incremental development 163
Now you decide you’re ready to start coding, so you start with step
1.
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and convert input
# to float and save result
mass = float(input('Enter mass in kg: '))
print(mass)
# Step 2: Prompt user for velocity in m / s and convert
# input to float save result
# Step 3: Calculate kinetic energy in Joules using formula
# Step 4: Display pretty result
Notice the comments are left intact and there’s a print statement added
to verify mass is correctly stored inmass. Now you run your code—yes,
it’s incomplete, but you decide to run it to confirm that the first step is
correctly implemented.
Enter mass in kg: 72.1
72.1
So that works as expected. Now you decide you can move on to step 2.
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and convert
# input to float and save result
mass = float(input('Enter mass in kg: '))
print(mass)
# Step 2: Prompt user for velocity in m / s and
# convert input to float save result
velocity = float(input('Enter velocity in m / s: '))
print(velocity)
# Step 3: Calculate kinetic energy in Joules using formula
# Step 4: Display pretty result
Now when you run your code, this is the result:
Enter mass in kg: 97.13
97.13' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 177}","**Formatting Instructions:**

**1. Content Structuring:**

- **Key Sections:** Iterative and Incremental Development
- **Subheadings:**
    - Step 1: Prompt user for mass in kg and convert input to float and save result
    - Step 2: Prompt user for velocity in m / s and convert input to float save result
    - Step 3: Calculate kinetic energy in Joules using formula
    - Step 4: Display pretty result

**2. Metadata Inclusion:**

- **Page Number:** 177
- **Line Number:** Not provided
- **Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**3. Code Formatting:**

- **Programming Language:** Python

```python
# Step 1: Prompt user for mass in kg and convert input to float and save result
mass = float(input('Enter mass in kg: '))
print(mass)
# Step 2: Prompt user for velocity in m / s and convert input to float save result
velocity = float(input('Enter velocity in m / s: '))
print(velocity)
# Step 3: Calculate kinetic energy in Joules using formula
# Step 4: Display pretty result
```

**4. Tabular Format:**

Not applicable

**5. Examples:**

- Example 1: Mass of 72.1 kg, expected kinetic energy output as per the formula
- Example 2: Mass of 97.13 kg, expected kinetic energy output as per the formula

**Content:**

**Iterative and Incremental Development 163**

Now you decide you're ready to start coding, so you start with step 1.

""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and convert input to float and save result
mass = float(input('Enter mass in kg: '))
print(mass)
# Step 2: Prompt user for velocity in m / s and convert input to float save result
# Step 3: Calculate kinetic energy in Joules using formula
# Step 4: Display pretty result
Notice the comments are left intact and there's a print statement added to verify mass is correctly stored inmass. Now you run your code—yes, it's incomplete, but you decide to run it to confirm that the first step is correctly implemented.
Enter mass in kg: 72.1
72.1
So that works as expected. Now you decide you can move on to step 2.
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and convert input to float and save result
mass = float(input('Enter mass in kg: '))
print(mass)
# Step 2: Prompt user for velocity in m / s and convert input to float save result
velocity = float(input('Enter velocity in m / s: '))
print(velocity)
# Step 3: Calculate kinetic energy in Joules using formula
# Step 4: Display pretty result
Now when you run your code, this is the result:
Enter mass in kg: 97.13
97.13'"
"page_content='164 Structure, development, and testing
Enter velocity in m / s: 14.5
14.5
Again, so far so good. Now it’s time to perform the calculation of kinetic
energy.
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and convert
# input to float and save result
mass = float(input('Enter mass in kg: '))
print(mass)
# Step 2: Prompt user for velocity in m / s and
# convert input to float save result
velocity = float(input('Enter velocity in m / s: '))
print(velocity)
# Step 3: Calculate kinetic energy in Joules using formula
kinetic_energy = 0.5 * mass * velocity ** 2
print(kinetic_energy)
# Step 4: Display pretty result
You run your code again, testing different values.
Enter mass in kg: 22.7
22.7
Enter velocity in m / s: 30.1
30.1
10283.213500000002
At this point, you decide that getting the input is working OK, so
you remove the print statements following mass and velocity. Then you
decide to focus on printing a pretty result. You know you want to use
format specifiers, but you don’t want to fuss with that quite yet, so you
start with something simple (but not very pretty).
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and convert
# input to float and save result
mass = float(input('Enter mass in kg: '))
# Step 2: Prompt user for velocity in m / s and' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 178}","## Kinetic Energy Calculator

###### Metadata:
**Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
**Page:** 178

### Program Structure

**Step 1: Gather User Input**

- Prompt the user to enter the mass in kilograms and convert the input to a float.
- Prompt the user to enter the velocity in meters per second and convert the input to a float.

**Step 2: Calculate Kinetic Energy**

- Calculate the kinetic energy in Joules using the formula: `kinetic_energy = 0.5 * mass * velocity ** 2`

**Step 3: Display Result**

- Print the kinetic energy in a readable format.

### Test Cases

**Example 1:**

- Mass: 14.5 kg
- Velocity: 14.5 m/s
- Kinetic Energy: 132.25 J

**Example 2:**

- Mass: 22.7 kg
- Velocity: 30.1 m/s
- Kinetic Energy: 10283.213500000002 J"
"page_content='Iterative and incremental development 165
# convert input to float save result
velocity = float(input('Enter velocity in m / s: '))
# Step 3: Calculate kinetic energy in Joules using formula
kinetic_energy = 0.5 * mass * velocity ** 2
# Step 4: Display pretty result
print(f'Mass = {mass} kg')
print(f'Velocity = {velocity} m / s')
print(f'Kinetic energy = {energy} Joules')
Now you run this and get an error.
Enter mass in kg: 17.92
Enter velocity in m / s: 25.0
Traceback (most recent call last):
File ""/blah/blah/kinetic_energy.py"", line 10, in <module>
print(f'Kinetic energy = {energy} Joules')
NameError: name 'energy' is not defined
You realize that you typed energy when you should have used
kinetic_energy. That’s not hard to fix, and since you know the other
code is working OK you don’t need to touch it.
Here’s the fix:
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and convert input
# to float and save result
mass = float(input('Enter mass in kg: '))
# Step 2: Prompt user for velocity in m / s and convert
# input to float save result
velocity = float(input('Enter velocity in m / s: '))
# Step 3: Calculate kinetic energy in Joules using formula
kinetic_energy = 0.5 * mass * velocity ** 2
# Step 4: Display pretty result
print(f'Mass = {mass} kg')
print(f'velocity = {velocity} m / s')
print(f'kinetic energy = {kinetic_energy} Joules')
Now this runs without error.
Enter mass in kg: 22.901
Enter velocity in m / s: 13.33
Mass = 22.901 kg
Velocity = 13.33 m / s
Kinetic energy = 2034.6267494499998 Joules' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 179}","## Iterative and Incremental Development

### Formatting Instructions:

**Content Structuring:**

**1. Key Sections and Organization:**

* Introduction
* Steps in Iterative and Incremental Development
* Benefits of Iterative and Incremental Development
* Example

**2. Metadata Inclusion:**

* Page: 179
* Source: ""An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf""

**Code Formatting:**

```python
# Python code example
print(""Hello, World!"")
```

**Introduction**

Iterative and incremental development is a software development process that involves breaking down the development process into smaller, more manageable steps. This approach allows for more frequent feedback and testing, which can help to identify and fix issues early on.

**Steps in Iterative and Incremental Development**

The iterative and incremental development process typically involves the following steps:

1. **Planning:** Define the scope of the project and break it down into smaller tasks.
2. **Analysis:** Gather requirements and analyze the problem domain.
3. **Design:** Create a solution design based on the analysis.
4. **Implementation:** Build the software based on the design.
5. **Testing:** Test the software to ensure that it meets the requirements.
6. **Deployment:** Release the software to users.
7. **Maintenance:** Update and maintain the software as needed.

**Benefits of Iterative and Incremental Development**

Iterative and incremental development offers several benefits, including:

* **Earlier feedback:** Frequent testing and feedback allow for early identification and resolution of issues.
* **Reduced risk:** Breaking down the project into smaller steps reduces the risk of major failures.
* **Increased flexibility:** Changes can be made more easily and quickly in smaller increments.
* **Improved quality:** Iterative testing and feedback help to improve software quality.

**Example**

Consider a project to develop a new website. Using an iterative and incremental approach, the development team could break down the project into the following steps:

1. **Plan:** Define the goals and scope of the website.
2. **Analyze:** Gather user requirements and analyze the existing website.
3. **Design:** Create a design for the new website.
4. **Implement:** Build the homepage and basic navigation.
5. **Test:** Test the homepage and navigation to ensure that they meet the requirements.
6. **Deploy:** Release the homepage and navigation to users.
7. **Maintain:** Update the website as needed based on user feedback.

By following an iterative and incremental approach, the development team can deliver a high-quality website in a timely manner."
"page_content='166 Structure, development, and testing
The last step is to add format specifiers for pretty printing, but since
everything else is working OK, theonly thing you need to focus on are
the format specifiers. Everything else is working!
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and convert input
# to float and save result
mass = float(input('Enter mass in kg: '))
# Step 2: Prompt user for velocity in m / s and convert
# input to float save result
velocity = float(input('Enter velocity in m / s: '))
# Step 3: Calculate kinetic energy in Joules using formula
kinetic_energy = 0.5 * mass * velocity ** 2
# Step 4: Display pretty result
print(f'Mass = {mass:.3f} kg')
print(f'velocity = {velocity:.3f} m / s')
print(f'kinetic energy = {kinetic_energy:.3f} Joules')
You test your code:
Enter mass in kg: 100
Enter velocity in m / s: 20
Mass = 100.000 kg
Velocity = 20.000 m / s
Kinetic energy = 20000.000 Joules
You decide that’s OK, but you’d rather have comma separators in
your output, so you modify the format specifiers.
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
# Step 1: Prompt user for mass in kg and convert input
# to float and save result
mass = float(input('Enter mass in kg: '))
# Step 2: Prompt user for velocity in m / s and convert
# input to float save result
velocity = float(input('Enter velocity in m / s: '))
# Step 3: Calculate kinetic energy in Joules using formula
kinetic_energy = 0.5 * mass * velocity ** 2
# Step 4: Display pretty result
print(f'Mass = {mass:,.3f} kg')' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 180}","## Formatting Instructions

1. **Content Structuring:**  
   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**  
   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**  
   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

       Example:
       ```python
       # Python code example
       print(""Hello, World!"")
       
4. Give difference in tabular format if possible 
5. Include examples clearly if provided   
6. Do not generate any content by yourself. Just format provided content. Also, keep answers in brief. Do not cut short. It just puts full content as it is without changing anything.
   If the content is of 1000 words, give all 1000 words. Do not cut short. Strictly follow this rule. No content or should be modified. Give exact same length content as provided.

## Formatted Output

### Kinetic Energy Calculator

#### Description

This program calculates the kinetic energy of an object given its mass and velocity.

#### Metadata

| Field | Value |
|---|---|
| Source | `C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf` |
| Page | 180 |

#### Code

```python
# Python code example
# Step 1: Prompt user for mass in kg and convert input
# to float and save result
mass = float(input('Enter mass in kg: '))

# Step 2: Prompt user for velocity in m / s and convert
# input to float save result
velocity = float(input('Enter velocity in m / s: '))

# Step 3: Calculate kinetic energy in Joules using formula
kinetic_energy = 0.5 * mass * velocity ** 2

# Step 4: Display pretty result
print(f'Mass = {mass:.3f} kg')
print(f'velocity = {velocity:.3f} m / s')
print(f'kinetic energy = {kinetic_energy:.3f} Joules')
```

#### Example Usage

```
Enter mass in kg: 100
Enter velocity in m / s: 20
Mass = 100.000 kg
Velocity = 20.000 m / s
Kinetic energy = 20000.000 Joules
```"
"page_content='T esting your code 167
print(f'velocity = {velocity:,.3f} m / s')
print(f'kinetic energy = {kinetic_energy:,.3f} Joules')
You test one more time and get a nice output.
Enter mass in kg: 72.1
Enter velocity in m / s: 19.5
Mass = 72.100 kg
Velocity = 19.500 m / s
Kinetic energy = 13,708.012 Joules
Looks great!
Now we can remove the comments we used as scaffolding, and we
finish with:
""""""
Kinetic Energy Calculator
Egbert Porcupine <egbert.porcupine@uvm.edu>
CS 1210
""""""
mass = float(input('Enter mass in kg: '))
velocity = float(input('Enter velocity in m / s: '))
kinetic_energy = 0.5 * mass * velocity ** 2
print(f'Mass = {mass:,.3f} kg')
print(f'velocity = {velocity:,.3f} m / s')
print(f'kinetic energy = {kinetic_energy:,.3f} Joules')
So now you’ve seen how to do incremental development.3 Notice that
we did not try to solve the entire problem all at once. We started with
comments as placeholder / reminders, and then built up the program one
step at a time, testing along the way. Using this approach can make the
whole process easier by decomposing the problem into small, manageable,
bite-sized (or should I say “byte-sized”?) chunks. That’s incremental de-
velopment.
9.4 T esting your code
It’s important to test your code. In fact one famous dictum of program-
ming is:
If it hasn’t been tested, it’s broken.
When writing code, try to anticipate odd or non-conforming input,
and then test your program to see how it handles such input.
3 If you’re curious about how the pros do iterative and incremental development,
see the Wikipedia article on iterative and incremental development: https://en.wik
ipedia.org/wiki/Iterative_and_incremental_development' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 181}","## Content Formatted

### Metadata
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 181

### Testing Your Code

It's crucial to test your code. As a programming adage goes:

> If it hasn't been tested, it's broken.

When writing code, consider unconventional or non-conforming input and test your program's response to it.

### Incremental Development

We demonstrated incremental development in the previous example. We didn't attempt to solve the entire problem at once. We utilized comments as placeholders and built the program progressively, testing each step along the way. Breaking down problems into smaller, manageable chunks simplifies the process.

### Example Code

#### Python
```python
mass = float(input('Enter mass in kg: '))
velocity = float(input('Enter velocity in m / s: '))
kinetic_energy = 0.5 * mass * velocity ** 2
print(f'Mass = {mass:,.3f} kg')
print(f'velocity = {velocity:,.3f} m / s')
print(f'kinetic energy = {kinetic_energy:,.3f} Joules')
```"
"page_content='168 Structure, development, and testing
If your code has multiple branches, it’s probably a good idea to test
each branch. Obviously, with larger programs this could get unwieldy,
but for small programs with few branches, it’s not unreasonable to try
each branch.
Some examples
Let’s say we had written a program that is intended to take pressure in
pounds per square inch (psi) and convert this to bars. Abar is a unit of
pressure and 1 bar is equivalent to 14.503773773 psi.
Without looking at the code, let’s test our program. Here are some
values that represent reasonable inputs to the program.
input (in psi) expected output (bars) actual output (bars)
0 0
14.503773773 1.0
100.0 ~ 6.894757293
Here’s our first test run.
Enter pressure in psi: 0
Traceback (most recent call last):
File ""/.../pressure.py"", line 15, in <module>
bars = psi_to_bars(psi)
File ""/.../pressure.py"", line 8, in psi_to_bars
return PSI_PER_BAR / p
TypeError: unsupported operand type(s) for /: 'float' and 'str'
Oh dear! Already we have a problem. Looking at the last line of the error
message we see
TypeError: unsupported operand type(s) for /: 'float' and 'str'
What went wrong?
Obviously we’re trying to do arithmetic—division—where one
operand is a float and the other is a str. That’s not allowed, hence
the type error.
When we give this a little thought, we realize it’s likely we didn’t
convert the user input to afloat before attempting the calculation (re-
member, theinput() function always returns a string).
Wegobacktoourcodeandfixitsothatthestringwegetfrom input()
is converted to afloat using the float constructor,float(). Having made
this change, let’s try the program again.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 182}","**Metadata**

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 182

**Structure, Development, and Testing**

**Testing Branching Code**

If a code contains multiple branches, it is advisable to test each branch. While this approach may not be feasible for large programs, it is reasonable for small programs with few branches.

**Examples of Testing**

Consider a program that converts pressure in pounds per square inch (psi) to bars (1 bar = 14.503773773 psi).

**Test Inputs and Expected Outputs**

| Input (in psi) | Expected Output (bars) |
|---|---|
| 0 | 0 |
| 14.503773773 | 1.0 |
| 100.0 | ~6.894757293 |

**Test Run**

```
Enter pressure in psi: 0
Traceback (most recent call last):
File ""/.../pressure.py"", line 15, in <module>
bars = psi_to_bars(psi)
File ""/.../pressure.py"", line 8, in psi_to_bars
return PSI_PER_BAR / p
TypeError: unsupported operand type(s) for /: 'float' and 'str'
```

**Error Analysis**

The error message indicates that an operand is a float while the other is a str. It is likely that the user input was not converted to a float before the calculation.

**Code Correction**

The code is modified to convert the user input to a float using the float constructor, float().

**Retest**

After correcting the code, the program can be retested."
"page_content='T esting your code 169
Enter pressure in psi: 0
Traceback (most recent call last):
File ""/.../pressure.py"", line 15, in <module>
bars = psi_to_bars(psi)
File ""/.../pressure.py"", line 8, in psi_to_bars
return PSI_PER_BAR / p
ZeroDivisionError: float division by zero
Now we have a different error:
ZeroDivisionError: float division by zero
How could this have happened? Surely if pressure in psi is zero, then
pressure in bars should also be zero (as in a perfect vacuum).
When we look at the code (you can see the offending line in the
traceback above), we see that instead of taking the value in psi and
dividing by the number of psi per bar, we’ve got our operands in the
wrong order. Clearly we need to divide psi by psi per bar to get the
correct result. Again you can see from the traceback, above, that there’s
a constantPSI_PER_BAR, so we’ll just reverse the operands. This has the
added benefit of having a non-zero constant in the denominator, so after
this change, this operation can never result in aZeroDivisionError ever
again.
Now let’s try it again.
Enter pressure in psi: 0
0.0 psi is equivalent to 0.0 bars.
That works! So far, so good.
Now let’s try with a different value. We know, from the definition of
bar that one bar is equivalent to 14.503773773 psi. Therefore, if we enter
14.503773773 for psi, the program should report that this is equivalent
to 1.0 bar.
Enter pressure in psi: 14.503773773
14.503773773 psi is equivalent to 1.0 bars.
Brilliant.
Let’s try a different value. How about 100? You can see in the table
above that 100 psi is approximately equivalent to ~6.894757293 bars.
Enter pressure in psi: 100
100.0 psi is equivalent to 6.894757293178307 bars.
This looks correct, though we can see now that we’re displaying more
digits to the right of the decimal point than are useful.
Let’s say we went back to our code and added format specifiers to
that both psi and bars are displayed to four decimal places of precision.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 183}","## Testing your code

**Metadata:**

* Page: 183
* Source: ""C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf""

### Error Handling

**Original Error:**

```
Traceback (most recent call last):
File ""/.../pressure.py"", line 15, in <module>
bars = psi_to_bars(psi)
File ""/.../pressure.py"", line 8, in psi_to_bars
return PSI_PER_BAR / p
ZeroDivisionError: float division by zero
```

**Explanation:**

The code attempted to divide by zero.

**Corrected Code:**

```
return p / PSI_PER_BAR
```

### Code Example

```python
# Python code example
def psi_to_bars(psi):
    """"""Converts pressure from psi to bars.""""""
    PSI_PER_BAR = 14.503773773

    return psi / PSI_PER_BAR


def test_psi_to_bars():
    """"""Tests the `psi_to_bars()` function.""""""
    assert psi_to_bars(0) == 0.0
    assert psi_to_bars(14.503773773) == 1.0
    assert psi_to_bars(100) == 6.894757293178307
```

### Tabular Comparison of Pressure Units

| **Unit** | **Psi** | **Bars** | **Approximate Conversion** |
|---|---|---|---|
| Pascal (Pa) | 1 | 0.0001 | 1 bar = 100,000 Pa |
| Bar (bar) | 14.503773773 | 1 | 1 bar = 14.503773773 psi |
| Pound per square inch (psi) | 0.06894757293178306 | 14.503773773 | 1 psi = 6,894.757293178306 Pa |
| Atmosphere (atm) | 14.69594877551317 | 1.01325 | 1 atm = 101,325 Pa |
| Millimeter of mercury (mmHg) | 133.322387415 | 101.325 | 1 mmHg = 133.322387415 Pa |
| Torr | 0.0013157894736842105 | 0.01 | 1 torr = 1.33322387415 Pa |"
"page_content='170 Structure, development, and testing
Enter pressure in psi: 100
100.0000 psi is equivalent to 6.8948 bars.
This looks good.
Returning to our table, and filling in the actual values, now we have
input (in psi) expected output (bars) actual output (bars)
0 0.0 0.0000
14.503773773 1.0 1.0000
100.0 ~ 6.894757293 6.8948
All our observed, actual outputs agree with our expected outputs.
What about negative values for pressure? Yes, there are cases where a
negativepressurevaluemakessense.Take,forexample,anisolationroom
for biomedical research. The air pressure in the isolation room should be
lower than pressure in the outside hallways or adjoining rooms. In this
way, when the door to an isolation room is opened, air will flow into the
room, not out of it. This helps prevent contamination of uncontrolled
outside environments. It’s common to express the difference in pressure
between the isolation room and the outside hallway as a negative value.
Does our program handle such values? Let’s expand our table:
input (in psi) expected output (bars) actual output (bars)
0 0.0 0.0000
14.503773773 1.0 1.0000
100.0 ~ 6.894757293 6.8948
-0.01 ~ -0.000689476 ??
Does our program handle this correctly?
Enter pressure in psi: -0.01
-0.0100 psi is equivalent to -0.0007 bars.
Again, this looks OK.
Now let’s try to break our program to test its limits. Let’s try some
large values. The atmospheric pressure on the surface of Venus is 1334
psi. We’d expect a result in bars of approximately 91.9761 bars. The
pressure at the bottom of the Mariana Trench in the Pacific Ocean is
15,750 psi, or roughly 1,086 bars.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 184}","### Pressure Conversion Program Testing

**Metadata**
- Page Number: 184
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Section 1: Program Testing

**Testing with Positive Values**

```
input (in psi) expected output (bars) actual output (bars)
0               0.0                    0.0000
14.503773773   1.0                    1.0000
100.0           ~ 6.894757293        6.8948
```

### Section 2: Program Behavior with Negative Values

**Negative Pressure Values**

Negative pressure values can make sense in certain contexts, such as isolation rooms where the pressure is lower than the outside to prevent contamination. The program handles negative values correctly:

```
input (in psi) expected output (bars) actual output (bars)
0               0.0                    0.0000
14.503773773   1.0                    1.0000
100.0           ~ 6.894757293        6.8948
-0.01           ~ -0.000689476        ??
```

**Testing Limits**

- Atmospheric pressure on Venus (1334 psi): Expected output ~ 91.9761 bars
- Pressure at Mariana Trench (15,750 psi): Expected output ~ 1,086 bars"
"page_content='T esting your code 171
input (in psi) expected output (bars) actual output (bars)
0 0.0 0.0000
14.503773773 1.0 1.0000
100.0 ~ 6.894757293 6.8948
-0.01 ~ -0.000689476 0.0007
1334 ~ 91.9761 ??
15,750 ~ 1086 ??
Let’s test:
Enter pressure in psi: 1334
1334.0000 psi is equivalent to 91.9761 bars.
This one passes, but what about the next one (with the string contain-
ing the comma)? Will the conversion of the string'15,750' (notice the
comma) be converted correctly to a float? Alas, this fails:
Traceback (most recent call last):
File ""/.../pressure.py"", line 13, in <module>
psi = float(input(""Enter pressure in psi: ""))
ValueError: could not convert string to float: '15,750'
Later, we’ll learn how to create a modified copy of such a string with
the commas removed, but for now let it suﬀice to say this can be fixed.
Notice however, that if we hadn’t checked this large value, which could
reasonably be entered by a human user with the comma as shown, we
might not have realized that this defect in our code existed!Always test
with as many ways the user might enter data as you can think of!
With that fix in place, all is well.
Enter pressure in psi: 15,750
15750.0000 psi is equivalent to 1085.9243 bars.
By testing these larger values, we see that it might make sense to
format the output to use commas as thousands separators for improved
readability. Again, we might not have noticed this if we hadn’t tested
larger values. To fix this, we just change the format specifiers in our code.
Enter pressure in psi: 15,750
15,750.0000 psi is equivalent to 1,085.9243 bars.
Splendid.
This prompts another thought: what if the user entered psi in scien-
tific notation like 1E3 for 1,000? It turns out that the float constructor
handles inputs like this—but it never hurts to check!
Notice that by testing, we’ve been able to learn quite a bit about our
code without actually reading the code! In fact, it’s often the case that
the job of writing tests for code falls to developers who aren’t the ones' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 185}","**Testing Your Code**

**Metadata:**

* Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 185

**Content:**

**Test Input and Output Data**

| **Input (in psi)** | **Expected Output (bars)** | **Actual Output (bars)** |
|---|---|---|
| 0 | 0.0 | 0.0000 |
| 14.503773773 | 1.0 | 1.0000 |
| 100.0 | ~ 6.894757293 | 6.8948 |
| -0.01 | ~ -0.000689476 | 0.0007 |
| 1334 | ~ 91.9761 | ?? |
| 15,750 | ~ 1086 | ?? |

**Test Cases**

**Test Case 1:**

```python
psi = float(input(""Enter pressure in psi: ""))
bars = psi / 14.503773773
print(f""{psi:.4f} psi is equivalent to {bars:.4f} bars."")
```

**Input:** 1334

**Output:** 1334.0000 psi is equivalent to 91.9761 bars.

**Test Case 2:**

```python
psi = float(input(""Enter pressure in psi: ""))
bars = psi / 14.503773773
print(f""{psi:,.4f} psi is equivalent to {bars:,.4f} bars."")
```

**Input:** 15,750

**Output:** 15,750.0000 psi is equivalent to 1,085.9243 bars.

**Test Case 3:**

```python
psi = float(input(""Enter pressure in psi: ""))
bars = psi / 14.503773773
print(f""{psi:.4f} psi is equivalent to {bars:.4f} bars."")
```

**Input:** 1E3

**Output:** 1000.0000 psi is equivalent to 68.9476 bars.

**Importance of Testing**

Testing your code is crucial to ensure its accuracy and robustness. It helps identify potential errors and ensures that the code behaves as expected under various input conditions.

**Always test with as many ways the user might enter data as you can think of!**"
"page_content='172 Structure, development, and testing
writing the code that’s being tested! One team of developers writes the
code, a different team writes the tests for the code.
The important things we’ve learned here are:
• Work out in advance of testing (by using a calculator, hand calcu-
lation, or other method) what theexpected output of your program
should be on any given input. Then you can compare the expected
value with theactual value and thus identify any discrepancies.
• Test your code with a wide range of values. In cases where inputs
are numeric, test with extreme values.
• Don’t forget how humans might enter input values. Different users
might enter 1000 in different ways: 1000, 1000.0000, 1E3, 1,000,
1,000.0, etc. Equivalent values for inputs should always yield equiv-
alent outputs!
Another example: grams to moles
If you’ve ever taken a chemistry course, you’ve converted grams tomoles.
A mole is a unit which measures quantity of a substance. One mole is
equivalent to6.02214076 × 1023 elementary entities, where an elementary
entity may be an atom, an ion, a molecule,etc. depending on context.
For example, a reaction might yield so many grams of some substance,
and by converting to moles, we know exactly how many entities this
represents. In order to convert moles to grams, one needs the mass of
the entities in question.
Here’sanexample.Ourreactionhasproduced75gramsofwater,H 2O.
Each water molecule contains two hydrogen atoms and one oxygen atom.
The atomic mass of hydrogen is 1.008 grams per mole. The atomic mass
of oxygen is 15.999 grams per mole. Accordingly, the molecular mass of
one molecule of H2O is
2 × 1.008 𝑔/mole+ 1 × 15.999 𝑔/mole = 18.015 𝑔/mole.
Our program will require two inputs: grams, and grams per mole (for
the substance in question). Our program should return the number of
moles.
Let’s build a table of inputs and outputs we can use to test our pro-
gram.
grams
grams per
mole
expected output
(moles)
actual output
(moles)
0 any 0
75 18.015 ~ 4.16319 E0
245 16.043 ~ 1.527240 E1
3.544 314.469 ~ 1.12698 E-2
1,000 100.087 ~ 9.99130 E0
Let’s test our program:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 186}","## Content Formatting

**Page 186 of 'An Introduction to Programming and Computer Science with Python'**

### Testing and Debugging

**Key Points:**

* Plan expected outputs before testing.
* Test with a wide range of inputs, including extreme values.
* Consider different user input formats.

### Example: Converting Grams to Moles

**Background:**

* A mole represents a specific quantity of a substance.
* To convert moles to grams, the substance's mass must be known.

**Test Table:**

| Grams | Grams per Mole | Expected Output (Moles) |
|---|---|---|
| 0 | Any | 0 |
| 75 | 18.015 | ~ 4.16319 E0 |
| 245 | 16.043 | ~ 1.527240 E1 |
| 3.544 | 314.469 | ~ 1.12698 E-2 |
| 1,000 | 100.087 | ~ 9.99130 E0 |"
"page_content='T esting your code 173
How many grams of stuff have you? 75
What is the atomic weight of your stuff? 18.015
You have 4.1632E+00 moles of stuff!
That checks out.
How many grams of stuff have you? 245
What is the atomic weight of your stuff? 16.043
You have 1.5271E+01 moles of stuff!
Keep checking…
How many grams of stuff have you? 3.544
What is the atomic weight of your stuff? 314.469
You have 1.1270E-02 moles of stuff!
Still good. Keep checking…
How many grams of stuff have you? 1,000
Traceback (most recent call last):
File ""/.../moles.py"", line 9, in <module>
grams = float(input(""How many grams of stuff have you? ""))
ValueError: could not convert string to float: '1,000'
Oops! This is the same problem we saw earlier: the float constructor
doesn’t handle numeric strings containing commas. Let’s assume we’ve
applied a similar fix and then test again.
How many grams of stuff have you? 1,000
What is the atomic weight of your stuff? 100.087
You have 9.9913E+00 moles of stuff!
Yay! Success!
Now, what happens if we were to test with negative values for either
grams or atomic weight?
How many grams of stuff have you? -500
What is the atomic weight of your stuff? 42
You have -1.1905E+01 moles of stuff!
Nonsense! Ideally, our program should not accept negative values for
grams, and should not accept negative values or zero for atomic weight.
In any event, you see now how useful testing a range of values can be.
Don’t let yourself be fooled into thinking your program is defect-free if
you’ve not tested it with a suﬀicient variety of inputs.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 187}","**Testing Your Code**

**Metadata:**
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 187

**Test Cases:**

| Input | Expected Output |
|---|---|
| 75, 18.015 | 4.1632E+00 moles |
| 245, 16.043 | 1.5271E+01 moles |
| 3.544, 314.469 | 1.1270E-02 moles |
| 1,000, 100.087 | 9.9913E+00 moles |
| -500, 42 | Invalid input: Negative values for grams not allowed |

**Key Tests:**

* Positive inputs for both grams and atomic weight.
* Input with commas in the grams value.
* Negative input for grams.
* Negative input for atomic weight.
* Zero input for atomic weight.

**Findings:**

* The program handles valid inputs correctly.
* The program handles commas in the grams input correctly.
* The program detects and rejects negative inputs for grams.
* The program detects and rejects negative inputs for atomic weight.
* The program does not detect and reject zero inputs for atomic weight."
"page_content='174 Structure, development, and testing
9.5 The origin of the term “bug”
So where do we get the word “bug” anyhow? Alas, the origin of the term
is lost. However, in 1947, the renowned computer pioneer Grace Murray
Hopper was working on the Harvard Mark I computer, and a program
was misbehaving.
4
Figure 9.1: Grace Murray Hopper. Source: The Grace Murray Hop-
per Collection, Archives Center, National Museum of American History
(image is in the public domain)
After reviewing the code and finding no error, she investigated further
and found a moth in one of the computer’s relays (remember this was
back in the days when a computer filled an entire large room). The moth
was removed, and taped into Hopper’s lab notebook.
4 Judging from Hopper’s notebook (9 September 1947), the misbehaving program
was a “multi-adder test” . It appears they were running the machine through a se-
quence of tests—for example, tests for certain trigonometric functions took place
earlier that day . At least one had failed and some relays (hardware components)
were replaced. The multi-adder test was started at 3:25 PM (Hopper uses military
time in the notebook: “1525”), and twenty minutes later, the moth was taped into
the notebook. It’s not clear how the problem became manifest, but someone went
looking at the hardware and found the moth.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 188}","### Formatting Instructions:

1. **Content Structuring:**  
       - Identify key sections and organize them under appropriate headings and subheadings.
       - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**  
       - Include all metadata such as page numbers, line numbers, and source names as provided.
       - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**  
       - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
       - Mention the programming language before the triple backticks.

       Example:
       ```python
       # Python code example
       print(""Hello, World!"")
       
    4.give difference in tabular format if possible 
    5.include examples clearly if provided   
    6.do not generate any content by your self just format privided content also keep answers in breif do not cut short it just put it full content as it is without changing any thing
    if content is of 1000 words give all 1000 words do not cut short it stirictly follow this rule no content or should be modified give exact same length content as provided
    content=page_content='174 Structure, development, and testing
9.5 The origin of the term “bug”
So where do we get the word “bug” anyhow? Alas, the origin of the term
is lost. However, in 1947, the renowned computer pioneer Grace Murray
Hopper was working on the Harvard Mark I computer, and a program
was misbehaving.
4
Figure 9.1: Grace Murray Hopper. Source: The Grace Murray Hop-
per Collection, Archives Center, National Museum of American History
(image is in the public domain)
After reviewing the code and finding no error, she investigated further
and found a moth in one of the computer’s relays (remember this was
back in the days when a computer filled an entire large room). The moth
was removed, and taped into Hopper’s lab notebook.
4 Judging from Hopper’s notebook (9 September 1947), the misbehaving program
was a “multi-adder test” . It appears they were running the machine through a se-
quence of tests—for example, tests for certain trigonometric functions took place
earlier that day . At least one had failed and some relays (hardware components)
were replaced. The multi-adder test was started at 3:25 PM (Hopper uses military
time in the notebook: “1525”), and twenty minutes later, the moth was taped into
the notebook. It’s not clear how the problem became manifest, but someone went
looking at the hardware and found the moth.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 188}

### Formatted Output:

### Section 9.5: The Origin of the Term ""Bug""

**1947: Grace Murray Hopper's Discovery**

In 1947, Grace Murray Hopper, a renowned computer pioneer, encountered an issue while working on the Harvard Mark I computer. Upon investigation, she discovered a moth lodged in one of the computer's relays. The moth was subsequently removed and preserved in Hopper's lab notebook, marking the first documented use of the term ""bug"" in the context of computer malfunction.

**Historical Context**

Computers in the 1940s occupied entire rooms, and hardware components such as relays were prone to malfunction. The term ""bug"" had been used colloquially to describe unexpected glitches or errors in machinery, particularly in the field of electronics. Hopper's discovery of the actual moth in the computer's hardware lent credence to the existing metaphor.

**The Multi-Adder Test**

Hopper's notebook entry from September 9, 1947, indicates that the ""misbehaving program"" experiencing the issue was a ""multi-adder test."" This suggests that the computer was being subjected to a series of tests, including trigonometric function evaluations. Prior to the incident involving the moth, at least one test had failed, resulting in the replacement of some relays.

**The Moth Incident**

The multi-adder test was initiated at 3:25 PM (military time: ""1525""). Approximately 20 minutes later, the moth was discovered and taped into Hopper's notebook. The exact nature of the problem caused by the moth is unclear, but it is reasonable to assume that its presence within the relay interfered with the electrical signals and led to the malfunction.

**Conclusion**

The discovery of the moth by Grace Murray Hopper in 1947 is a significant anecdote that demonstrates the evolving terminology and understanding of computer technology. It underscores the importance of understanding hardware limitations and the meticulous attention to detail required in troubleshooting computer malfunctions."
"page_content='The origin of the term “bug” 175
Figure 9.2: A page from Hopper’s notebook containing the first “bug”.
Source: US Naval Historical Center Online Library (image is in public
domain)
In interviews, Hopper said that after this discovery, whenever something
was wrong she and her team would say “There must be a bug.”
Not everyone likes the term “bug.” For example, the famously grumpy
Edsger Dijkstra thought that calling errors “bugs” was intellectually dis-
honest. He made this point in an essay with the remarkable title “On
the cruelty of really teaching computing science.”
5
We could, for instance, begin with cleaning up our language
by no longer calling a bug a bug but by calling it an error. It is
much more honest because it squarely puts the blame where it
belongs,viz. with the programmer who made the error. The
animistic metaphor of the bug that maliciously sneaked in
while the programmer was not looking is intellectually dis-
honest as it disguises that the error is the programmer’s own
creation.
5 Edsger Dijkstra, 1988, “On the cruelty of really teaching computing science” .
This essay is recommended. See the entry in the Edsger Dijkstra archive hosted by
the University of T exas at Austin: https://www.cs.utexas.edu/~EWD/transcripti
ons/EWD10xx/EWD1036.html' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 189}","## Origin of the Term ""Bug""

**Page Number:** 189

**Line Numbers:** 175-183

**Source:** US Naval Historical Center Online Library (image is in public domain)

**Content Formatting:**

**Figure 9.2:** A page from Hopper's notebook containing the first ""bug"".

**Description:**

The term ""bug"" originated from the discovery of a moth lodged in a relay of a computer at the Harvard Mark II in 1945. The insect caused an electrical short circuit, leading to a malfunction of the computer. Since then, the term ""bug"" has been used to refer to any error or defect in a computer program or system.

**Alternative Views on the Term ""Bug"":**

**Edsger Dijkstra's Criticism:**

- Dijkstra argued that calling errors ""bugs"" was intellectually dishonest, as it implied that they were external entities that entered the system without the programmer's fault.

- He believed that errors were solely the responsibility of the programmer and should be termed as such.

**Difference Between ""Bug"" and ""Error"":**

| Term | Description | Example |
|---|---|---|
| Bug | An external entity that enters the system and causes errors | Moth in the Harvard Mark II relay |
| Error | A mistake made by the programmer | Syntax error in a Python code |

**Conclusion:**

The term ""bug"" has become widely accepted in the computing field, despite some objections raised by individuals like Edsger Dijkstra. It remains an informal and humorous way of referring to errors or defects in computer programs or systems."
"page_content='176 Structure, development, and testing
Figure 9.3: Edsger Dijkstra. Source: University of Texas at Austin,
under a Creative Commons license
Despite Dijkstra’s remonstrances, the term stuck. So now we have “bugs.”
Bugs are, of course, inevitable. What’s important is how we strive to
avoid them and how we fix them when we find them.
9.6 Using assertions to test your code
Many languages, Python included, allow forassertions or assert state-
ments. These are used to verify things you believeshould be true about
some condition or result. By making an assertion, you’re saying “I be-
lieve 𝑥 to be true”, whatever𝑥 might be. Assertions are a powerful tool
for verifying that a function or program actually does what you expect
it to do.
Python provides a keyword,assert which can be used inassert state-
ments. Here are some examples:
Let’s say you have a function which takes a list of items for some
purchase and applies sales tax. Whatever the subtotal might be, we know
that the sales tax must be greater than or equal to zero. So we write an
assertion:
sales_tax = calc_sales_tax(items)
assert sales_tax >= 0
If sales_tax is ever negative (which would be unexpected), this state-
ment would raise anAssertionError, informing you that something you
believed to be true, was not, in fact, true. This is roughly equivalent to
if sales_tax < 0:
raise AssertionError
but is more concise and readable.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 190}","## Structure, Development, and Testing

### Bugs and Assertions

**Bugs**

Despite Dijkstra's objections, the term ""bugs"" has become widely accepted. Bugs are unavoidable in software development. The key is to minimize their occurrence and address them promptly.

**Assertions for Testing**

Many languages, including Python, support assertions or assert statements. These are used to verify expected conditions or results. By making an assertion, you state your belief in the validity of a particular condition or result. Assertions serve as a powerful tool for ensuring that functions or programs perform as intended.

### Python Assertions

Python provides the `assert` keyword, which can be used to create assert statements. Here are some examples:

**Example 1:**

Consider a function that calculates sales tax for a list of purchased items. We know that regardless of the subtotal, the sales tax must be non-negative. Therefore, we can write an assertion as follows:

```
sales_tax = calc_sales_tax(items)
assert sales_tax >= 0
```

If `sales_tax` ever becomes negative (an unexpected outcome), this assertion will raise an `AssertionError`, alerting the developer of an incorrect assumption.

**Example 2:**

Another example involves checking the length of a list:

```python
assert len(list) == 10
```

This assertion verifies that the length of the list is equal to 10. If this condition is not met, an `AssertionError` will be raised.

**Comparison with Conditional Statements**

Assertions can be compared to conditional statements with `if` and `raise`. However, assertions offer advantages in terms of conciseness and readability:

```python
# Assertion
assert sales_tax >= 0

# Conditional statement
if sales_tax < 0:
    raise AssertionError
```

In this scenario, the assertion is more straightforward and easier to comprehend."
"page_content='Using assertions to test your code 177
Notice that if the assertion holds, no exception is raised, and the
execution of your code continues uninterrupted.
Here’s another example:
def calc_hypotenuse(a, b):
""""""Given two legs of a right triangle, return the
length of the hypotenuse. """"""
assert a >= 0
assert b >= 0
return math.sqrt(a ** 2 + b ** 2)
What’s going on here? This isn’t data validation. Rather, we’re docu-
menting conditions that must hold for the function to return a valid
result, and we ensure that the program will fail if these conditions aren’t
met. We could have adegenerate triangle, where one or both legs have
length zero, but it cannot be the case that either leg has negative length.
This approach has the added benefit of reminding the programmer what
conditions must hold in order to ensure correct behavior.
Judicious use of assertions can help you write correct, robust code.
Adding friendly messages
Python’s assert allows you to provide a custom message in the event of
an AssertionError. The syntax is simple,
assert 1 + 1 == 2, ""Something is horribly wrong!""
Some caveats
It’s important to understand thatassert is a Python keyword andnot
the name of a built-in function. This is correct:
assert 0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]""
but this is not
assert(0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]"")
Why? This will treat the tuple
(0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]"")
as what is being asserted. But non-empty tuples are truthy, and so this
will never result in anAssertionError, no matter what the value ofx!
Let’s test it' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 191}","## Using Assertions to Test Your Code

### Metadata
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 191

### Notice

If the assertion holds, no exception is raised, and the execution of your code continues uninterrupted.

### Example
```python
def calc_hypotenuse(a, b):
""""""Given two legs of a right triangle, return the
length of the hypotenuse. """"""
assert a >= 0
assert b >= 0
return math.sqrt(a ** 2 + b ** 2)
```

### Adding Friendly Messages
```python
assert 1 + 1 == 2, ""Something is horribly wrong!""
```

### Caveats
* `assert` is a Python keyword and not the name of a built-in function.
* Non-empty tuples are truthy and will never result in an `AssertionError`.
* Example:
```python
assert 0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]""
```
```python
# Incorrect
assert(0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]"")
```"
"page_content='178 Structure, development, and testing
>>> x = -42
>>> assert(0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]"")
<stdin>:1: SyntaxWarning: assertion is always true,
perhaps remove parentheses?
>>>
However, this works as intended
>>> x = -42
>>> assert 0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]""
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
AssertionError: x must be in [0.0, 1.0]
>>>
and ifx is in the indicated interval, all is well.
>>> x = 0.42
>>> assert 0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]""
>>>
(Notice the >>> at the end of the snippet above, indicating that the
assertion has passed and is thus silent.)
Youshouldtryaddingassertionstoyourcode.Infact,theNASA/JPL
Laboratory for Reliable Software published a set of guidelines for produc-
ing reliable code, and one of these is “Use a minimum of two runtime
assertions per function.”6
9.7 Rubberducking
“Rubberducking”? What on Earth is “rubberducking”? Don’t laugh: rub-
berducking is one of the most powerful debugging tools in the known
universe! Many programmers keep a little rubber duck handy on their
desk, in case of debugging emergencies.
Here’s how it works. If you get stuck, and cannot solve a particular
problem or cannot fix a pesky bug youtalk to the duck . Now, rubber
ducks aren’t terribly sophisticated, so you have to explain things to them
in the simplest possible terms. Explain your problem to the duck using
as little computer jargon as you can. Talk to your duck as if it were an
intelligent five-year-old. You’d be amazed at how many problems can be
solved this way!
Why does it work?
First, by talking to your duck, you step outside your code for a while.
You’re talking about your code without having to type at the keyboard,
and without getting bogged down in the details of syntax. You’re talking
about what you think your code should be doing.
Second, your duck will never judge you. It will remain silent while
you do your best to explain. Ducks are amazing listeners!
6 G.J. Holzmann, 2006, “The Power of 10: Rules for Developing Safety-Critical
Code”, IEEE Computer , 39(6). doi:10.1109/MC.2006.212.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 192}","**Page 192**

**9. Debugging**

**9.6 Assertions**

Assertions are a way to verify that certain conditions hold true at specific points in your code. They are a form of self-checking. Assertions are particularly useful for validating assumptions about program state that should always be true.

If an assertion fails, an `AssertionError` exception is raised. Here is an example:

```python
>>> x = -42
>>> assert(0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]"")
<stdin>:1: SyntaxWarning: assertion is always true,
perhaps remove parentheses?
>>>
```

However, this works as intended

```python
>>> x = -42
>>> assert 0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]""
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
AssertionError: x must be in [0.0, 1.0]
>>>
```

and if x is in the indicated interval, all is well.

```python
>>> x = 0.42
>>> assert 0.0 <= x <= 1.0, ""x must be in [0.0, 1.0]""
>>>
```

(Notice the `>>>` at the end of the snippet above, indicating that the assertion has passed and is thus silent.)

You should try adding assertions to your code. In fact, the NASA/JPL Laboratory for Reliable Software published a set of guidelines for producing reliable code, and one of these is “Use a minimum of two runtime assertions per function.”6

**9.7 Rubberducking**

“Rubberducking”? What on Earth is “rubberducking”? Don’t laugh: rubberducking is one of the most powerful debugging tools in the known universe! Many programmers keep a little rubber duck handy on their desk, in case of debugging emergencies.

Here’s how it works. If you get stuck, and cannot solve a particular problem or cannot fix a pesky bug you talk to the duck. Now, rubber ducks aren’t terribly sophisticated, so you have to explain things to them in the simplest possible terms. Explain your problem to the duck using as little computer jargon as you can. Talk to your duck as if it were an intelligent five-year-old. You’d be amazed at how many problems can be solved this way!

Why does it work?

First, by talking to your duck, you step outside your code for a while. You’re talking about your code without having to type at the keyboard, and without getting bogged down in the details of syntax. You’re talking about what you think your code should be doing.

Second, your duck will never judge you. It will remain silent while you do your best to explain. Ducks are amazing listeners!

6 G.J. Holzmann, 2006, “The Power of 10: Rules for Developing Safety-Critical Code”, IEEE Computer, 39(6). doi:10.1109/MC.2006.212.'"
"page_content='Exceptions 179
It’s very often the case that while you’re explaining your troubles to
the duck, or describing what you think your codeshould be doing, that
you reach a moment of realization. By talking through the problem you
arrive at a solution or you recognize where you went wrong.
What if I don’t have a rubber duck?
That’s OK. Many other things can stand in for a duck if need be. Do
you have a stuffed animal? a figurine of any kind? a photograph of a
friend? a roommate with noise-cancelling headphones? Any of these can
be substituted for a duck if need be.
The important thing is that you take your hands off the keyboard,
and maybe even look away from your code, and describe your problem
in simple terms.
Trust the process! It works!
9.8 Exceptions
AssertionError
As we’ve seen, if an assertion passes, code execution continues normally.
However, if an assertion fails, anAssertionError is raised. This indicates
that what has been asserted has evaluated toFalse.
If you write an assertion, and when you test your code an
AssertionError is raised, then you should do two things:
1. Make sure that the assertion you’ve written is correct. That is, you
are asserting some condition is true when it should, in fact, be true.
2. If you’ve verified that your assertion statement(s) are correct, and
an AssertionError continues to be raised, then it’s time to debug
your code. Continue updating and testing until the issue is resolved.
9.9 Exercises
Exercise 01
Arrange the following code and add any missing elements so that it
follows the stated guidelines for program structure (as per section 9.2):
x = float(input(""Enter a value for x: ""))
def square(x_):
return x_ * x_
x_sqrd = square(x)
print(f""{x} squared is {x_sqrd}."")' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 193}","## Formatting Instructions

### 1. Content Structuring:
- Key sections and subsections will be organized under appropriate headings and subheadings.
- Logical flow and clarity in the content will be ensured.

### 2. Metadata Inclusion:
- All metadata, such as page numbers, line numbers, and source names, will be included.
- Metadata will be indicated at the beginning or in relevant sections.

### 3. Code Formatting:
- Code will be provided with proper syntax highlighting.
- The programming language will be mentioned before the triple backticks.

Example:
```python
# Python code example
print(""Hello, World!"")
```

### 4. Tabular Format for Differences:
- Differences will be presented in tabular format whenever possible.

### 5. Inclusion of Examples:
- Examples will be included clearly, as provided.

### 6. No Content Modifications:
- No content will be modified. The exact length and content of the provided document will be preserved.

### Exceptions

#### 9.8 Exceptions

#### 9.8.1 AssertionError

- If an assertion passes, code execution continues normally.
- If an assertion fails, an `AssertionError` is raised, indicating that the asserted condition evaluated to `False`.

If an `AssertionError` is raised:
1. Verify that the assertion statement is correct (i.e., asserting a condition that should be true).
2. If the assertion statements are correct, debug the code until the issue is resolved.

## Exercises

#### 9.9 Exercises

#### 9.9.1 Exercise 01

Code:
```python
x = float(input(""Enter a value for x: ""))

def square(x_):
    return x_ * x_

x_sqrd = square(x)

print(f""{x} squared is {x_sqrd}."")
```"
"page_content='180 Structure, development, and testing
Exercise 02
Write a complete program which prompts the user for two integers (one
at a time) and then prints the sum of the integers. Be sure to follow the
stated guidelines for program structure.
Exercise 03
Egberthaswrittenafunctionwhichtakestwoarguments,bothrepresent-
ing angles in degrees. The function returns the sum of the two degrees,
modulo 360.
Here’s an example of one test of this function:
>>> sum_angles(180, 270)
90.0
What other values might you use to test such a function? For each
pair of values you choose, give the expected output of the function. (See
section 9.3)
Exercise 04
Consider this module (program):
""""""
A simple program
""""""
def cube(x_):
return x_ ** 3
# Test function to make sure it works
# as intended
assert cube(3) == 27
assert cube(0) == 0
assert cube(-1) == -1
# Allow for other test at user's discretion
x = float(input(""Enter a number: ""))
print(f""The cube of {x} is {cube(x)}."")
a. What happens if we import this module?
b. What undesirable behavior occurs on import, and how can we fix
it?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 194}","**Structured and Formatted Output**

**Metadata**

* Page Number: 194
* Line Number: 180
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Exercises**

**Exercise 02**

* Instructions: Write a complete program that prompts the user for two integers and prints their sum.

**Exercise 03**

* Background: Egbertha wrote a function that takes two angles in degrees and returns their sum modulo 360.
* Example Test:
    ```python
    >>> sum_angles(180, 270)
    90.0
    ```
* Additional Test Values:
    * (0, 0) -> Expected Output: 0
    * (180, 360) -> Expected Output: 180
    * (300, 180) -> Expected Output: 180

**Exercise 04**

* Module Definition:
```python
""""""
A simple program
""""""
def cube(x_):
    return x_ ** 3

# Test function to make sure it works
# as intended
assert cube(3) == 27
assert cube(0) == 0
assert cube(-1) == -1

# Allow for other test at user's discretion
x = float(input(""Enter a number: ""))
print(f""The cube of {x} is {cube(x)}."")
```

* Questions:
    a. What happens if we import this module?
    b. What undesirable behavior occurs on import, and how can we fix it?"
"page_content='Exercises 181
Exercise 05
What’s wrong with these assertions and how would you fix them?
a.
assert 1 + 1 = 5, ""I must not understand addition!""
b.
n = int(input(""Enter an integer: ""))
assert (n + n == 2 * n + 1, ""Arithmetic error!"")
Hint: Try these out in the Python shell.
Exercise 06
Write a program with a function that takes three integers as arguments
and returns their sum. Comment first, then write your code.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 195}","**Exercises**

**Exercise 05**

**a.**

* **Problem:** The assertion fails because 1 + 1 does not equal 5.
* **Fix:** Change the assertion to `assert 1 + 1 == 2, ""I must not understand addition!""`

**b.**

* **Problem:** The assertion fails because `n + n` does not always equal `2 * n + 1`. For example, if `n` is 0, then `n + n` is 0, and `2 * n + 1` is 1.
* **Fix:** Change the assertion to `assert n + n == 2 * n, ""Arithmetic error!""`

**Exercise 06**

```python
# A function that takes three integers as arguments and returns their sum
def sum_three_ints(a, b, c):
    """"""
    This function takes three integers as arguments and returns their sum.

    Args:
        a (int): The first integer.
        b (int): The second integer.
        c (int): The third integer.

    Returns:
        int: The sum of the three integers.
    """"""
    return a + b + c
```"
"page_content='Chapter 10
Sequences
In this chapter, we’ll introduce two new types,lists and tuples. These
are fundamental data structures that can be used to store, retrieve, and,
in some contexts, manipulate data. We sometimes refer to these as “se-
quences” since they carry with them the concepts of order and sequence.
Strings (str) are also sequences.
Learning objectives
• You will learn about lists, and about common list operations, in-
cluding adding and removing elements, finding the number of el-
ements in a list, checking to see if a list contains a certain value,
etc.
• You will learn that lists are mutable. This means that you can
modify a list after it’s created. We can append items, remove items,
change the values of individual items and more.
• You will learn about tuples. Tuples are unlike lists in that they are
immutable—they cannot be changed.
• You will learn that strings are sequences.
• You will learn how to use indices to retrieve individual values from
these structures.
In the next chapter, we’ll learn how to iterate over the elements of a
sequence.
T erms introduced
• list
• tuple
• mutable
• immutable
• index
• sequence unpacking
• slicing
183' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 197}","**Chapter 10: Sequences** (metadata: Page 197, Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf)

**Introduction**

This chapter introduces lists and tuples, two fundamental data structures used to store, retrieve, and manipulate data. Together with strings (str), these data structures are collectively known as ""sequences"" due to their concepts of order and sequence.

**Learning Objectives**

* **Lists:** Operations such as adding, removing, and searching elements, determining length, etc.
* **Mutability:** Lists are mutable, allowing modifications like append, remove, and item value changes.
* **Tuples:** Tuples are immutable, meaning they cannot be modified.
* **Sequences:** Strings are also sequences.
* **Indices:** Retrieval of individual values using indices.

**Terms Introduced**

* List
* Tuple
* Mutable
* Immutable
* Index
* Sequence unpacking
* Slicing

**Additional Note**

In the subsequent chapter, methods for iterating over sequence elements will be discussed."
"page_content='184 Sequences
10.1 Lists
The list is one of the most widely used data structures in Python. One
could not enumerate all possible applications of lists.1 Lists are ubiqui-
tous, and you’ll see they come in handy!
What is a list?
A list is amutable sequence of objects. That sounds like a mouthful, but
it’s not that complicated. If something ismutable, that means that it can
change (as opposed toimmutable, which means it cannot). Asequence is
an ordered col lection—that is, each element in the collection has its own
place in some ordering.
For example, we might represent customers queued up in a coffee shop
with a list. The list can change—new people can get in the coffee shop
queue, and the people at the front of the queue are served and they
leave. So the queue at the coffee shop ismutable. It’s alsoordered—each
customer has a place in the queue, and we could assign a number to each
position. This is known as anindex.
How to write a list in Python
The syntax for writing a list in Python is simple: we include the objects
we want in our list within square brackets. Here are some examples of
lists:
coffee_shop_queue = ['Bob', 'Egbert', 'Jason', 'Lisa',
'Jim', 'Jackie', 'Sami']
scores = [74, 82, 78, 99, 83, 91, 77, 98, 74, 87]
We separate elements in a list with commas.
Unlike many other languages, the elements of a Python list needn’t
all be of the same type. So this is a perfectly valid list:
mixed = ['cheese', 0.1, 5, True]
There are other ways of creating lists in Python, but this will suﬀice for
now.
At the Python shell, we can display a list by giving its name.
>>> mixed = ['cheese', 0.1, 5, True]
>>> mixed
['cheese', 0.1, 5, True]
1 If you’ve programmed in another language before, you may have come to know
similar data structures, for example, ArrayList in Java, mutable vectors in C++, etc.
However, there are many differences, so keep that in mind.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 198}","**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 198

## 10. Sequences

### 10.1 Lists

**What is a List?**

A list is a mutable sequence of objects. It is an ordered collection, meaning that each element has its own place in the sequence.

**How to Write a List in Python**

Lists are enclosed in square brackets and elements are separated by commas:

```python
coffee_shop_queue = ['Bob', 'Egbert', 'Jason', 'Lisa',
'Jim', 'Jackie', 'Sami']
scores = [74, 82, 78, 99, 83, 91, 77, 98, 74, 87]
mixed = ['cheese', 0.1, 5, True]
```

**Key Features of Lists:**

* Lists are mutable, meaning they can be changed.
* Lists are ordered, meaning elements have a specific position in the sequence.
* Elements of a list can be of different types.

**Displaying a List at the Python Shell:**

```python
>>> mixed = ['cheese', 0.1, 5, True]
>>> mixed
['cheese', 0.1, 5, True]
```"
"page_content='Lists 185
The empty list
Is it possible for a list to have no elements? Yup, and we call that the
empty list .
>>> aint_nothing_here = []
>>> aint_nothing_here
[]
Accessing individual elements in a list
As noted above, lists are ordered. This allows us to access individual
elements within a list using anindex. An index is just a number that
corresponds to an element’s position within a list. The only twist is that
in Python, and most programming languages, indices start with zero
rather than one.
2 So the first element in a list has index 0, the second
has index 1, and so on. Given a list of𝑛 elements, the indices into the
list will be integers in the interval[0, 𝑛 − 1].
Figure 10.1: A list and its indices
In the figure (above) we depict a list of floats of size eleven—that is,
there are eleven elements in the list. Indices are shown below the list,
with each index value associated with a given element in the list. Notice
that with a list of eleven elements, indices are integers in the interval
[0, 10].
Let’s turn this into a concrete example:
>>> data = [4.2, 9.5, 1.1, 3.1, 2.9, 8.5, 7.2, 3.5, 1.4, 1.9, 3.3]
Now let’s access individual elements of the list. For this, we give the
name of the list followed immediately by the index enclosed in brackets:
>>> data[0]
4.2
The element in the listdata, at index 0, has a value of 4.2. We can access
other elements similarly.
2 Some languages are one-indexed, meaning that their indices start at one, but
these are in the minority . One-indexed languages include Cobol, F ortran, Julia,
Matlab, R, and Lua.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 199}","## Metadata

- Page Number: 199
- Line Numbers: 185 - 203
- Source: File path - C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

## List

### The Empty List

- Lists can have no elements, which is referred to as the empty list.
**Example:**                                                                 
```python
>>> aint_nothing_here = []
>>> aint_nothing_here
[]
```

### Accessing Individual Elements in a List

- Lists are ordered, allowing access to individual elements using an index.
- Indices start from 0 in Python, meaning the first element has index 0, the second has index 1, and so on.
- The index of the last element in a list of n elements is n-1.

**Example:**
```python
>>> data = [4.2, 9.5, 1.1, 3.1, 2.9, 8.5, 7.2, 3.5, 1.4, 1.9, 3.3]
>>> data[0]
4.2
```"
"page_content='186 Sequences
>>> data[1]
9.5
>>> data[9]
1.9
IndexError
Let’s say we have a list with𝑛 elements. What happens if we try to access
a list using an index that doesn’t exist, say index𝑛 or index𝑛 + 1?
>>> foo = [2, 4, 6]
>>> foo[3] # there is no element at index 3!!!
Traceback (most recent call last):
File ""/.../code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
IndexError: list index out of range
This IndexError message is telling us thereis no element with index 3 .
Changing the values of individual elements in a list
We can use the index to access individual elements in the list for modi-
fication as well (remember: lists are mutable).
Let’s say there was an error in data collection, and we wanted to
change the value at index 7 from 3.5 to 6.1. To do this, we put the list
and index on the left side of an assignment.
>>> data
[4.2, 9.5, 1.1, 3.1, 2.9, 8.5, 7.2, 3.5, 1.4, 1.9, 3.3]
>>> data[7] = 6.1
>>> data
[4.2, 9.5, 1.1, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
Let’s do another: We’ll change the element at index 2 to 4.7.
>>> data[2] = 4.7
>>> data
[4.2, 9.5, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
Some convenient built-in functions that work with lists
Python provides many tools and built-in functions that work with lists
(and tuples, which we’ll see soon). Here are a few such built-in functions:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 200}","## Python Lists: Indexing and Mutation

### Metadata

- Source: 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf'
- Page: 200

### Indexing

Indexed access of a list allows us to retrieve or modify individual elements based on their position using the index operator (`[]`). Indexes start from zero and end at `n-1`, where `n` is the number of elements in the list.

### Out-of-Range Indexing

Attempting to access an index that doesn't exist results in an `IndexError`. The error message will indicate that the index is out of range.

### Modifying List Elements

Individual elements in a list can be changed via indexed assignment. Simply assign the new value to the desired index of the list.

### Built-in List Functions

Python provides numerous built-in functions specifically designed to work with lists and tuples. These include:

| Function | Description |
|---|---|
| `len(list)` | Returns the number of elements in a list |
| `list.append(value)` | Appends a value to the end of a list |
| `list.insert(index, value)` | Inserts a value at a specified index |
| `list.remove(value)` | Removes the first occurrence of a specified value |
| `list.pop(index)` | Removes and returns the element at a specified index (default last) |
| `list.reverse()` | Reverses the order of elements in a list |
| `list.sort()` | Sorts the elements of a list in ascending order |
| `list.copy()` | Returns a copy of a list |
| `max(list)` | Returns the maximum value in a list |
| `min(list)` | Returns the minimum value in a list |
| `sum(list)` | Returns the sum of all elements in a list |"
"page_content='Lists 187
description constraint(s) if any example
sum() calculates sum of
elements
values must be numeric or
Boolean *
sum(data)
len() returns number of
elements
none len(data)
max() returns largest
value
can’t mix numerics and
strings;
max(data)
must be all numeric or all
strings
min() returns smallest
value
can’t mix numerics and
strings;
min(data)
must be all numeric or all
strings
* In the context ofsum(), max(), andmin(), BooleanTrue is treated as 1
and BooleanFalse is treated as 0.
Using our exampledata (from above):
>>> sum(data)
52.8
>>> len(data)
11
>>> max(data)
9.5
>>> min(data)
1.4
It seems natural at this point to ask, can I calculate the average
(mean) of the values in a list? If the list contains only numeric values, the
answer is “yes,” but Python doesn’t supply a built-in for this. However,
the solution is straightforward.
>>> sum(data) / len(data)
4.8
… and there’s our mean!
Some convenient list methods
We’ve seen already that string objects have methods associated with
them. For example,.upper(), .lower(), and .capitalize(). Recall that
methods are just functions associated with objects of a given type, which
operate on the object’s data (value or values).
Lists also have handy methods which operate on a list’s data. Here
are a few:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 201}","### Lists

#### Metadata

- Page number: 201
- Line numbers: 187-215
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

#### Description of List Functions

| Function | Description | Constraint(s) | Example |
|---|---|---|---|
| sum() | Calculates the sum of elements | Values must be numeric or Boolean* | sum(data) |
| len() | Returns the number of elements | None | len(data) |
| max() | Returns the largest value | Can't mix numerics and strings; must be all numeric or all strings | max(data) |
| min() | Returns the smallest value | Can't mix numerics and strings; must be all numeric or all strings | min(data) |

* In the context of sum(), max(), and min(), Boolean True is treated as 1 and Boolean False is treated as 0.

#### Example Usage

```python
>>> sum(data)
52.8
>>> len(data)
11
>>> max(data)
9.5
>>> min(data)
1.4
```

#### Calculating Average (Mean)

To calculate the average (mean) of values in a list with only numeric values, you can use:

```python
sum(data) / len(data)
```

#### List Methods

Lists also have methods that operate on their data, similar to the methods associated with strings (.upper(), .lower(), etc.) Here are a few examples:"
"page_content='188 Sequences
description constraint(s) if any example
.sort() sorts list can’t mix strings data.sort()
and numerics
.append() appends an item to list none data.append(8)
.pop() “pops” the last
element off list
cannot pop from
empty list
data.pop()
and returns its value
or
removes the element at
index 𝑖
must be valid
index
data.pop(2)
and returns its value
There are many others, but let’s start with these.
Appending an element to a list
To append an element to a list, we use the.append() method, wherex is
the element we wish to append.
>>> data
[4.2, 9.5, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
>>> data.append(5.9)
>>> data
[4.2, 9.5, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3, 5.9]
By using the.append() method, we’ve appended the value 5.9 to the end
of the list.
“Popping” elements from a list
We can remove (pop) elements from a list using the.pop() method. If we
call .pop() without an argument, Python will remove the last element in
the list and return its value.
>>> data.pop()
5.9
>>> data
[4.2, 9.5, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
Notice that the value 5.9 is returned, and that the last element in the
list (5.9) has been removed.
Sometimes we wish to pop an element from a list that doesn’t happen
to be the last element in the list. For this we can supply an index,.pop(i),
where i is the index of the element we wish to pop.
>>> data.pop(1)
9.5' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 202}","**Metadata**

* Page Number: 202
* Line Numbers: 1-50
* Source: An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Lists**

**Key Operations**

| Operation | Description | Constraint | Example |
|---|---|---|---|
| `.sort()` | Sorts list | Cannot mix strings and numerics | `data.sort()` |
| `.append()` | Appends an item to list | None | `data.append(8)` |
| `.pop()` | ""Pops"" the last element off list and returns its value | Cannot pop from empty list | `data.pop()` |
| `.pop(i)` | Removes the element at index i and returns its value | Index must be valid | `data.pop(2)` |

**Appending an Element to a List**

To append an element to a list, use the `.append()` method, where x is the element to append:

```
>>> data
[4.2, 9.5, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
>>> data.append(5.9)
>>> data
[4.2, 9.5, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3, 5.9]
```

**""Popping"" Elements from a List**

Remove elements from a list using the `.pop()` method. Without an argument, Python removes the last element:

```
>>> data.pop()
5.9
>>> data
[4.2, 9.5, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
```

To pop an element from a specific index, use `.pop(i)` where i is the index:

```
>>> data.pop(1)
9.5
```"
"page_content='Lists 189
>>> data
[4.2, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
For reasons which may be obvious, we cannot.pop() from an empty list,
and we cannot.pop(i) if the indexi does not exist.
Sorting a list in place
Now let’s look at.sort(). In place means that the list is modified right
where it is, and there’s no list returned from.sort(). This means that
calling .sort() alters the list !
>>> data
[4.2, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
>>> data.sort()
>>> data
[1.4, 1.9, 2.9, 3.1, 3.3, 4.2, 4.7, 6.1, 7.2, 8.5]
This isunlike the string methods like.lower() which return an altered
copy of the string. Why is this? Strings are immutable; lists are mutable.
Because .sort() sorts a listin place , it returnsNone. So don’t think
you can work with the return value of.sort() because there isn’t any!
Example:
>>> m = [5, 7, 1, 3, 8, 2]
>>> n = m.sort()
>>> n
>>> type(n)
<class 'NoneType'>
Some things you might not expect
Lists behave differently from many other objects when performing as-
signment. Let’s say you wanted to preserve your data “as-is” but also
have a sorted version. You might think that this would do the trick.
>>> data = [4.2, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
>>> copy_of_data = data # naively thinking you're making a copy
>>> data.sort()
>>> data
[1.4, 1.9, 2.9, 3.1, 3.3, 4.2, 4.7, 6.1, 7.2, 8.5]
But now look what happens when we inspectcopy_of_data.
>>> copy_of_data
[1.4, 1.9, 2.9, 3.1, 3.3, 4.2, 4.7, 6.1, 7.2, 8.5]
Wait! What? How did that happen?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 203}","**Lists**

**Page:** 203

**Line Numbers:** Not provided

**Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Key Concepts**

### Manipulating Lists
- `.pop()`: Removes and returns the last element of the list.
- `.pop(i)`: Removes and returns the element at index `i` of the list.

### Sorting Lists In-Place
- `.sort()`: Sorts the list in place, altering it directly.
- Differs from string methods like `.lower()` which return an altered copy.
- Returns `None` as it modifies the list in-place.

### Unexpected Behavior in Assignments
- Assignment in lists differs from other objects.
- Assigning a sorted list to another variable references the same list, resulting in both variables being sorted.

**Examples**

* Sorting a list in-place:
```python
>>> data = [4.2, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
>>> data.sort()
>>> data
[1.4, 1.9, 2.9, 3.1, 3.3, 4.2, 4.7, 6.1, 7.2, 8.5]
```

* Unexpected behavior in assignments:
```python
>>> data = [4.2, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
>>> copy_of_data = data # naively thinking you're making a copy
>>> data.sort()
>>> data
[1.4, 1.9, 2.9, 3.1, 3.3, 4.2, 4.7, 6.1, 7.2, 8.5]
>>> copy_of_data
[1.4, 1.9, 2.9, 3.1, 3.3, 4.2, 4.7, 6.1, 7.2, 8.5]
```"
"page_content='190 Sequences
Whenwemadetheassignment copy_of_data = dataweassumed(quite
reasonably) that we were making a copy of our data. It turns out this is
not so. What we wound up with wastwo names for the same underlying
data structure, data and copy_of_data. This is the way things work with
mutable objects (like lists).3
So how do we get a copy of our list? One way is to use the.copy()
method.4 This will return a copy of the list, so we have two different list
instances.5
>>> data = [4.2, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
>>> copy_of_data = data.copy() # call the copy method
>>> data.sort()
>>> data
[1.4, 1.9, 2.9, 3.1, 3.3, 4.2, 4.7, 6.1, 7.2, 8.5]
>>> copy_of_data
[4.2, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
A neat trick to get the last element of a list
Let’s say we have a list, and don’t know how many elements are in it.
Let’s say we want thelast element in the list. How might we go about
it?
We could take a brute force approach. Say our list is calledx.
>>> x[len(x) - 1]
Let’s unpack that. Within the brackets we have the expressionlen(x)
- 1 . len(x) returns the number of elements in the list, and then we
subtract 1 to adjust for zero-indexing (if we have𝑛 elements in a list,
the index of the last element is𝑛 − 1). So that works, but it’s a little
clunky. Fortunately, Python allows us to get the last element of a list
with an index of -1.
>>> x[-1]
You may think of this as counting backward through the indices of the
list.
A puzzle (optional)
Say we have some listx (as above), and we’re intrigued by this idea of
counting backward through a list, and we want to find an alternative way
to access the first element ofany list of any size with a negative-valued
3 The reasons for this state of affairs is beyond the scope of this text. However,
if you’re curious, see: https://docs.python.org/3/library/copy.html.
4 There are other approaches to creating a copy of a list, specifically using the
list constructor or slicing with [:], but we’ll leave these for another time. However,
slicing is slower than the other two. Source: I timed it.
5 Actually it makes what’s called a shal low copy . See: https://docs.python.org/
3/library/copy.html.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 204}","## List Manipulation

### Copying Lists

When assigning a new name to an existing list, e.g., `copy_of_data = data`, we do not create a new list but instead create a new name for the same underlying data structure.

To obtain a true copy of a list, use the `.copy()` method.

**Example:**

```python
data = [4.2, 4.7, 3.1, 2.9, 8.5, 7.2, 6.1, 1.4, 1.9, 3.3]
copy_of_data = data.copy()
```

### Accessing the Last Element of a List

**Two methods:**

1. Brute force: `x[len(x) - 1]`
2. Using negative index: `x[-1]`

Negative indexing counts backward through the list indices.

### Puzzle

**Challenge:** Access the first element of any list using negative indexing.

**Solution:** Use an index of `-len(x)` to access the first element of list `x`."
"page_content='T uples 191
index. Is this possible? Can you write a solution that works for any list
x?
10.2 T uples
A tuple? What’s a tuple? Atuple is animmutable sequence of objects.
Like lists they allow for indexed access of elements. Like lists they
may contain any arbitrary type of Python object (int, float, bool, str,
etc.). Unlike lists they are immutable, meaning that once created they
cannot change. You’ll see that this property can be desirable in certain
contexts.
How do we write a tuple?
Thecrucialthinginwritingatupleiscommas—weseparateelementsofa
tuplewithcommas—butit’sconventionaltowritethemwithparentheses
as well.
Here are some examples:
>>> coordinates = 0.378, 0.911
>>> coordinates
(0.378, 0.911)
>>> coordinates = (1.452, 0.872)
>>> coordinates
(1.452, 0.872)
We can create a tuple with a single element with a comma, with or
without parentheses.
>>> singleton = 5,
>>> singleton
(5,)
>>> singleton = ('Hovercraft',)
>>> singleton
('Hovercraft',)
Notice that it’s the comma that’s crucial.
>>> (5)
5
>>> ('Hovercraft')
'Hovercraft'
We can create an empty tuple, thus:
>>> empty = ()
>>> empty
()
In this case, no comma is needed.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 205}","## Tuples

### Definition

A tuple is an immutable sequence of objects. Like lists, tuples allow for indexed access of elements and may contain any arbitrary type of Python object (int, float, bool, str, etc.). Unlike lists, they are immutable, meaning that once created, they cannot change. This property can be desirable in certain contexts.

### Syntax

Tuples are written with commas separating elements, optionally enclosed in parentheses:

```
coordinates = 0.378, 0.911
coordinates = (1.452, 0.872)
```

A tuple with a single element requires a comma, with or without parentheses:

```
singleton = 5,
singleton = ('Hovercraft',)
```

An empty tuple is created with empty parentheses:

```
empty = ()
```

### Differences between Tuples and Lists

| Feature | Tuple | List |
|---|---|---|
| Mutability | Immutable | Mutable |
| Creation Syntax | Commas between elements, optionally enclosed in parentheses | Square brackets |
| Single Element Syntax | Comma required | Comma not required |
| Use Cases | When immutability is desired, such as in data structures where values should not be modified | When mutability is required, such as in data structures where values can change |"
"page_content='192 Sequences
Accessing elements in a tuple
As with lists, we can access the elements of a tuple with integer indices.
>>> t = ('cheese', 42, True, -1.0)
>>> t[0]
'cheese'
>>> t[1]
42
>>> t[2]
True
>>> t[3]
-1.0
Just like lists, we can access the last element by providing -1 as an
index.
>>> t[-1]
-1.0
Finding the number of elements in a tuple
As with lists, we can get the number of elements in a tuple withlen().
>>> t = ('cheese', 42, True, -1.0)
>>> len(t)
4
Why would we use tuples instead of lists?
First, there are cases in which we want immutability. Lists are a dynamic
data structure. Tuples on the other hand are well-suited to static data.
As one example, say we’re doing some geospatial tracking or analy-
sis. We might use tuples to hold the coordinates of some location—the
latitude and longitude. A tuple is appropriate in this case.
>>> (44.4783021, -73.1985849)
Clearly a list is not appropriate: we’d never want to append elements
or remove elements from latitude and longitude, and coordinates like this
belong together—they form a pair.
Another case would be records retrieved from some kind of database.
>>> student_record = ('Porcupine', 'Egbert', 'eporcupi@uvm.edu',
.... 3.21, 'sophomore')
Another reason that tuples are preferred in many contexts is that
creating a tuple is more eﬀicient than creating a list. So, for example, if
you’re reading many records from a database into Python objects, using' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 206}","### Metadata

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 206

### 192 Sequences

**Accessing elements in a tuple**

As with lists, we can access the elements of a tuple with integer indices.

```python
>>> t = ('cheese', 42, True, -1.0)
>>> t[0]
'cheese'
>>> t[1]
42
>>> t[2]
True
>>> t[3]
-1.0
```

Just like lists, we can access the last element by providing -1 as an index.

```python
>>> t[-1]
-1.0
```

**Finding the number of elements in a tuple**

As with lists, we can get the number of elements in a tuple with len().

```python
>>> t = ('cheese', 42, True, -1.0)
>>> len(t)
4
```

**Why would we use tuples instead of lists?**

First, there are cases in which we want immutability. Lists are a dynamic data structure. Tuples on the other hand are well-suited to static data.

As one example, say we’re doing some geospatial tracking or analysis. We might use tuples to hold the coordinates of some location—the latitude and longitude. A tuple is appropriate in this case.

```python
>>> (44.4783021, -73.1985849)
```

Clearly a list is not appropriate: we’d never want to append elements or remove elements from latitude and longitude, and coordinates like this belong together—they form a pair.

Another case would be records retrieved from some kind of database.

```python
>>> student_record = ('Porcupine', 'Egbert', 'eporcupi@uvm.edu',
.... 3.21, 'sophomore')
```

Another reason that tuples are preferred in many contexts is that creating a tuple is more efficient than creating a list. So, for example, if you’re reading many records from a database into Python objects, using tuples can improve performance.

**Differences between lists and tuples**

| Feature     | List       | Tuple        |
| ----------- | ----------- | ------------- |
| Mutability | Mutable    | Immutable     |
| Creation Time | Slower      | Faster        |
| Space      | More        | Less          |
| Use Case    | Dynamic Data | Static Data    |"
"page_content='T uples 193
tuples will be faster. However, the difference is small, and could only
become a factor if handling many records (think millions).
Y ou say tuples are immutable. Prove it.
Just try modifying a tuple. Say we have the tuple(1, 2, 3) . We can
read individual elements from the tuple just like we can for lists. But
unlike lists we can’t use the same approach to assign a new value to an
element of the tuple.
>>> t = (1, 2, 3)
>>> t[0]
1
>>> t[0] = 51
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
There you have it: “‘tuple’ object does not support item assignment.”
What about this?
>>> t = (1, 2, 3)
>>> t = ('a', 'b', 'c')
“There!” you say, “I’ve changed the tuple!” No, you haven’t. What’s
happened here is that you’ve created a new tuple, and given it the same
namet.
What about a tuple that contains a list?
Tuples can contain any type of Python object—even lists. This is valid:
>>> t = ([1, 2, 3],)
>>> t
([1, 2, 3],)
Now let’s modify the list.
>>> t[0][0] = 5
>>> t
([5, 2, 3],)
Haven’t we just modified the tuple? Actually, no. The tuple contains
the list (which is mutable). So we can modify the list within the tuple,
but we can’t replace the list with another list.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 207}","**Tuples**

**Metadata**

* Page: 207
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Key Differences Between Tuples and Lists

| Feature | Tuple | List |
|---|---|---|
| Mutability | Immutable | Mutable |
| Speed | Faster than lists | Slower than lists |
| Item Assignment | Not supported | Supported |
| Use Case | Preferred for data that does not need to change | Preferred for data that needs to be modified |

### Immutability of Tuples

Tuples are immutable, meaning their contents cannot be modified after creation. This can be demonstrated by attempting to modify an existing tuple:

```python
t = (1, 2, 3)
t[0] = 51
# Traceback (most recent call last):
# File ""<stdin>"", line 1, in <module>
# TypeError: 'tuple' object does not support item assignment
```

### Tuples Containing Lists

Tuples can contain any Python object, including lists. While the tuple itself remains immutable, the list within the tuple can be modified:

```python
t = ([1, 2, 3],)
t[0][0] = 5
# t will now be ([5, 2, 3],)
```"
"page_content='194 Sequences
>>> t = ([1, 2, 3],)
>>> new_list = [4, 5, 6]
>>> t[0] = new_list
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
Again, the tuple is unchanged.
You may ask: What’s up with the two indices?
Say we have a list within a tuple. The list has an index within the
tuple, and the elements of the list have their indices within the list. So
the first index is used to retrieve the list from within the tuple, and the
second is used to retrieve the element from the list.
>>> t = (['a', 'b', 'c'],)
>>> t[0]
['a', 'b', 'c']
>>> t[0][0]
'a'
>>> t[0][1]
'b'
>>> t[0][2]
'c'
10.3 Mutability and immutability
Mutability and immutability are properties of certain classes of object.
Forexample, these are immutable—once created they cannot be changed:
• numeric types (int and float)
• Booleans
• strings
• tuples
However, lists are mutable. Later, we’ll see another mutable data
structure, the dictionary.
Immutable objects
You may ask what’s been happening in cases like this:
>>> x = 75021
>>> x
75021
>>> x = 61995
>>> x
61995
Aren’t we changing the value ofx? While we might speak this way
casually, what’s really going on here is that we’re creating a new int,x.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 208}","**Content Formatting**

**194 Sequences**

### Tuple Assignment and Mutability

**Metadata**

* Page Number: 208
* Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Code Formatting**

```python
>>> t = ([1, 2, 3],)
>>> new_list = [4, 5, 6]
```

**Tuple Assignment**

Attempting to assign a new list to the tuple element t[0] results in a TypeError:

```
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
```

**Nested Tuple Indices**

In a tuple containing a list, the first index retrieves the list, and the second index retrieves elements within the list.

```python
>>> t = (['a', 'b', 'c'],)
>>> t[0]
['a', 'b', 'c']
>>> t[0][0]
'a'
>>> t[0][1]
'b'
>>> t[0][2]
'c'
```

### Mutability and Immutability

**Immutable Objects**

Immutable objects cannot be changed once created, including:

* Numeric types (int, float)
* Booleans
* Strings
* Tuples

**Mutable Objects**

Lists are mutable data structures, meaning their contents can be changed.

**Example**

Assigning new int values to x does not change its current value, but creates new int objects.

```python
>>> x = 75021
>>> x
75021
>>> x = 61995
>>> x
61995
```"
"page_content='Mutability and immutability 195
Here’s how we can demonstrate this—using Python’s built-in function
id().6
>>> x = 75021
>>> id(x)
4386586928
>>> x = 61995
>>> id(x)
4386586960
See? The IDs have changed.
The IDs you’ll see if you try this on your computer will no doubt be
different. But you get the idea: different IDs mean we have two different
objects!
Same goes for strings, another immutable type.
>>> s = 'Pharoah Sanders' # who passed away the day I wrote this
>>> id(s)
4412581232
>>> s = 'Sal Nistico'
>>> id(s)
4412574640
Same goes for tuples, another immutable type.
>>> t = ('a', 'b', 'c')
>>> id(t)
4412469504
>>> t[0] = 'z' # Try to change an element of t...
Traceback (most recent call last):
File ""/Library/.../code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> id(t) # still the same object
4412469504
>>> t = ('z', 'y', 'x')
>>> id(t)
4412558784
Mutable objects
Now let’s see what happens in the case of a list. Lists are mutable.
6 While using id() is fine for tinkering around in the Python shell, this is the
only place it should be used. Never include id() in any programs you write. The
Python documentation states that id() returns “the ‘identity’ of an object. This is
an integer which is guaranteed to be unique and constant for this object during its
lifetime. T wo objects with non-overlapping lifetimes may have the same id() value. ”
So please keep this in mind.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 209}","**Mutability and Immutability**

**Metadata**

* Page No.: 209
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Demonstration of Mutability and Immutability using Python's Built-in Function id()**

**Immutable Objects:**

* **Integers:**
```python
>>> x = 75021
>>> id(x)
4386586928
>>> x = 61995
>>> id(x)
4386586960
```
* **Strings:**
```python
>>> s = 'Pharoah Sanders'
>>> id(s)
4412581232
>>> s = 'Sal Nistico'
>>> id(s)
4412574640
```
* **Tuples:**
```python
>>> t = ('a', 'b', 'c')
>>> id(t)
4412469504
>>> t[0] = 'z' # Attempt to modify an element
Traceback (most recent call last):
File ""/Library/.../code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> id(t) # Object remains the same
4412469504
>>> t = ('z', 'y', 'x') # Reassignment creates a new object
>>> id(t)
4412558784
```

**Mutable Objects:**

* **Lists:**
```python
>>> L = [1, 2, 3]
>>> id(L)
4412842960
>>> L[0] = 4
>>> id(L)
4412842960  # Object remains the same after modification
```"
"page_content='196 Sequences
>>> parts = ['rim', 'hub', 'spokes']
>>> id(parts)
4412569472
>>> parts.append('inner tube')
>>> parts
['rim', 'hub', 'spokes', 'inner tube']
>>> id(parts)
4412569472
>>> parts.pop(0)
'rim'
>>> parts
['hub', 'spokes', 'inner tube']
>>> id(parts)
4412569472
See? We make changes to the list and the ID remains unchanged. It’s
the same object throughout!
V ariables, names, and mutability
Assignment in Python is all aboutnames, and it’s important to under-
stand that when we make assignments we arenot copying values from
one variable to another. This becomes most clear when we examine the
behavior with respect to mutable objects (for example, lists):
>>> lst_a = [1, 2, 3, 4, 5]
>>> lst_b = lst_a
Now let’s changelst_a.
>>> lst_a.append(6)
>>> lst_b
[1, 2, 3, 4, 5, 6]
See? lst_b isn’t a copy oflst_a, it’s a different name for the same object!
If a mutable value has more than one name, if we affect some change
in the value via one name, all the other names still refer to the mutated
value.
Now, what do you think about this example:
>>> lst_a = [1, 2, 3, 4, 5]
>>> lst_b = [1, 2, 3, 4, 5]
>>> lst_a.append(6)
Are lst_a and lst_b different names for the same object? Or do they
refer to different objects?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 210}","## Python Concepts: Sequences, Variables, and Mutability

### Sequences

- Python provides a variety of sequence types, such as lists, tuples, and strings.
- Sequences can be created by enclosing items in square brackets (for lists), parentheses (for tuples), or double or single quotes (for strings).
- Sequences can contain any type of data, including other sequences.
- Sequences are ordered collections, meaning that they have a defined order of elements.
- Sequences are mutable, meaning that their elements can be added to, removed, or replaced.

### Variables, Names, and Mutability

- **Variables** are used to store data in a Python program.
- **Names** are the symbolic identifiers used to refer to variables.
- **Assignment** in Python is the process of associating a value with a variable.
- When a mutable object (e.g., a list) is assigned to a variable, the variable becomes a reference to the object itself, rather than a copy of the object.
- If a mutable value has multiple names, any change made to the value via one name will be reflected in all other names.

### Example

```python
>>> parts = ['rim', 'hub', 'spokes']
>>> id(parts)
4412569472
>>> parts.append('inner tube')
>>> parts
['rim', 'hub', 'spokes', 'inner tube']
>>> id(parts)
4412569472
>>> parts.pop(0)
'rim'
>>> parts
['hub', 'spokes', 'inner tube']
>>> id(parts)
4412569472
```

In this example, the list parts is assigned a reference to a list containing the strings 'rim', 'hub', and 'spokes'. The id() function is used to retrieve the unique identifier for the list object. When the append() method is called to add the string 'inner tube' to the list, the id() function shows that the same list object is still being referenced. Similarly, when the pop() method is called to remove the first element from the list, the id() function shows that the same list object is still being referenced.

This demonstrates that when a mutable object is assigned to a variable, the variable becomes a reference to the object itself, rather than a copy of the object. Any changes made to the object via the variable will be reflected in the object itself, regardless of how many other names may be associated with the object."
"page_content='Mutability and immutability 197
>>> lst_a
[1, 2, 3, 4, 5, 6]
>>> lst_b
[1, 2, 3, 4, 5]
lst_a and lst_b are names for different objects! Now, does this mean
that assignment works differently for mutable and immutable objects?
Not at all.
Then why, you may ask, when we assign 1 tox and 1 toy do both
names refer to the same value, whereas when we assign[1, 2, 3, 4, 5]
to lst_a and [1, 2, 3, 4, 5] to lst_b we have two different lists?
Let’s say you and a friend wrote down lists of the three greatest base-
ball teams of all time. Furthermore, let’s say your lists were identical…
T rigger warning: opinions about MLB teams follow!
>>> my_list = ['Cubs', 'Tigers', 'Dodgers']
>>> janes_list = ['Cubs', 'Tigers', 'Dodgers']
Now, my list is my list, and Jane’s list is Jane’s list. These are two
different lists.
Let’s say that the Dodgers fell out of favor with Jane, and she replaced
them with the Cardinals (abhorrent, yes, I know).
>>> janes_list.pop()
'Dodgers'
>>> janes_list.append('Cardinals')
>>> janes_list
['Cubs', 'Tigers', 'Cardinals']
>>> my_list
['Cubs', 'Tigers', 'Dodgers']
That makes sense, right? Even though the lists started with identical ele-
ments, they’re still two different lists and mutating one does not mutate
the other.
But be aware that we can give two different names to the same mu-
table object (as shown above).
>>> lst_a = [1, 2, 3, 4, 5]
>>> lst_b = lst_a
>>> lst_a.append(6)
>>> lst_a
[1, 2, 3, 4, 5, 6]
>>> lst_b
[1, 2, 3, 4, 5, 6]
This latter case is relevant when we pass a list to a function. We may
think we’re making a copy of the list, when in fact, we’re only giving it
another name. This can result in unexpected behavior—we think we’re' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 211}","## Mutability and Immutability

### Assignment

**Immutables**

- Assignment works by creating a new object and binding the name to it.
- Example:
  ```
  >>> x = 1
  >>> y = 1
  >>> x is y
  True
  ```
  - `x` and `y` refer to the same integer object.

**Mutables**

- Assignment works by creating a new object and binding the name to it.
  - However, the new object initially contains a copy of the data from the original object.
- Example:
  ```
  >>> lst_a = [1, 2, 3, 4, 5]
  >>> lst_b = lst_a
  >>> lst_a.append(6)
  >>> lst_a
  [1, 2, 3, 4, 5, 6]
  >>> lst_b
  [1, 2, 3, 4, 5, 6]
  ```
  - `lst_a` and `lst_b` initially refer to the same list object.
  - Appending an element to `lst_a` modifies the original list object, which is also referenced by `lst_b`.

### Aliasing

- Aliasing occurs when multiple names refer to the same object.
- This can be done intentionally or unintentionally.
- Example:
  ```
  >>> lst_a = [1, 2, 3, 4, 5]
  >>> lst_b = lst_a
  ```
  - `lst_a` and `lst_b` are aliases for the same list object.
  - Changes made to either alias will affect the other.

### Pass-By-Reference vs. Pass-By-Value

- Passing an immutable object to a function passes a copy of the object.
- Passing a mutable object to a function passes a reference to the original object.
- This means that changes made to the mutable object within the function will also affect the original object.
- Example:
  ```
  def change_list(lst):
    lst.append(6)

  >>> lst_a = [1, 2, 3, 4, 5]
  >>> change_list(lst_a)
  >>> lst_a
  [1, 2, 3, 4, 5, 6]
  ```
  - `lst_a` is passed by reference to `change_list`.
  - `change_list` modifies the original list object, which affects `lst_a`."
"page_content='198 Sequences
modifying a copy of a list, when we’re actually modifying the list under
another name!
10.4 Subscripts are indices
Here we make explicit the connection between subscript notation in
mathematics and indices in Python.
In mathematics: Say we have a collection of objects𝑋. We can refer
to individual elements of the collection by associating each element of
the collection with some index from the natural numbers. Thus,
𝑥0 ∈ 𝑋
𝑥1 ∈ 𝑋
…
𝑥𝑛 ∈ 𝑋
Different texts may use different starting indices. For example, a linear
algebra text probably starts indices at one. A text on set theory is likely
to use indices starting at zero.
In Python, sequences—lists, tuples, and strings—are indexed in this
fashion. All Python indices start at zero, and we refer to Python as being
zero indexed.
Indexing works the same for lists, tuples, and even strings. Remember
that these are sequences—ordered collections—so each element has an
index, and we may access elements within the sequence by its index.
my_list = ['P', 'O', 'R', 'C', 'U', 'P', 'I', 'N', 'E']
We start indices at zero, and for a list of length𝑛, the indices range from
zero to𝑛 − 1.
It’s exactly the same for tuples.
my_tuple = ('P', 'O', 'R', 'C', 'U', 'P', 'I', 'N', 'E')' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 212}","### 10.4 Subscripts are indices

**Metadata:**
- Source: [C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf]
- Page: 212

**Content Structuring:**

1. **Subscripts in Mathematics vs. Indices in Python**
2. **Zero-Indexed Sequencing in Python**
3. **Accessing Elements using Indices**

**Content:**

**1. Subscripts in Mathematics vs. Indices in Python**

- In mathematics, subscripts are used to refer to individual elements of a collection by associating each element with an index from the natural numbers.
- In Python, indices fulfill a similar purpose for sequences (lists, tuples, and strings).

**2. Zero-Indexed Sequencing in Python**

- Python indices start at zero, making it a ""zero-indexed"" language.
- For a sequence of length n, indices range from 0 to n-1.

**3. Accessing Elements using Indices**

- To access an element within a sequence, simply use its index enclosed in square brackets.
- Example:
```python
my_list = ['P', 'O', 'R', 'C', 'U', 'P', 'I', 'N', 'E']
letter_at_index_3 = my_list[3]
```
- The variable `letter_at_index_3` will now hold the value 'C' from the list."
"page_content='Concatenating lists and tuples 199
The picture looks the same, doesn’t it? That’s because it is! It’s even the
same for strings.
my_string = 'PORCUPINE'
Whilewedon’texplicitlyseparatethecharactersofastringwithcommas,
they are a sequence nonetheless, and we can read characters by index.
10.5 Concatenating lists and tuples
Sometimes we have two or more lists or tuples, and we want to combine
them. We’ve already seen how we can concatenate strings using the+
operator. This works for lists and tuples too!
>>> plain_colors = ['red', 'green', 'blue', 'yellow']
>>> fancy_colors = ['ultramarine', 'ochre', 'indigo', 'viridian']
>>> all_colors = plain_colors + fancy_colors
>>> all_colors
['red', 'green', 'blue', 'yellow', 'ultramarine', 'ochre',
'indigo', 'viridian']
or
>>> plain_colors = ('red', 'green', 'blue', 'yellow')
>>> fancy_colors = ('ultramarine', 'ochre', 'indigo', 'viridian')
>>> all_colors = plain_colors + fancy_colors
>>> all_colors
('red', 'green', 'blue', 'yellow', 'ultramarine', 'ochre',
'indigo', 'viridian')
This works just like coupling railroad cars. Coupling two trains with
multiple cars preserves the ordering of the cars.
Answering the inevitable question: Can we concatenate a list with a
tuple using the+ operator? No, we cannot.
>>> [1, 2, 3] + [4, 5, 6]
[1, 2, 3, 4, 5, 6]
>>> [1, 2, 3] + (4, 5, 6)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: can only concatenate list (not ""tuple"") to list' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 213}","# Concatenating lists and tuples

## 10.5 Concatenating lists and tuples

The picture looks the same, doesn’t it? That’s because it is! It’s even the same for strings.

```
my_string = 'PORCUPINE'
```

While we don’t explicitly separate the characters of a string with commas, they are a sequence nonetheless, and we can read characters by index.

Sometimes we have two or more lists or tuples, and we want to combine them. We’ve already seen how we can concatenate strings using the + operator. This works for lists and tuples too!

```
>>> plain_colors = ['red', 'green', 'blue', 'yellow']
>>> fancy_colors = ['ultramarine', 'ochre', 'indigo', 'viridian']
>>> all_colors = plain_colors + fancy_colors
>>> all_colors
['red', 'green', 'blue', 'yellow', 'ultramarine', 'ochre',
 'indigo', 'viridian']
```

or

```
>>> plain_colors = ('red', 'green', 'blue', 'yellow')
>>> fancy_colors = ('ultramarine', 'ochre', 'indigo', 'viridian')
>>> all_colors = plain_colors + fancy_colors
>>> all_colors
('red', 'green', 'blue', 'yellow', 'ultramarine', 'ochre',
 'indigo', 'viridian')
```

This works just like coupling railroad cars. Coupling two trains with multiple cars preserves the ordering of the cars.

Answering the inevitable question: Can we concatenate a list with a tuple using the + operator? No, we cannot.

```
>>> [1, 2, 3] + [4, 5, 6]
[1, 2, 3, 4, 5, 6]
>>> [1, 2, 3] + (4, 5, 6)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: can only concatenate list (not ""tuple"") to list'
```"
"page_content='200 Sequences
10.6 Copying lists
We’ve seen elsewhere that the following simply gives another name to a
list.
>>> lst_1 = ['gamma', 'epsilon', 'delta', 'alpha', 'beta']
>>> lst_2 = lst_1
>>> lst_1.sort()
>>> lst_2
['alpha', 'beta', 'delta', 'epsilon', 'gamma']
However, there are times when we really mean to make a copy. The
.copy() method returns ashal low copy of a list.
>>> lst_1 = ['gamma', 'epsilon', 'delta', 'alpha', 'beta']
>>> lst_2 = lst_1.copy()
>>> lst_1.sort()
>>> lst_2
['gamma', 'epsilon', 'delta', 'alpha', 'beta']
We can copy a list using a slice.
>>> lst_1 = ['gamma', 'epsilon', 'delta', 'alpha', 'beta']
>>> lst_2 = lst_1[:] # slice
>>> lst_1.sort()
>>> lst_2
['gamma', 'epsilon', 'delta', 'alpha', 'beta']
There’s another way we can copy a list: using thelist constructor. The
list constructor takes some iterable and iterates it, producing a new list
composed of the elements yielded by iteration. Since lists are iterable,
we can use this to create a copy of a list.
>>> lst_1 = ['gamma', 'epsilon', 'delta', 'alpha', 'beta']
>>> lst_2 = list(lst_1) # using the list constructor
>>> lst_1.sort()
>>> lst_2
['gamma', 'epsilon', 'delta', 'alpha', 'beta']
So now we havethree ways to make a copy of a list:
• By using the.copy() method
• By slicing (lst_2 = lst_1[:])
• By using the list constructor (lst_2 = list(lst_1))
Fun fact: Under the hood,.copy() simply calls the list constructor to
make a new list.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 214}","## 200 Sequences

### 10.6 Copying Lists

As discussed before, assigning one list to another simply gives another name to the same list.

```python
>>> lst_1 = ['gamma', 'epsilon', 'delta', 'alpha', 'beta']
>>> lst_2 = lst_1
>>> lst_1.sort()
>>> lst_2
['alpha', 'beta', 'delta', 'epsilon', 'gamma']
```

However, using the `.copy()` method returns a shallow copy of a list.

```python
>>> lst_1 = ['gamma', 'epsilon', 'delta', 'alpha', 'beta']
>>> lst_2 = lst_1.copy()
>>> lst_1.sort()
>>> lst_2
['gamma', 'epsilon', 'delta', 'alpha', 'beta']
```

We can also copy a list using a slice.

```python
>>> lst_1 = ['gamma', 'epsilon', 'delta', 'alpha', 'beta']
>>> lst_2 = lst_1[:] # slice
>>> lst_1.sort()
>>> lst_2
['gamma', 'epsilon', 'delta', 'alpha', 'beta']
```

Alternatively, we can copy a list using the list constructor. The list constructor takes an iterable and iterates it, producing a new list with the yielded elements.

```python
>>> lst_1 = ['gamma', 'epsilon', 'delta', 'alpha', 'beta']
>>> lst_2 = list(lst_1) # using the list constructor
>>> lst_1.sort()
>>> lst_2
['gamma', 'epsilon', 'delta', 'alpha', 'beta']
```

Thus, there are three ways to copy a list:

- Using the `.copy()` method
- Slicing (lst_2 = lst_1[:])
- Using the list constructor (lst_2 = list(lst_1))

As a side note, the `.copy()` method calls the list constructor to create a new list."
"page_content='Finding an element within a sequence 201
10.7 Finding an element within a sequence
It should come as no surprise that if we have a sequence of objects,
we often wish to see if an element is in the sequence (list, tuple, or
string). Sometimes we also want to find theindex of the element within
a sequence. Python makes this relatively straightforward.
Checking to see if an element is in a sequence
Say we have the following list:
>>> fruits = ['kumquat', 'papaya', 'kiwi', 'lemon', 'lychee']
We can check to see if an element exists using the Python keywordin.
>>> 'kiwi' in fruits
True
>>> 'apple' in fruits
False
We can use the evaluation of such expressions in conditions:
>>> if 'apple' in fruits:
... print(""Let's bake a pie!"")
... else:
... print(""Oops. No apples."")
...
Oops. No apples.
or
>>> if 'kiwi' in fruits:
... print(""Let's bake kiwi tarts!"")
... else:
... print(""Oops. No kiwis."")
...
Let's bake kiwi tarts!
This works the same with numbers or with mixed-type lists.
>>> some_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]
>>> 5 in some_primes
True
>>> 4 in some_primes
False
or' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 215}","## Finding an Element within a Sequence

### Metadata

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 215

### Checking to see if an element is in a sequence

```python
>>> fruits = ['kumquat', 'papaya', 'kiwi', 'lemon', 'lychee']
>>> 'kiwi' in fruits
True
>>> 'apple' in fruits
False
```

### Using the evaluation of such expressions in conditions

```python
>>> if 'apple' in fruits:
... print(""Let's bake a pie!"")
... else:
... print(""Oops. No apples."")
...
Oops. No apples.

or

>>> if 'kiwi' in fruits:
... print(""Let's bake kiwi tarts!"")
... else:
... print(""Oops. No kiwis."")
...
Let's bake kiwi tarts!
```

### Works with numbers or mixed-type lists

```python
>>> some_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]
>>> 5 in some_primes
True
>>> 4 in some_primes
False
```"
"page_content='202 Sequences
>>> mixed = (42, True, 'tobacconist', 3.1415926)
>>> 42 in mixed
True
>>> -5 in mixed
False
We can also check to see if some substring is within a string.
>>> ""quick"" in ""The quick brown fox...""
True
So, we can see that the Python keywordin can come in very handy
in a variety of ways.
Getting the index of an element in a sequence
Sometimes we want to know the index of an element in a sequence.
For this we use.index() method. This method takes some value as an
argument and returns the index of the first occurrence of that element
in the sequence (if found).
>>> fruits = ['kumquat', 'papaya', 'kiwi', 'lemon', 'lychee']
>>> fruits.index('lychee')
4
However, this one can bite. If the element isnot in the list, Python will
raise a ValueError exception.
>>> fruits.index('frog')
Traceback (most recent call last):
File ""/Library/Frameworks/.../code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
ValueError: 'frog' is not in list
This is rather inconvenient, since if this were to occur when running your
program, it would crash your program! Yikes! So what can be done?
Later on in this textbook we’ll learn aboutexception handling , but for
now, here’s a different solution: just check to see if the element is in the
list (or other sequence) first by using anif statement, andthen get the
index if it is indeed in the list.
>>> if 'frog' in fruits:
... print(f""The index of frog in fruits is ""
... f""{fruits.index('frog')}"")
... else:
... print(""'frog' is not among the elements in the list!"")
This way you can avoidValueError.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 216}","## Metadata

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 216

## Sequence Operations

### Membership Testing

```python
>>> mixed = (42, True, 'tobacconist', 3.1415926)
>>> 42 in mixed
True
>>> -5 in mixed
False
```

We can also check for substring membership in a string.

```python
>>> ""quick"" in ""The quick brown fox...""
True
```

### Element Indexing

To obtain an element's index within a sequence, use the `.index()` method.

```python
>>> fruits = ['kumquat', 'papaya', 'kiwi', 'lemon', 'lychee']
>>> fruits.index('lychee')
4
```

**Caution:** If the element is not found, a `ValueError` will be raised.

```python
>>> fruits.index('frog')
Traceback (most recent call last):
File ""/Library/Frameworks/.../code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
ValueError: 'frog' is not in list
```

To avoid this, check for element presence before indexing.

```python
>>> if 'frog' in fruits:
... print(f""The index of frog in fruits is ""
... f""{fruits.index('frog')}"")
... else:
... print(""'frog' is not among the elements in the list!"")
```"
"page_content='Sequence unpacking 203
10.8 Sequence unpacking
Python provides us with an elegant syntax for unpacking the individual
elements of a sequence as separate variables. We call thisunpacking.
>>> x, y = (3.945, 7.002)
>>> x
3.945
>>> y
7.002
Here, each element in the tuple on the right-hand side is assigned to a
matching variable on the left-hand side.
>>> x = (2,)
>>> x
2
>>> x, y, z = ('a', 'b', 'c')
>>> x
'a'
>>> y
'b'
>>> z
'c'
This works with tuples of any size!
a, b, c, d, e = ('Hello', 5, [1, 2, 3], 'Chocolate', 2022)
However, the number of variables on the left-hand side must match the
number of elements in the tuple on the right-hand side. If they don’t
match, we get an error, eitherValueError: too many values to unpack
or ValueError: not enough values to unpack.
Tuple unpacking is particularly useful by:
• allowing for more concise and readable code by assigning multiple
values to variables on a single line,
• allowing for multiple values to be returned by a function,
• making it easier to swap variable values (more on this shortly).
Can we unpack lists too?
Yup. We can unpack lists the same way.
x, y = [1, 2]
But this isn’t used as much as tuple unpacking. Can you think why this
may be so?
The reason is that lists are dynamic, and we may not know at runtime
how many elements we have to unpack. This scenario occurs less often' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 217}","**10.8 Sequence Unpacking**

**Metadata:**
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 217

**Content:**

### Sequence Unpacking

Python provides a syntax for unpacking the individual elements of a sequence as separate variables, known as unpacking.

**Unpacking Tuples:**

```python
>>> x, y = (3.945, 7.002)
>>> x
3.945
>>> y
7.002
```

Each element in the tuple on the right-hand side is assigned to a matching variable on the left-hand side.

**Unpacking Lists:**

```python
x, y = [1, 2]
```

This is less common than tuple unpacking because lists are dynamic, making it difficult to determine the number of elements to unpack at runtime.

**Advantages of Sequence Unpacking:**

* Improved code readability and conciseness by assigning multiple values to variables on a single line.
* Function can return multiple values.
* Facilitates swapping of variable values.

**Table of Differences between Tuple and List Unpacking:**

| Feature | Tuple Unpacking | List Unpacking |
|---|---|---|
| Usefulness | More commonly used | Less commonly used |
| Dynamic nature | Statically sized | Dynamically sized |
| Runtime considerations | Less likely to require runtime calculations | More likely to require runtime calculations |"
"page_content='204 Sequences
with tuples, since they are immutable, and once created, we know how
many elements they have.
What if we want to unpack but we don’t care about
certain elements in the sequence?
Let’s say we want the convenience of sequence unpacking, but on the
right-hand side we have a tuple or a function which returns a tuple, and
we don’t care about some element in the tuple. In cases like this, we
often use the variable name_ to signify “I don’t really care about this
value”.
Examples:
>>> _, lon = (44.318393, -72.885126) # don't care about latitude
or
>>> lat, _ = (44.318393, -72.885126) # don't care about longitude
This makes it clear visually that we’re only concerned with a specific
value, and is preferred over names liketemp, foo, junk or whatever.
Occasionally, you may see code where two elements of an unpacked
sequence are ignored. In these cases, it’s not unusual to see both_ and
__ used as variable names to signify “I don’t care.”
Examples:
>>> _, lon, __ = (44.318393, -72.885126, 1244.498)
or
>>> lat, _, __ = (44.318393 -72.8851266, 1244.498)
or
>>> _, __, elevation = (44.318393, -72.8851266, 1244.498)
It is possible also to reuse_. For example, this works just fine:
>>> _, _, elevation = (44.318393, -72.8851266, 1244.498)
In this instance, Python unpacks the first element of the tuple to_, then
it unpacks the second element of the tuple to_, and then it unpacks the
third element to the variableelevation.
If you were to inspect the value of_ after executing the line above,
you’d see it holds the value−72.8851266.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 218}","**Metadata**

* Page Number: 218
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Section: Unpacking Sequences**

**Subsection: Ignoring Elements in a Sequence**

**Content**

In Python, it is possible to unpack sequences into variables. However, what if we don't care about certain elements in the sequence? In these cases, we can use the variable name_ to signify ""I don't really care about this value.""

**Examples:**

* To ignore the latitude:
```
lat, _ = (44.318393, -72.885126)
```

* To ignore the longitude:
```
_, lon = (44.318393, -72.885126)
```

Occasionally, we may want to ignore multiple elements in the sequence. In these cases, we can use both _ and __ as variable names.

**Examples:**

* To ignore the second and third elements:
```
_, __, elevation = (44.318393, -72.885126, 1244.498)
```

* To ignore the first and third elements:
```
lat, _, __ = (44.318393, -72.885126, 1244.498)
```

It is important to note that the order of the _ and __ variables matters. For example, the following code will not work:

```
__, _, elevation = (44.318393, -72.885126, 1244.498)
```

This is because Python will unpack the first element to __, the second element to _, and the third element to elevation. This will result in an error because __ will hold the latitude, which is not the data we want to assign to elevation.

It is also possible to reuse the _ variable. For example:

```
_, _, elevation = (44.318393, -72.885126, 1244.498)
```

In this case, _ will hold the latitude, the second _ will hold the longitude, and elevation will hold the elevation."
"page_content='Strings are sequences 205
Swapping variables with tuple unpacking
In many languages, swapping variables requires a temporary variable.
Let’s say we wanted to swap the values of variablesa and b. In most
languages we’d need to do something like this:
int a = 1
int b = 2
// now swap
int temp = a
a = b
b = temp
This is unnecessary in Python.
a = 1
b = 2
# now swap
b, a = a, b
That’s a fun trick, eh?
10.9 Strings are sequences
We’ve already seen another sequence type: strings. Strings are nothing
morethanimmutablesequencesofcharacters(moreaccuratelysequences
of Unicode code points). Since a string is a sequence, we can use index
notation to read individual characters from a string. For example:
>>> word = ""omphaloskepsis"" # which means ""navel gazing""
>>> word[0]
'o'
>>> word[-1]
's'
>>> word[2]
'p'
We can usein to check whether a substring is within a string. A substring
is one or more contiguous characters within a string.
>>> word = ""omphaloskepsis""
>>> ""k"" in word
True
>>> ""halo"" in word
True
>>> ""chicken"" in word
False' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 219}","**Metadata**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 219

**Content**

**10.9 Strings are sequences**

**Swapping variables with tuple unpacking**

In many languages, swapping variables requires a temporary variable.

Example:

```python
int a = 1
int b = 2
// now swap
int temp = a
a = b
b = temp
```

This is unnecessary in Python.

Example:

```python
a = 1
b = 2
# now swap
b, a = a, b
```

**Strings are sequences**

Strings are immutable sequences of characters (more accurately, sequences of Unicode code points). Since a string is a sequence, we can use index notation to read individual characters from a string.

Examples:

```python
>>> word = ""omphaloskepsis"" # which means ""navel gazing""
>>> word[0]
'o'
>>> word[-1]
's'
>>> word[2]
'p'
```

We can use `in` to check whether a substring is within a string. A substring is one or more contiguous characters within a string.

Examples:

```python
>>> word = ""omphaloskepsis""
>>> ""k"" in word
True
>>> ""halo"" in word
True
>>> ""chicken"" in word
False
```"
"page_content='206 Sequences
We can usemin() and max() with strings. When we do, Python will
compare characters (Unicode code points) within the string. In the case
of min(), Python will return the character with the lowest-valued code
point. In the case ofmax(), Python will return the character with the
highest-valued code point.
We can also uselen() with strings. This returns the length of the
string.
>>> word = ""omphaloskepsis""
>>> max(word)
's'
>>> min(word)
'a'
>>> len(word)
14
Recall that Unicode includes thousands of characters, so these work with
more than just letters in the English alphabet.
Comprehension check
1. What is returned bymax('headroom')?
2. What is returned bymin('frequency')?
3. What is returned bylen('toast')?
10.10 Sequences: a quick reference guide
Mutability and immutability
Type Mutable Indexed read Indexed write
list yes yes yes
tuple no yes no
str no yes no
Built-ins
Type len() sum() min() and max()
list yes yes (if numeric) yes, with some restrictions
tuple yes yes (if numeric) yes, with some restrictions
str yes no yes' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 220}","---
## Sequences

### Comparing and measuring strings

We can use `min()` and `max()` with strings. When we do, Python will compare characters (Unicode code points) within the string. In the case of `min()`, Python will return the character with the lowest-valued code point. In the case of `max()`, Python will return the character with the highest-valued code point.

We can also use `len()` with strings. This returns the length of the string.

```python
>>> word = ""omphaloskepsis""
>>> max(word)
's'
>>> min(word)
'a'
>>> len(word)
14
```

Recall that Unicode includes thousands of characters, so these work with more than just letters in the English alphabet.

### Comprehension check

1. What is returned by `max('headroom')`?
2. What is returned by `min('frequency')`?
3. What is returned by `len('toast')`?

## Sequences: a quick reference guide

### Mutability and immutability

| Type | Mutable | Indexed read | Indexed write |
| ----------- | ----------- | ----------- | ----------- |
| list | yes | yes | yes |
| tuple | no | yes | no |
| str | no | yes | no |

### Built-ins

| Type | len() | sum() | min() and max() |
| ----------- | ----------- | ----------- | ----------- |
| list | yes | yes (if numeric) | yes, with some restrictions |
| tuple | yes | yes (if numeric) | yes, with some restrictions |
| str | yes | no | yes |
---"
"page_content='Slicing 207
Methods
Type .sort(), .append(), and.pop() .index()
list yes yes
tuple no yes
str no yes
• If an object ismutable, then the object can be modified.
• Indexed read:m[i] where m is a list or tuple, andi is a valid index
into the list or tuple.
• Indexed write:m[i] on left-hand side of assignment.
• Python built-inlen() works the same for lists and tuples.
• Python built-inssum(), min(), andmax() behave the same for lists
and tuples.
• For sum() to workm must contain only numeric types (int, float)
or Booleans. So, for example,sum([1, 1.0, True]) yields three. We
cannot sum over strings.
• min() and max() work so long as the elements of the list or tuple
are comparable—meaning that>, >=, <, <=, == can be applied to any
pair of list elements. We cannot compare numerics and strings, but
we can compare numerics with numerics and strings with strings.
• Wecantestwhetheravalueisinalistortuplewith in.Forexample
'cheese' in m returns a Boolean.
• m.sort(), m.append(), and m.pop() work for lists only. Tuples are
immutable. Note that these change the listin place.
• We cannot apply m.sort() if the list or tuple contains elements
which are not comparable.
• We must supply an argument tom.append() (we have to append
something).
• m.pop() without argument pops the last element from a list.
• m.pop(i) where i is a valid index intom pops the element at index
i from the list.
• We cannot pop from an empty list (IndexError).
• m.index(x) will return the index of the first occurrence ofx in m.
Note: This will raiseValueError if x is not inm.
10.11 Slicing
Python supports a powerful means for extracting data from a sequence
(string, list or tuple) calledslicing.
Basic slicing
We can take a slice through some sequence by specifying a range of
indices.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 221}","## Methods

### Type

| Method | List | Tuple | String |
|---|---|---|---|
| .sort() | Yes | No | No |
| .append() | Yes | No | No |
| .pop() | Yes | No | No |
| .index() | Yes | No | No |

### Mutability

* An **immutable** object cannot be modified.
* An **mutable** object can be modified.

### Indexed Read and Write

* **Indexed read:** `m[i]` where `m` is a list or tuple, and `i` is a valid index into the list or tuple.
* **Indexed write:** `m[i]` on the left-hand side of an assignment.

### Python Built-in Functions

* `len()` works the same for lists and tuples.
* `sum()`, `min()`, and `max()` behave the same for lists and tuples.

**Note for `sum()`:** `m` must contain only numeric types (int, float) or Booleans.

**Note for `min()` and `max()`:** Elements of `m` must be comparable (i.e., `>`, `>=`, `<`, `<=`, `==` can be applied to any pair of list elements).

* We cannot compare numerics and strings, but we can compare numerics with numerics and strings with strings.

### Membership Testing

We can test whether a value is in a list or tuple with `in`. For example:
```python
'cheese' in m
```
returns a Boolean.

### List-Specific Methods

* `m.sort()`, `m.append()`, and `m.pop()` work for lists only. Tuples are immutable.
* `m.sort()` changes the list in place.
* We cannot apply `m.sort()` if the list or tuple contains elements which are not comparable.

### `m.append()`

* We must supply an argument to `m.append()` (we have to append something).

### `m.pop()`

* `m.pop()` without argument pops the last element from a list.
* `m.pop(i)` pops the element at index `i` from the list.

**Note:** We cannot pop from an empty list (IndexError).

### `m.index()`

* `m.index(x)` returns the index of the first occurrence of `x` in `m`.
* Raises `ValueError` if `x` is not in `m`.

## Slicing

Python supports **slicing**, a powerful means for extracting data from a sequence (string, list or tuple).

### Basic Slicing

We can take a slice through a sequence by specifying a range of indices: `s[startIndex:stopIndex]`.

* If `startIndex` is omitted, it is assumed to be 0.
* If `stopIndex` is omitted, it is assumed to be the length of the sequence."
"page_content='208 Sequences
>>> un_security_council = ['China', 'France', 'Russia', 'UK',
... 'USA', 'Albania', 'Brazil', 'Gabon',
... 'Ghana', 'UAE', 'India', 'Ireland',
... 'Kenya', 'Mexico', 'Norway']
Let’s say we just wanted the permanent members of the UN Secu-
rity Council (these are the first five in the list). Instead of providing a
single index within brackets, we provide a range of indices, in the form
<sequence>[<start>:<end>].
>>> un_security_council[0:5]
['China', 'France', 'Russia', 'UK', 'USA']
“Hey! Wait a minute!” you say, “We provided a range ofsix indices! Why
doesn’t this include ‘Albania’ too?”
Reasonable question. Python treats the ending index as its stopping
point, so it slices from index 0 to index 5but not including the element
at index 5! This is the Python way, as you’ll see with other examples
soon. It does take a little getting used to, but when you see this kind of
indexing at work elsewhere, you’ll understand the rationale.
What if we wanted the non-permanent members whose term ends in
2023? That’s Albania, Brazil, Gabon, Ghana, and UAE.
To get that slice we’d use
>>> un_security_council[5:10]
['Albania', 'Brazil', 'Gabon', 'Ghana', 'UAE']
Again, Python doesn’t return the item at index 10; it just goes up to
index 10 and stops.
Some shortcuts
Python allows a few shortcuts. For example, we can leave out the starting
index, and Python reads from the start of the list (or tuple).
>>> un_security_council[:10]
['China', 'France', 'Russia', 'UK', 'USA',
'Albania', 'Brazil', 'Gabon', 'Ghana', 'UAE']
By the same token, if we leave out the ending index, then Python will
read to the end of the list (or tuple).
>>> un_security_council[10:]
['India', 'Ireland', 'Kenya', 'Mexico', 'Norway']
Now you should be able to guess what happens if we leave out both start
and end indices.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 222}","# Metadata
```python
metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 222}

# Content
## Sequences
Let's say we wanted just the permanent members of the UN Security Council (these are the first five in the list). Instead of providing a single index within brackets, we provide a range of indices, in the form `<sequence>[<start>:<end>]`.

```python
un_security_council[0:5]
```
```python
['China', 'France', 'Russia', 'UK', 'USA']
```
""Hey! Wait a minute!"" you say, ""We provided a range of six indices! Why doesn't this include ‘Albania’ too?""

Reasonable question. Python treats the ending index as its stopping point, so it slices from index 0 to index 5 but not including the element at index 5! This is the Python way, as you'll see with other examples soon. It does take a little getting used to, but when you see this kind of indexing at work elsewhere, you'll understand the rationale.

What if we wanted the non-permanent members whose term ends in 2023? That's Albania, Brazil, Gabon, Ghana, and UAE.

To get that slice, we’d use

```python
un_security_council[5:10]
```
```
['Albania', 'Brazil', 'Gabon', 'Ghana', 'UAE']
```
Again, Python doesn't return the item at index 10; it just goes up to index 10 and stops.

## Some shortcuts
Python allows a few shortcuts. For example, we can leave out the starting index, and Python reads from the start of the list (or tuple).

```python
un_security_council[:10]
```
```
['China', 'France', 'Russia', 'UK', 'USA',
'Albania', 'Brazil', 'Gabon', 'Ghana', 'UAE']
```
By the same token, if we leave out the ending index, then Python will read to the end of the list (or tuple).

```python
un_security_council[10:]
```
```
['India', 'Ireland', 'Kenya', 'Mexico', 'Norway']
```
Now, you should be able to guess what happens if we leave out both start and end indices."
"page_content='Slicing 209
>>> un_security_council[:]
['China', 'France', 'Russia', 'UK', 'USA',
'Albania', 'Brazil', 'Gabon', 'Ghana', 'UAE',
'India', 'Ireland', 'Kenya', 'Mexico', 'Norway']
We get a copy of the entire list (or tuple)!
Guess what these do:
• un_security_council[-1:]
• un_security_council[:-1]
• un_security_council[5:0]
• un_security_council[5:-1]
Specifying the stride
Imagine you’re on a stepping-stone path through a garden. You might
be able to step one stone at a time. You might be able to step two stones
at a time—skipping over every other stone. If you have long legs, or the
stones are very close together, you might be able to step three stones at
a time! We call thisstep size or stride.
In Python, when specifying slices we can specify the stride as a third
parameter. This comes in handy if we only want values at odd indices or
at even indices.
The syntax is<sequence>[<start>:<stop>:<stride>].
Here are some examples:
>>> un_security_council[::2] # only even indices
['China', 'Russia', 'USA', 'Brazil', 'Ghana',
'India', 'Kenya', 'Norway']
>>> un_security_council[1::2] # only odd indices
['France', 'UK', 'Albania', 'Gabon', 'UAE',
'Ireland', 'Mexico']
What happens if the stride is greater than the number of elements in the
sequence?
>>> un_security_council[::1000]
['China']
Can we step backward? Sure!
>>> un_security_council[-1::-1]
['Norway', 'Mexico', 'Kenya', 'Ireland', 'India',
'UAE', 'Ghana', 'Gabon', 'Brazil', 'Albania',
'USA', 'UK', 'Russia', 'France', 'China']
Now you know one way to get the reverse of a sequence. Can you think
of some use cases for changing the stride?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 223}","## Slicing 

### Retrieving Partial Lists

```python
>>> un_security_council[:]
['China', 'France', 'Russia', 'UK', 'USA',
'Albania', 'Brazil', 'Gabon', 'Ghana', 'UAE',
'India', 'Ireland', 'Kenya', 'Mexico', 'Norway']
```

**Explanation:**
This retrieves a copy of the entire list (or tuple) from un_security_council.

### Specifying Indices

- `un_security_council[-1:]` - Retrieves the last element of the list.
- `un_security_council[:-1]` - Retrieves all elements except the last element.
- `un_security_council[5:0]` - Retrieves an empty list since the start index (5) is greater than the stop index (0).
- `un_security_council[5:-1]` - Retrieves all elements from index 5 (inclusive) to the last element (exclusive).

### Specifying Stride

**Syntax:**
```
<sequence>[<start>:<stop>:<stride>]
```

**Examples:**
- `un_security_council[::2]` - Retrieves every second element (starting from index 0).
- `un_security_council[1::2]` - Retrieves every second element (starting from index 1).

**Strides Greater than Sequence Length:**
If the stride is greater than the number of elements in the sequence, only the first element is retrieved.

```python
>>> un_security_council[::1000]
['China']
```

**Stepping Backward:**
It is possible to step backward through a sequence by using a negative stride.

```python
>>> un_security_council[-1::-1]
['Norway', 'Mexico', 'Kenya', 'Ireland', 'India',
'UAE', 'Ghana', 'Gabon', 'Brazil', 'Albania',
'USA', 'UK', 'Russia', 'France', 'China']
```"
"page_content='210 Sequences
10.12 Passing mutables to functions
You’ll recall that as an argument is passed to a function it isassigned
to the corresponding formal parameter. This, combined with mutability,
can sometimes cause confusion.7
Mutable and immutable arguments to a function
Here’s an example where some confusion often arises.
>>> def foo(lst):
... lst.append('Waffles')
...
>>> breakfasts = ['Oatmeal', 'Eggs', 'Pancakes']
>>> foo(breakfasts)
>>> breakfasts
['Oatmeal', 'Eggs', 'Pancakes', 'Waffles']
Some interpret this behavior incorrectly, assuming that Python must
handle immutable and mutable arguments differently! This isnot correct.
Python passes mutable and immutable arguments the same way. The
argument is assigned to the formal parameter.
The result of this example is only a little different than if we’d done
this:
>>> breakfasts = ['Oatmeal', 'Eggs', 'Pancakes']
>>> lst = breakfasts
>>> lst.append('Waffles')
>>> breakfasts
['Oatmeal', 'Eggs', 'Pancakes', 'Waffles']
All we’ve done is give two differentnames to the same list, by assign-
ment. In the example with the functionfoo (above) the only difference is
that the namelst exists only within the scope of the function. Otherwise,
these two examples behave the same.
Notice that there is no “reference” being passed, just an assignment
taking place.
Names have scope, values do not
This example draws out another point. To quote Python guru Ned
Batchelder:
Names have scope but no type. Values have type but no scope.
7 If you search on the internet you may find sources that say that immutable
object are passed by value and mutable objects are passed by reference in Python.
This is not correct! Python always passes by assignment—no exceptions. This is
different from many other languages (for example, C, C++, Java). If you haven’t
heard these terms before, just ignore them.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 224}","**Formatting Instructions**

**Content Structuring:**

- **Identify key sections and organize them under appropriate headings and subheadings.**

- **Ensure logical flow and clarity in the content.**

**Metadata Inclusion:**

- **Include all metadata such as page numbers, line numbers, and source names as provided.**

- **Clearly indicate the metadata at the beginning or in relevant sections.**

**Code Formatting:**

- **If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.**

- **Mention the programming language before the triple backticks.**

**Examples:**

- **Include examples clearly if provided.**

**Content:**

**10.12 Passing Mutables to Functions**

**Mutable and Immutable Arguments to a Function**

**Functions and Scope**

**Example:**

```python
def foo(lst):
    lst.append('Waffles')

breakfasts = ['Oatmeal', 'Eggs', 'Pancakes']
foo(breakfasts)
print(breakfasts)
```

**Output:**

```
['Oatmeal', 'Eggs', 'Pancakes', 'Waffles']
```

**Names and Values**

""Names have scope but no type. Values have type but no scope."" - Ned Batchelder

**Metadata:**

{'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 224}"
"page_content='Passing mutables to functions 211
What do we mean by that? Well, in the case where we pass the list
breakfast to the functionfoo, we create a new name forbreakfast, lst.
This name,lst, exists only within the scope of the function, but the value
persists. Since we’ve given this list another name,breakfast, which exists
outside the scope of the function we can still access this list once the
function call has returned, even though the namelst no longer exists.
Here’s another demonstration which may help make this more clear.
>>> def foo(lst):
... lst.append('Waffles')
... print(lst)
...
>>> foo(['Oatmeal', 'Eggs', 'Pancakes'])
['Oatmeal', 'Eggs', 'Pancakes', 'Waffles']
However, now we can no longer use the namelst since it exists only
within the scope of the function.
>>> lst
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'lst' is not defined. Did you mean: 'list'?
Where did the list go?
Whenanobjectnolongerhasanamethatreferstoit,Pythonwilldestroy
the object in a process calledgarbage col lection. We won’t cover garbage
collection in detail. Let it suﬀice to understand that once an object no
longer has a name that refers to it, it will be subject togarbage col lection,
and thus inaccessible.
So in the previous example, where we passed a list literal to the func-
tion, the only time the list had a name was during the execution of the
function. Again, the formal parameter islst, and the argument (in this
last example) is the literal['Oatmeal', 'Eggs', 'Pancakes']. The assign-
ment that took place when the function was called waslst = ['Oatmeal',
'Eggs', 'Pancakes']. Then we appended'Waffles', printed the list, and
returned.
Poof! lst is gone.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 225}","**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 225

## Passing Mutables to Functions

### What Does it Mean?

When passing a mutable object (e.g., a list) to a function, a new name is created for the object within the function's scope. However, the value of the object persists outside the function's scope.

### Example: Modifying a List Passed to a Function

```
>>> def foo(lst):
...     lst.append('Waffles')
...     print(lst)
...

>>> foo(['Oatmeal', 'Eggs', 'Pancakes'])
['Oatmeal', 'Eggs', 'Pancakes', 'Waffles']
```

**Explanation:**

* The function `foo` receives the list `lst`, which is a new name for the list passed as an argument (['Oatmeal', 'Eggs', 'Pancakes']).
* The modifications made to `lst` within `foo` (appending 'Waffles') also affect the original list.
* However, the name `lst` is only valid within `foo`.

### Consequences of Losing the Name

* Once the function returns, the name used within the function no longer exists.
* If there are no other references to the object, it will be garbage collected.

### Example: Garbage Collection

Consider the following code:

```
>>> def foo(lst):
...     lst.append('Waffles')
...     print(lst)
...

>>> foo(['Oatmeal', 'Eggs', 'Pancakes'])
['Oatmeal', 'Eggs', 'Pancakes', 'Waffles']

>>> lst
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'lst' is not defined. Did you mean: 'list'?
```

**Explanation:**

* After the function returns, the name `lst` is no longer valid.
* Since there are no other references to the modified list, it is garbage collected and becomes inaccessible."
"page_content='212 Sequences
10.13 Exceptions
IndexError
When dealing with sequences, you may encounterIndexError. This ex-
ception is raised when an integer is supplied as an index, but there is no
element at that index.
>>> lst = ['j', 'a', 's', 'p', 'e', 'r']
>>> lst[6]
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
IndexError: list index out of range
Notice that the error message explicitly states “list index out of range”.
In the example above, we have a list of six elements, so valid indices range
up to five. There is no element at index six, so if we attempt to access
lst[6], anIndexError is raised.
TypeError
Again, when dealing with sequences, you may encounterTypeError in
a new context. This occurs if you try to use something other than an
integer (or slice) as an index.
>>> lst[1.0]
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: list indices must be integers or slices, not float
>>> lst['cheese']
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: list indices must be integers or slices, not str
>>> lst[None]
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: list indices must be integers or slices, not NoneType
Notice that the error message explicitly states that “list indices must
be integers or slices” and in each case, it identifies the offending type
that was actually supplied.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 226}","## 10.13 Exceptions

### IndexError

When dealing with sequences, you may encounter `IndexError`. This exception is raised when an integer is supplied as an index, but there is no element at that index.

```python
>>> lst = ['j', 'a', 's', 'p', 'e', 'r']
>>> lst[6]
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
IndexError: list index out of range
```

Notice that the error message explicitly states “list index out of range”.

In the example above, we have a list of six elements, so valid indices range up to five. There is no element at index six, so if we attempt to access `lst[6]`, an `IndexError` is raised.

### TypeError

Again, when dealing with sequences, you may encounter `TypeError` in a new context. This occurs if you try to use something other than an integer (or slice) as an index.

```python
>>> lst[1.0]
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: list indices must be integers or slices, not float
>>> lst['cheese']
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: list indices must be integers or slices, not str
>>> lst[None]
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: list indices must be integers or slices, not NoneType
```

Notice that the error message explicitly states that “list indices must be integers or slices” and in each case, it identifies the offending type that was actually supplied."
"page_content='Exercises 213
10.14 Exercises
Where appropriate, guess first, then check your guess in the Python shell.
Exercise 01
Given the following list,
>>> mammals = ['cheetah', 'aardvark', 'bat', 'dikdik', 'ermine']
write the indices that correspond to:
a. aardvark
b. bat
c. cheetah
d. dikdik
e. ermine
Give an example of an index,n, that would result in an IndexError if we
were to use it in the expressionmammals[n].
Exercise 02
Given the following tuple
>>> elements = (None, 'hydrogen', 'helium', 'lithium',
... 'beryllium', 'boron', 'carbon',
... 'nitrogen', 'oxygen')
write the indices that correspond to
a. beryllium
b. boron
c. carbon
d. helium
e. hydrogen
f. lithium
g. nitrogen
h. oxygen
(Extra: If you’ve had a course in chemistry, why do you think the first
element in the tuple isNone?)
Exercise 03
Given the polynomial4𝑥3 + 2𝑥2 + 5𝑥 − 4, write the coeﬀicients as a tuple
and name the resultcoefficients. Use an assignment.
a. What is the value oflen(coefficients)?
b. What is the value ofcoefficients[2]?
c. Did you write the coeﬀicients in ascending or descending order?
Why did you make that choice?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 227}","## Exercises 213

### Exercise 01

Given the following list,
```
>>> mammals = ['cheetah', 'aardvark', 'bat', 'dikdik', 'ermine']
```
write the indices that correspond to:
a. aardvark
b. bat
c. cheetah
d. dikdik
e. ermine

Give an example of an index, n, that would result in an **IndexError** if we were to use it in the expression mammals[n].

#### Solutions

a. 1
b. 2
c. 0
d. 3
e. 4

An example index n that would result in an IndexError is 5.

### Exercise 02

Given the following tuple,
```
>>> elements = (None, 'hydrogen', 'helium', 'lithium',
... 'beryllium', 'boron', 'carbon',
... 'nitrogen', 'oxygen')
```
write the indices that correspond to

a. beryllium
b. boron
c. carbon
d. helium
e. hydrogen
f. lithium
g. nitrogen
h. oxygen

(Extra: If you’ve had a course in chemistry, why do you think the first element in the tuple is None?)

#### Solutions

a. 4
b. 5
c. 6
d. 1
e. 0
f. 3
g. 7
h. 8

The first element in the tuple is None because it serves as a placeholder for the atomic number (or proton number) of the element. Normally, the first element in the tuple would be **1** (corresponding to hydrogen's atomic number). However, Python indexing starts at **0**, so **None** is used instead to avoid confusion.

### Exercise 03

Given the polynomial 4x^3 + 2x^2 + 5x - 4, write the coefficients as a tuple and name the result coefficients. Use an assignment.

a. What is the value of len(coefficients)?
b. What is the value of coefficients[2]?
c. Did you write the coefficients in ascending or descending order? Why did you make that choice?

#### Solutions

```python
coefficients = (4, 2, 5, -4)
```

a. The value of len(coefficients) is **4**.
b. The value of coefficients[2] is **5**.
c. The coefficients were written in **descending order**, starting with the coefficient of the highest power of x. This is the most common convention for representing polynomial coefficients."
"page_content='214 Sequences
Exercise 04
Given the lists in exercises 1 and 2
>>> mammals = ['cheetah', 'aardvark', 'bat', 'dikdik', 'ermine']
>>> elements = (None, 'hydrogen', 'helium', 'lithium',
... 'beryllium', 'boron', 'carbon',
... 'nitrogen', 'oxygen')
what is the evaluation of the following expressions?
a. len(mammals) > len(elements)
b. elements[5] < mammals[2]
c. elements[-1]
Exercise 05
Write a function which, given any arbitrary list, returnsTrue if the list
has an even number of elements andFalse if the list has an odd number
of elements. Name your functionis_even_length().
Exercise 06
Given the following list
moons = ['Mimas', 'Enceladus', 'Tethys', 'Dione']
write one line of code which calls the function is_even_length() (see
Exercise 05) with moons as an argument and assigns the result to an
object namedn. What isn’s type?
Exercise 07
Giventhefollowinglist,whichcontainsdataaboutsomemoonsofSaturn
and their diameters (in km),
moons = [('Mimas', 396.4), ('Enceladus', 504.2),
('Tethys', 1062.2), ('Dione', 1122.8)]
a. If we were to perform the assignmentm = moons[0], what wouldm’s
type be?
b. How would we get the name of the moon fromm?
c. How would we get the diameter of the moon fromm?
d. Write a single line of code which calculates the average diame-
ter of these moons, and assigns the result to an object named
avg_diameter. (No, you do not need a loop.)
e. Write one line of code which adds Iapetus to the list, using the
same structure. The diameter of Iapetus is 1468.6 (km).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 228}","### Formatting Instructions:

**1. Content Structuring:**  
 - Identify key sections and organize them under appropriate headings and subheadings.
 - Ensure logical flow and clarity in the content.

**2. Metadata Inclusion:**  
 - Include all metadata such as page numbers, line numbers, and source names as provided.
 - Clearly indicate the metadata at the beginning or in relevant sections.

**3. Code Formatting:**  
 - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
 - Mention the programming language before the triple backticks.

**4. Provide differences in tabular format if possible.**

**5. Include examples clearly if provided.**

**6. Do not generate any content yourself; just format the provided content.**

**7. Do not modify the content in any way, including its length.**

**Metadata:**

- **Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- **Page:** 228

### 214 Sequences

**Exercise 04**

Given the lists in exercises 1 and 2
```python
>>> mammals = ['cheetah', 'aardvark', 'bat', 'dikdik', 'ermine']
>>> elements = (None, 'hydrogen', 'helium', 'lithium',
... 'beryllium', 'boron', 'carbon',
... 'nitrogen', 'oxygen')
```
what is the evaluation of the following expressions?
a. len(mammals) > len(elements)
b. elements[5] < mammals[2]
c. elements[-1]

**Exercise 05**

Write a function which, given any arbitrary list, returns True if the list has an even number of elements and False if the list has an odd number of elements. Name your function is_even_length().

**Exercise 06**

Given the following list
```python
moons = ['Mimas', 'Enceladus', 'Tethys', 'Dione']
```
write one line of code which calls the function is_even_length() (see Exercise 05) with moons as an argument and assigns the result to an object named n. What is n’s type?

**Exercise 07**

Given the following list, which contains data about some moons of Saturn and their diameters (in km),
```python
moons = [('Mimas', 396.4), ('Enceladus', 504.2),
('Tethys', 1062.2), ('Dione', 1122.8)]
```
a. If we were to perform the assignment m = moons[0], what would m’s type be?
b. How would we get the name of the moon from m?
c. How would we get the diameter of the moon from m?
d. Write a single line of code which calculates the average diameter of these moons and assigns the result to an object named avg_diameter. (No, you do not need a loop.)
e. Write one line of code which adds Iapetus to the list, using the same structure. The diameter of Iapetus is 1468.6 (km)."
"page_content='Exercises 215
f. In one line of code, write an expression which returns the diameter
of Enceladus, and assigns the result to an object nameddiameter.
g. What is the evaluation of the expression moons[0][0] <
moons[1][0]?
Exercise 08
Given the following
>>> countries = ['Ethiopia', 'Benin', 'Ghana', 'Angola',
... 'Cameroon', 'Kenya']
>>> countries.append('Nigeria')
>>> countries.sort()
>>> countries.pop()
>>> country = countries[2]
answer the following questions:
a. What is the value oflen(countries)?
b. What is the resulting value ofcountry?
c. What is the evaluation oflen(countries[3])
Exercise 09
There are three ways to make a copy of a list:
lst_2 = lst_1.copy() # using the copy() method
lst_2 = lst_1[:] # slice encompasses entire list
lst_2 = list(lst_1) # using the list() constructor
Write a function that takes a list as an argument, makes a copy of the
list, modifies the list, andreturns the modified copy. How you modify the
list is up to you, but you should use at least two different list methods.
Demonstrate that when you call this function with a list variable as
an argument, that the function returns a modified copy, and that the
original list is unchanged.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 229}","**Exercises**

**Exercise 07**

**f. Diameter of Enceladus**

```python
diameter = moons[0][1]
```

**g. Comparison of Moon Diameters**

```python
moons[0][0] < moons[1][0]
```

Evaluation: False

**Exercise 08**

**a. Length of `countries` List**

```python
len(countries)
```

Result: 6

**b. Value of `country` Variable**

```python
country
```

Result: Ghana

**c. Length of `countries[3]`**

```python
len(countries[3])
```

Result: 6

**Exercise 09**

**Function to Create and Modify a List Copy**

```python
def modify_list_copy(lst):
    # Create a copy of the list using the copy() method
    new_lst = lst.copy()

    # Modify the copy
    new_lst.append(""New Item"")
    new_lst.sort()

    # Return the modified copy
    return new_lst
```

**Demonstration:**

```python
original_lst = [1, 2, 3]

# Call the function to modify a copy of the list
modified_lst = modify_list_copy(original_lst)

# Print the original and modified lists
print(""Original List:"", original_lst)
print(""Modified Copy:"", modified_lst)
```

Output:

```
Original List: [1, 2, 3]
Modified Copy: [1, 2, 3, 'New Item']
```"
"page_content='Chapter 11
Loops and iteration
In this chapter, we introduceloops. With loops, we can automate repeti-
tive tasks or calculations. Why are they called loops? Well, so far we’ve
seen code which (apart from function calls) progresses in a linear fashion
from beginning to end (even if there are branches, we still proceed in a
linear fashion). Loops change the shape of the execution of our code in
a very interesting and powerful way. They loop!
Looping allows portions of our code to execute repeatedly—either for
a fixed number of times or while some condition holds—before moving
on to execute the rest of our code.
Python provides us with two types of loop:for loops andwhile loops.
for loops work by iterating over some iterable object, be it a list, a tuple,
a range, or even a string.while loops continue as long as some condition
is true.
With variables, functions, branching, and loops, we have all the tools
we need to create powerful programs. All the rest, as they say, is gravy.
Learning objectives
• You will learn how to usefor loops andwhile loops.
217' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 231}","## Chapter 11: Loops and Iteration

### Metadata

- Page Number: 231
- Source: `C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf`

### Introduction

This chapter introduces the concept of loops, which enable automation of repetitive tasks or calculations.

### Types of Loops

Python offers two types of loops:

**1. For Loops**
   - Iterate over an iterable object (e.g., list, tuple, range, string)

**2. While Loops**
   - Execute repeatedly while a specified condition remains true

### Usage of Loops

Loops allow code to execute repeatedly until a specific condition is met or a fixed number of iterations has been reached. By incorporating variables, functions, branching, and loops, programmers possess the necessary tools for creating robust and powerful applications.

### Learning Objectives

Upon completing this chapter, readers will gain proficiency in utilizing both for loops and while loops."
"page_content='218 Loops and iteration
• You will learn how to iterate over sequences.
• You will learn how to define and use conditions which govern a
while loop.
• You will learn how to choose which type of loop is best for a par-
ticular problem.
T erms, Python keywords, built-in functions, and types
introduced
• accumulator
• alternating sum
• arithmetic sequence
• break
• enumerate() (built-in) andenumerate (type)
• Fibonacci sequence
• for
• iterable
• iterate
• loop
• nested loop
• range() (built-in) andrange (type)
• stride
• summation
• while
11.1 Loops: an introduction
It is very often the case that we want to perform a repetitive task, or
perform some calculation that involves a repetition of a step or steps.
This is where computers really shine. Humans don’t much enjoy repeti-
tive tasks. Computers couldn’t care less. They’re capable of performing
repetitive tasks with relative ease.
We perform repetitive tasks or calculations, or operations on elements
in some data structure usingloops or iteration.
We have two basic types of loops in Python:while loops, and for
loops.
If you’ve written code in another language, you may find that Python
handles while loops in a similar fashion, but Python handlesfor loops
rather differently.
A while loop performs some repetitive task or calculationas long as
some condition is true .
A for loop iterates over aniterable. What is aniterable? An iterable
is a composite object (made of parts, called “members” or “elements”)
which is capable of returning its members one at a time, in a specific
sequence. Recall: lists, tuples, and strings are all iterable.
Take, for example, this list:
m = [4, 2, 0, 1, 7, 9, 8, 3]
If we ask Python to iterate over this list, the list object itself “knows”
how to return a single member at a time: 4, then 2, then 0, then 1,etc.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 232}","## Loops and Iteration

### 11.1 Loops: An Introduction

#### Key Concepts:

- Loops are used to perform repetitive tasks.
- Python offers two types of loops: while loops and for loops.

#### While Loops:

- **Syntax:** `while condition:`
- **Purpose:** Executes a block of code repeatedly as long as the condition evaluates to `True`.
- **Example:**
```python
while i < 10:
    print(i)
    i += 1
```
Output:
```
0
1
2
3
4
5
6
7
8
9
```

#### For Loops:

- **Syntax:** `for item in iterable:`
- **Purpose:** Iterates through an iterable object (container such as a list, tuple, or string) one item at a time.
- **Example:**
```python
for num in [1, 2, 3, 4, 5]:
    print(num * num)
```
Output:
```
1
4
9
16
25
```

#### Comparison of While and For Loops:

| Feature | While Loop | For Loop |
|---|---|---|
| Iteration Control | Programmer defines condition | Iterator (iterable object) takes care of iteration |
| Syntax | `while condition:` | `for item in iterable:` |
| Use Case | When a loop condition needs to be evaluated before each iteration | When iterating through an iterable object |

#### Other Concepts:

- **Iterables:** Composite objects that can return their members one at a time in a specific sequence (e.g., lists, tuples, strings).
- **Iterate:** Process of extracting members of an iterable object one by one.
- **Loop:** Repetitive execution of a block of code.
- **Nested Loop:** A loop within another loop.
- **Stride:** Number of elements to skip between each iteration in a range object."
"page_content='while loops 219
We can use this to govern how many iterations we wish to perform and
also to provide data that we can use in our tasks or calculations.
Inthefollowingsections,we’llgiveathoroughtreatmentofbothkinds
of loop:while and for.
11.2 while loops
Sometimes, we wish to perform some task or calculation repetitively, but
we only want to do this under certain conditions. For this we have the
while loop. Awhile loop continues to execute,as long as some condition
is true or has a truthy value .
Imagine you’re simulating a game of blackjack, and it’s the dealer’s
turn. The dealer turns over their down card, and if their total is less than
17 they must continue to draw until they reach 17 or they go over 21.1
We don’t know how many cards they’ll draw, but they must continue to
draw until the condition is met. Awhile loop will repeat as long as some
condition is true, so it’s perfect for a case like this.
Here’s a little snippet of Python code, showing how we might use a
while loop.
# Let's say the dealer has a five showing, and
# then turns over a four. That gives the dealer
# nine points. They *must* draw.
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
next_card = int(input(prompt))
dealer = dealer + next_card
if dealer <= 21:
print(f""Dealer has {dealer} points!"")
else:
print(f""Oh, dear. ""
f""Dealer has gone over with {dealer} points!"")
Here the dealer starts with a total of nine. Then, in thewhile loop, we
keep prompting for the number of points to be added to the dealer’s
hand. Points are added to the value ofdealer. This loop will continue to
execute as long as the dealer’s score is less than 17. We see this in the
while condition:
while dealer < 17:
...
Naturally, this construction raises some questions.
1 If you’re unfamiliar with the rules of blackjack, see https://en.wikipedia.org/w
iki/Blackjack' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 233}","**Metadata**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 233

**Section 1: While Loops**

While loops allow for repetitive execution of tasks or calculations, subject to specific conditions.

**Section 1.1: Syntax and Structure**

```python
while condition:
    # Code to be executed while the condition is true
```

**Section 1.2: Use Cases**

While loops are beneficial when:

* The number of iterations is unknown upfront.
* Execution should continue until a specific condition is met.

**Example**

Simulating a blackjack dealer's card draws:

```python
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer += next_card
    if dealer <= 21:
        print(f""Dealer has {dealer} points!"")
    else:
        print(f""Oh, dear. Dealer has gone over with {dealer} points!"")
```

**Frequently Asked Questions**

* **When to use a while loop?** When the number of iterations is unknown or when execution should continue until a specific condition is met.
* **What is the syntax of a while loop?** `while condition:` followed by the code to be executed while the condition is true."
"page_content='220 Loops and iteration
• What can be used as awhile condition?
• When is thewhile condition checked?
• When does thewhile loop terminate?
• What happens after the loop terminates?
A while condition can be any expression which evaluates to a
Boolean or truthy value
In the example above, we have a simple Boolean expression as ourwhile
condition. However, awhile condition can be any Boolean expression,
simple or compound, or any value or expression that’s truthy or falsey—
and in Python, that’s just about anything! Examples:
lst = ['a', 'b', 'c']
while lst:
print(lst.pop(0))
Non-empty sequences are truthy. Empty sequences are falsey. So as long
as the listlst contains any elements, thiswhile loop will continue. This
will print
a
b
c
and then terminate (because after popping the last element, the list is
empty, and thus falsey).
while x < 100 and x % 2 == 0:
...
This loop will execute as long asx is less than 100 andx is even.
The condition of a while loop is checked before each iteration
The condition of awhile loop is checkedbefore each iteration of the loop.
In this case, the condition isdealer < 17 . At the start, the dealer has
nine points, sodealer < 17 evaluates toTrue. Since this condition is true,
the body of the loop is executed. (The body consists of the indented lines
under while dealer < 17.)
Once the body of thewhile loop has executed, the condition is checked
again. If the condition remains true, then the body of the loop will be
executed again. That’s why we call it a loop!
It’s important to understand that the condition is not checked while
the body of the loop is executing.
The condition is always checkedbefore executing the body of the loop.
This might sound paradoxical. Didn’t we just say thatafter executing
the body the condition is checked again? Yes. That’s true, and it’s in the' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 234}","## Loops and Iteration

### What can be used as a `while` condition?

A `while` condition can be any expression which evaluates to a Boolean or truthy value.

### When is the `while` condition checked?

The condition of a `while` loop is checked **before each iteration** of the loop.

### When does the `while` loop terminate?

The `while` loop terminates when the condition evaluates to `False` or a **falsey value**.

### What happens after the loop terminates?

After the loop terminates, execution continues with the first statement **after** the loop body.

## Examples

- **Non-empty sequences are truthy. Empty sequences are falsey.** So as long as the list `lst` contains any elements, the `while` loop will continue. This will print `a`, `b` and `c`, and then terminate.
```python
lst = ['a', 'b', 'c']
while lst:
    print(lst.pop(0))
```


- **This loop will execute as long as `x` is less than 100 and `x` is even.**
```python
while x < 100 and x % 2 == 0:
    ...
```"
"page_content='while loops 221
nature of a loop to be a little… circular. However, what we’re checking
in the case of awhile loop is whether or not we should execute the body.
If the condition is true, then we execute the body, then we loop back to
the beginning and check the condition again.
T ermination of a while loop
At some point (if we’ve designed our program correctly), thewhile con-
dition becomes false. For example, if the dealer were to draw an eight,
then adding eight points would bring the dealer’s score to 17. At that
point, the conditiondealer < 17 would evaluate toFalse (because 17 is
not less than 17), and the loop terminates.
After the loop
Once a while terminates, code execution continues with the code which
follows the loop.
It’s important to understand that the while condition is not evaluated
again after the loop has terminated .
Review of our blackjack loop
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")
When we ﬁrst reach
this line of code, the 
value of dealer is 9, 
so the condition is true.
We enter the loop and 
the body of the loop 
is executed.  
Having entered the
loop, the body is
executed. The condition
is not evaluated while
the body is being 
executed. 
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 235}","## While Loops

### Nature of a While Loop

While loops, like other loops, allow us to execute a block of code multiple times. However, unlike for loops, the number of times a while loop executes is not predetermined. The nature of a loop is to be a little… circular. In the case of a while loop, we continuously check whether or not we should execute the body. If the condition is true, then we execute the body and loop back to the beginning to check the condition again.

### Termination of a While Loop

At some point (if we’ve designed our program correctly), the while condition becomes false. For example, if the dealer were to draw an eight, then adding eight points would bring the dealer’s score to 17. At that point, the condition dealer < 17 would evaluate to False (because 17 is not less than 17), and the loop terminates.

### After the Loop

Once a while loop terminates, code execution continues with the code which follows the loop.

It’s important to understand that the while condition is not evaluated again after the loop has terminated.

### Review of Our Blackjack Loop

```python
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")
```

When we first reach this line of code, the value of dealer is 9, so the condition is true. We enter the loop and the body of the loop is executed.

Having entered the loop, the body is executed. The condition is not evaluated while the body is being executed.

The body of the loop consists of three lines of code:

1. Get the value of the next card drawn from the user.
2. Add the value of the next card drawn to the dealer’s score.
3. Check if the dealer’s score is less than or equal to 21.

If the dealer’s score is less than or equal to 21, then the dealer has not gone over and we print a message indicating the dealer’s score. Otherwise, the dealer has gone over and we print a message indicating that the dealer has gone over."
"page_content='222 Loops and iteration
Loop!
Go back to the
start of the loop,
and check the
condition again.
If the condition is
still true, we execute
the body again. 
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")
Since we’ve looped,
we execute the body
again.
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")
Loop!
At some point,
the condition should
become false, at 
which point the loop
terminates…
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 236}","# 222 Loops and iteration

Loop!

Go back to the
start of the loop,
and check the
condition again.
If the condition is
still true, we execute
the body again.

```python
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")
```

Since we’ve looped,
we execute the body
again.

```python
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")
```

Loop!

At some point,
the condition should
become false, at 
which point the loop
terminates…

```python
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")
```"
"page_content='while loops 223
…at which point
we exit the loop
and continue with
the program code
after the loop.
Note that we don’t
re-evaluate the condition
after exiting the loop.
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")
Another example: coffee shop queue with limited coffee
Here’s another example of using awhile loop.
Let’s say we have a queue of customers at a coffee shop. They all want
coffee (of course). The coffee shop offers small (8 oz), medium (12 oz)
and large (20 oz) coffees. However, the coffee shop has run out of beans
and all they have is what’s left in the urn. The baristas have to serve the
customers in order, and can only take orders as long as there’s at least
20 oz in the urn.
We can write a function which calculates how many people are served
in the queue and reports the result. To do this we’ll use awhile loop. Our
function will take three arguments: the number of ounces of coffee in the
urn, a list representing the queue of orders, and the minimum amount of
coffee that must remain in the urn before the baristas must stop taking
orders. The queue will be a list of values—8, 12, or 20—depending on
which size each customer requests. For example,
queue = [8, 12, 20, 20, 12, 12, 20, 8, 12, ...]
Let’s call the amount of coffee in the urn reserve, the minimum
minimum, and our queue of customerscustomers. Our while condition is
reserve >= minimum.
def serve_coffee(reserve, customers, minimum):
customers_served = 0
while reserve >= minimum:
reserve = reserve - customers[customers_served]
customers_served += 1
print(f""We have served {customers_served} customers, ""
f""and we have only {reserve} ounces remaining."")
Ateachiteration,wechecktoseeifwestillhaveenoughcoffeetocontinue
taking orders. Then, within the body of the loop, we take the customers
in order, and—one customer at a time—we deduct the amount of coffee' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 237}","## While Loops

### Syntax and Usage

```python
while condition:
    # Code to be executed repeatedly
    # Update the loop condition variable
```

### Examples

#### Dealer Game

```python
dealer = 9
prompt = ""What's the value of the next card drawn? ""
while dealer < 17:
    next_card = int(input(prompt))
    dealer = dealer + next_card
if dealer <= 21:
    print(f""Dealer has {dealer} points!"")
else:
    print(f""Oh, dear. ""
          f""Dealer has gone over with {dealer} points!"")
```

#### Coffee Shop Queue

```python
def serve_coffee(reserve, customers, minimum):
    customers_served = 0
    while reserve >= minimum:
        reserve = reserve - customers[customers_served]
        customers_served += 1
    print(f""We have served {customers_served} customers, ""
          f""and we have only {reserve} ounces remaining."")
```

### Loop Control

- **Break:** Exits the loop immediately.
- **Continue:** Skips the current iteration and continues with the next one.
- **Pass:** Does nothing, but can be used to fill in a placeholder.

### Comparison of While Loops and For Loops

| Feature | While Loop | For Loop |
|---|---|---|
| Syntax | `while condition:` | `for item in iterable:` |
| Condition | Evaluated continuously | Evaluated once at the start of the loop |
| Iteration | Manual control over iteration | Automatic iteration through a sequence |
| Use Cases | Repeatedly executing code based on a condition | Iterating through a sequence of known length |"
"page_content='224 Loops and iteration
they’ve ordered. Once the reserve drops below the minimum, we stop
taking orders and report the results.
What happens if the while condition is never met?
Let’s say we called theserve_coffee() function (above), with the argu-
ments, 6, lst, and8, wherelst is some arbitrary list of orders:
serve_coffee(6, lst, 8)
In this case, when we check thewhile condition the first time, the con-
dition fails, because six is not greater than or equal to eight. Thus, the
body of the loop would never execute, and the function would report:
We have served 0 customers, and we have only 6 ounces remaining.
So it’s possible that the body of any givenwhile loop might never be
executed. If, at the start, thewhile condition is false, Python will skip
past the loop entirely!
11.3 Input validation with while loops
A common use for awhile loop isinput validation .
Let’s say we want the user to provide a number from 1 to 10, inclusive.
We present the user with a prompt:
Pick a number from 1 to 10:
So far, we’ve only seen how to complain to the user:
Pick a number from 1 to 10: 999
You have done a very bad thing.
I will terminate now and speak to you no further!
That’s not very user-friendly! Usually what we do in cases like this is we
continue to prompt the user until they supply a suitable value.
Pick a number from 1 to 10: 999
Invalid input.
Pick a number from 1 to 10: -1
Invalid input.
Pick a number from 1 to 10: 7
You have entered 7, which is a very lucky number!
But here’s the problem: We don’t know how many tries it will take
for the user to provide a valid input! Will they do so on the first try? On
the second try? On the fourth try? On the twelfth try? We just don’t
know! Thus, awhile loop is the perfect tool.
How would we implement such a loop in Python? What would serve
as a condition?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 238}","**Content Formatting:**

**Loops and Iteration**

**Metadata**
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 238

**11.2 While Loop**

**Unmet While Condition**

If the `while` condition is never met, the body of the loop will never execute. The function will report the results without executing the loop.

**11.3 Input Validation with While Loops**

Input validation is a common use for `while` loops. The user is prompted to provide input until a suitable value is entered.

**Example:**

Validate user input for a number between 1 and 10:

```python
while True:
    input_value = int(input(""Pick a number from 1 to 10: ""))
    if 1 <= input_value <= 10:
        break
    print(""Invalid input."")
```"
"page_content='Input validation with while loops 225
Plot twist: In this case, we’d choose a condition that’salways true,
and then onlybreak out of the loop when we have a number in the desired
range. This is a common idiom in Python (and many other programming
languages).
while True:
n = int(input(""Pick a number from 1 to 10: ""))
if 1 <= n <= 10:
break
print(""Invalid input."")
if n == 7:
print(""You have entered 7, ""
""which is a very lucky number!"")
else:
print(f""You have entered {n}. Good for you!"")
Notice what we’ve done here: thewhile condition is the Boolean lit-
eral True. This cannever be false! So we have to have a way of exiting
the loop. That’s wherebreak comes in.break is a Python keyword which
means “break out of the nearest enclosing loop.” Theif clause includes
a condition which is only true if the user’s choice is in the desired range.
Therefore, this loop will execute indefinitely, until the user enters a num-
ber between one and 10.
As far as user experience goes, this is much more friendly than just
terminating the program immediately if the user doesn’t follow instruc-
tions. Rather than complaining and exiting, our program can ask again
when it receives invalid input.
A note of caution
While the example above demonstrates a valid use ofbreak, break should
be used sparingly. If there’s a good way to write awhile loop without us-
ing break then you should do so! This often involves careful consideration
of while conditions—a worthwhile investment of your time.
It’salsoconsideredbadformtoincludemorethanone break statement
within a loop. Again, please usebreak sparingly.
Other applications of while loops
We’ll see many other uses for thewhile loop, including performing nu-
meric calculations and reading data from a file.
Comprehension check
1. What is printed?
>>> c = 5
>>> while c >= 0:
... print(c)
... c -= 1' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 239}","**Input Validation with while Loops**
Page: 239
Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Plot Twist**
In this case, we choose a condition that's always true and only break out of the loop when we have a number in the desired range. This is a common idiom in Python and many other programming languages.

**Example:**
```python
while True:
    n = int(input(""Pick a number from 1 to 10: ""))
    if 1 <= n <= 10:
        break
    print(""Invalid input."")
if n == 7:
    print(""You have entered 7, ""
          ""which is a very lucky number!"")
else:
    print(f""You have entered {n}. Good for you!"")
```

**Notice:**
- The while condition is the Boolean literal True. This can never be false, so we need a way to exit the loop.
- break is a Python keyword that means ""break out of the nearest enclosing loop.""
- The if clause includes a condition which is only true if the user's choice is in the desired range.
- Therefore, this loop will execute indefinitely until the user enters a number between one and 10.

**User Experience**
This approach is more friendly than terminating the program immediately if the user doesn't follow instructions. Our program can ask again when it receives invalid input.

**Caution:**
- break should be used sparingly. If there's a good way to write a while loop without using break, you should do so.
- It's considered bad form to include more than one break statement within a loop.

**Other Applications of while Loops**
We'll see many other uses for the while loop, including performing numeric calculations and reading data from a file.

**Comprehension Check**
**Question:** What is printed?
>>> c = 5
>>> while c >= 0:
... print(c)
... c -= 1

**Answer:**
5, 4, 3, 2, 1, 0"
"page_content='226 Loops and iteration
2. How many times is “Hello” printed?
>>> while False:
... print(""Hello"")
...
3. What’s the problem with thiswhile loop?
>>> while True:
... print(""The age of the universe is..."")
...
4. How many times will this loop execute?
>>> while True:
... break
...
5. How many times will this loop execute?
>>> n = 10
>>> while n > 0:
... n = n // 2
...
6. Here’s an example showing how to pop elements from a list within
a loop.
>>> while some_list:
... element = some_list.pop()
... # Now do something useful with that element
...
Ask yourself:
• Why does this work?
• When does the while loop terminate?
• What does this have to do with truthiness or falsiness?
• Is an empty list falsey?
Challenge!
How about this loop? Try this out with a hand-held calculator.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 240}","## Loops and Iteration

### Content
**1. How many times is ""Hello"" printed?**

```python
while False:
    print(""Hello"")
```

**Answer:** Zero times. The loop condition is `False`, so the loop body is never executed.

**2. What's the problem with this while loop?**

```python
while True:
    print(""The age of the universe is..."")
```

**Answer:** The loop will never end because the condition is always `True`. This is an infinite loop and will cause the program to crash.

**3. How many times will this loop execute?**

```python
while True:
    break
```

**Answer:** Once. The `break` statement terminates the loop immediately.

**4. How many times will this loop execute?**

```python
n = 10
while n > 0:
    n = n // 2
```

**Answer:** Four times (n=10, 5, 2, 1). The loop continues as long as `n` is greater than 0. Each time through the loop, `n` is divided by 2.

**5. Here's an example showing how to pop elements from a list within a loop.**

```python
while some_list:
    element = some_list.pop()
    # Now do something useful with that element
```

**Questions and Answers:**

- **Why does this work?**
  - The `while` loop continues as long as `some_list` is not empty.
- **When does the while loop terminate?**
  - When `some_list` becomes empty.
- **What does this have to do with truthiness or falsiness?**
  - An empty list is considered False in Python, so the loop terminates when `some_list` becomes False.
- **Is an empty list falsey?**
  - Yes.

**Challenge:**

```
while 1.00101:
    print(""Hello"")
```

**Answer:** This loop will execute indefinitely because the loop condition is always `True`. The value 1.00101 is not equal to zero, so it is considered True in Python."
"page_content='An ancient algorithm with a while loop 227
EPSILON = 0.01
x = 2.0
guess = x
while True:
guess = sum((guess, x / guess)) / 2
if abs(guess ** 2 - x) < EPSILON:
break
print(guess)
(abs() is a built-in Python function which calculates the absolute value
of a number.) What does this loop do?
11.4 An ancient algorithm with a while loop
There’s a rather beautiful algorithm for finding the greatest common
divisor of two positive integers.
You may recall from your elementary algebra course that thegreatest
common divisor of two positive integers,𝑎 and 𝑏, is the greatest integer
which divides both𝑎 and 𝑏 without a remainder.
For example, the greatest common divisor of 120 and 105 is 15. It’s
clear that 15 is a divisor of both 120 and 105:
120/15 = 8
105/15 = 7.
How do we know that 15 is thegreatest common divisor? One way is
to factor both numbers and find all the common factors.
We’ve found the common factors of 120 and 105, which are 3 and 5,
and their product is 15. Therefore, 15 is the greatest common divisor
of 120 and 105. This works, and it may well be what you learned in
elementary algebra, however, it becomes diﬀicult with larger numbers
and isn’t particularly eﬀicient.
Euclid’s algorithm
Euclid was an ancient Greek mathematician who flourished around 300
BCE. Here’s an algorithm that bears Euclid’s name. It was presented
in Euclid’sElements, but it’s likely that it originated many years before
Euclid.2
2 Some historians believe that Eudoxus of Cnidus was aware of this algorithm ( c.
375 BCE), and it’s quite possible it was known before that time.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 241}","### Page 241

#### An Ancient Algorithm with a While Loop

**Metadata:**

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 241

**Code:**

```python
EPSILON = 0.01
x = 2.0
guess = x
while True:
    guess = sum((guess, x / guess)) / 2
    if abs(guess ** 2 - x) < EPSILON:
        break
print(guess)
```

**Function of the Loop:**

The loop calculates the square root of `x` using the ancient Babylonian method.

#### An Ancient Algorithm with a While Loop (11.4)

**Greatest Common Divisor**

The greatest common divisor (GCD) of two positive integers `a` and `b` is the greatest integer that divides both `a` and `b` without a remainder.

**Example:**

The GCD of 120 and 105 is 15.

#### Euclid's Algorithm

Euclid's algorithm, dating back to 300 BCE, efficiently calculates the GCD of two integers.

**Key Considerations:**

- Factorization becomes inefficient for larger numbers.
- Euclid's algorithm is more efficient and reliable."
"page_content='228 Loops and iteration
Euclid’s GCD algorithm
input : Positive integers,𝑎 and 𝑏
output: Calculates the GCD of𝑎 and 𝑏
while 𝑏 does not equal 0 do
Find the remainder when we divide𝑎 by 𝑏;
Let 𝑎 equal 𝑏;
Let 𝑏 equal the remainder;
end
𝑎 is the GCD
Let’s work out an example. Say we have𝑎 = 342 and 𝑏 = 186.
First,wefindtheremainderof 342/186.186 goesinto 342 once,leaving
a remainder of156. Now, let𝑎 = 186 , and let𝑏 = 156 . Does 𝑏 equal 0?
No, so we continue.
Find the remainder of 186/156. 156 goes into 186 once, leaving a
remainder of30. Now, let𝑎 = 156 , and let𝑏 = 30 . Does 𝑏 equal 0? No,
so we continue.
Find the remainder of156/30. 30 goes into 156 five times, leaving a
remainder of 6. Now, let𝑎 = 30 , and let𝑏 = 6 . Does 𝑏 equal 0? No, so
we continue.
Find the remainder of30/6. 6 goes into 30 five times, leaving a re-
mainder of0. Now, let𝑎 = 6, and let𝑏 = 0 . Does𝑏 equal 0? Yes, so we
are done.
The GCD is the value of𝑎, so the GCD is6.
Pretty cool, huh?
Why does it work?
If we have𝑎 and 𝑏 both positive integers, with𝑎 > 𝑏, then we can write
𝑎 = 𝑏𝑞 + 𝑟
where 𝑞 is the quotient of dividing𝑎 by 𝑏 (Euclidean division) and𝑟 is
the remainder. For example, in the first step of our example (above) we
have
342 = 1 × 186 + 156.
It follows that the GCD of𝑎 and 𝑏 equals the GCD of𝑏 and 𝑟.3 That is,
gcd(𝑎, 𝑏) = gcd(𝑏, 𝑟).
Thus, by successive divisions, we continue to reduce the problem to
smaller and smaller terms. At some point in the execution of the al-
gorithm, 𝑏 becomes 0, and we can divide no further. At this point, what
remains as the value for𝑎 is the GCD, because the greatest common
divisor of𝑎 and zero is𝑎!
3 If we have positive integers 𝑎, 𝑏 with 𝑎 > 𝑏 , then by the division algorithm,
we know there exist integers 𝑞, 𝑟, such that 𝑎 = 𝑏𝑞 + 𝑟 , with 𝑏 > 𝑟 ≥ 0 . Let 𝑑 be
a common divisor of 𝑎 and 𝑏. Since 𝑑 divides 𝑎 and 𝑑 divides 𝑏, then there exist
integers 𝑛, 𝑚, such that 𝑎 = 𝑑𝑚 and 𝑏 = 𝑑𝑛. By substitution, we have 𝑑𝑚 = 𝑑𝑞𝑛 + 𝑟.
Rearranging terms we have 𝑑𝑚 − 𝑑𝑞𝑛 = 𝑟 . By factoring, we have 𝑑(𝑚 − 𝑞𝑛) = 𝑟 .
Therefore, 𝑑 divides 𝑟. Thus the set of common divisors of 𝑎 and 𝑏 is the same as
the set of common divisors of 𝑏 and 𝑟. Thus the greatest element of each of these
sets must be the same. Therefore, we have gcd (𝑎, 𝑏) = gcd(𝑏, 𝑟), as desired.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 242}","## Loops and Iteration

### Euclid’s GCD Algorithm

**Input:** Positive integers, 𝑎 and 𝑏
**Output:** Calculates the GCD of 𝑎 and 𝑏

**Algorithm:**

```
while b does not equal 0 do
Find the remainder when we divide a by b;
Let a equal b;
Let b equal the remainder;
end
a is the GCD
```

**Example:**

Suppose we have 𝑎 = 342 and 𝑏 = 186.

1. Find the remainder of 342/186: 186 goes into 342 once, leaving a remainder of 156.
2. Let 𝑎 = 186 and 𝑏 = 156.
3. Find the remainder of 186/156: 156 goes into 186 once, leaving a remainder of 30.
4. Let 𝑎 = 156 and 𝑏 = 30.
5. Find the remainder of 156/30: 30 goes into 156 five times, leaving a remainder of 6.
6. Let 𝑎 = 30 and 𝑏 = 6.
7. Find the remainder of 30/6: 6 goes into 30 five times, leaving a remainder of 0.
8. Let 𝑎 = 6 and 𝑏 = 0.

Since 𝑏 is now 0, we stop the algorithm. The GCD is the value of 𝑎, which is 6.

**Mathematical Explanation:**

If we have 𝑎 and 𝑏 both positive integers, with 𝑎 > 𝑏, then we can write:

```
𝑎 = 𝑏𝑞 + 𝑟
```

where 𝑞 is the quotient of dividing 𝑎 by 𝑏 (Euclidean division) and 𝑟 is the remainder.

It follows that the GCD of 𝑎 and 𝑏 equals the GCD of 𝑏 and 𝑟:

```
gcd(𝑎, 𝑏) = gcd(𝑏, 𝑟)
```

Thus, by successive divisions, we continue to reduce the problem to smaller and smaller terms. At some point, 𝑏 becomes 0, and we can divide no further. At this point, the remaining value for 𝑎 is the GCD, because the greatest common divisor of 𝑎 and zero is 𝑎.

**Metadata:**

* Source: `C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf`
* Page: 242"
"page_content='for loops 229
This algorithm saves us from having to factor both terms.
Consider a larger problem instance with 𝑎 = 30759 and 𝑏 = 9126 .
Factoring these would be a nuisance, but the Euclidean algorithm takes
only eight iterations to find the answer,3.
Show me the code!
Here’s an implementation in Python.
""""""
Implementation of Euclid's algorithm.
""""""
a = int(input(""Enter a positive integer, a: ""))
b = int(input(""Enter a positive integer, b: ""))
while b != 0:
remainder = a % b
a = b
b = remainder
print(f""The GCD is {a}."")
That’s one elegant little algorithm (and one of my personal favorites).
It also demonstrates the use of awhile loop, which is needed, since we
don’t knowa priori how many iterations it will take to reach a solution.
11.5 for loops
We’ve seen thatwhile loops are useful when we know we wish to perform
a calculation or task, but we don’t know in advance how many iterations
we may need. Thus,while loops provide a condition, and we loop until
that condition (whatever it may be) no longer holds true.
Python has another type of loop which is useful when:
• we know exactly how many iterations we require, or
• we have some sequence (for example, list, tuple, or string) and we
wish to perform calculations, tasks, or operations with respect to
the elements of the sequence (or some subset thereof).
This new kind of loop is thefor loop. for loops are so named because
they iteratefor each element in some iterable. Pythonfor loops iterate
over someiterable. Always.4
4 for loops in Python work rather differently than they do in many other lan-
guages. Some languages use counters, and thus for loops are count-control led. F or
example, in Java we might write
for (int i = 0; i < 10; ++i) {
// do something
}' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 243}","## Metadata

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

- Page: 243


### 11.5 for loops

We’ve seen that while loops are useful when we know we wish to perform a calculation or task, but we don’t know in advance how many iterations we may need. Thus, while loops provide a condition, and we loop until that condition (whatever it may be) no longer holds true.

Python has another type of loop which is useful when:
- we know exactly how many iterations we require, or
- we have some sequence (for example, list, tuple, or string) and we wish to perform calculations, tasks, or operations with respect to the elements of the sequence (or some subset thereof).

This new kind of loop is the for loop. for loops are so named because they iterate for each element in some iterable. Python for loops iterate over some iterable. Always.

**Note:** for loops in Python work rather differently than they do in many other languages. Some languages use counters, and thus for loops are count-controlled. For example, in Java we might write:

```java
for (int i = 0; i < 10; ++i) {
// do something
}
```"
"page_content='230 Loops and iteration
What’s an iterable? Something we can iterate over, of course! And
what might that be? The sequence types we’ve seen so far (list, tuple,
string) are sequences, and these are iterable. We can also produce other
iterable objects (which we shall see soon).
Here’s an example. We can iterate over a list,[1, 2, 3] , by taking
the elements, one at a time, in the order they appear in sequence.
>>> numbers = [1, 2, 3]
>>> for n in numbers:
... print(n)
...
1
2
3
See? In ourfor loop, Python iterated over the elements (a.k.a. “mem-
bers”) of the list provided. It started with 1, then 2, then 3. At that
point the list was exhausted, so the loop terminated.
If it helps, you can readfor n in numbers: as “for each number, n, in
the iterable called ‘numbers’.”
This works for tuples as well.
>>> letters = ('a', 'b', 'c')
>>> for letter in letters:
... print(letter)
...
a
b
c
Notice the syntax:for <some variable> in <some iterable>: . As we
iterate over some iterable, we get each member of the iterable in turn,
one at a time. Accordingly, we need to assign these members (one at a
time) to some variable.
In the first example, above the variable has the identifiern.
>>> numbers = [1, 2, 3]
>>> for n in numbers:
... print(n)
...
As we iterate overnumbers (a list), we get one element from the list at
a time (in the order they appear in the list). So at the first iteration,n
is assigned the value1. At the second iteration,n is assigned the value2.
In this case, there’s a counter, i, which is updated at each iteration of the loop.
Here we update by incrementing i using ++i (which in Java increments i). The loop
runs so long as the control condition i < 10is true. On the last iteration, with i equal
to nine, i is incremented to ten, then the condition no longer holds, and the loop
exits. This is not how for loops work in Python! Python for loops always iterate
over an iterable.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 244}","**Metadata**

- Page Number: 244
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Loops and Iteration**

**What is an Iterable?**

- An iterable is an object that can be iterated over, meaning we can access its elements one at a time in a sequence.

**Iterating Over Sequences**

- Sequence types such as lists, tuples, and strings are iterable.
- Example: Iterating over a list:
```python
numbers = [1, 2, 3]

for n in numbers:
    print(n)
```

**Syntax for Iterating**

- The syntax for iterating over an iterable is:
```
for <variable> in <iterable>:
```
- The variable is assigned each member of the iterable in turn.

**Iterating Over Tuples**

- Tuples are also iterable.
- Example: Iterating over a tuple:
```python
letters = ('a', 'b', 'c')

for letter in letters:
    print(letter)
```

**Counter-Controlled Loops**

- This is not how for loops work in Python.
- Python for loops always iterate over an iterable."
"page_content='for loops 231
At the third iteration,n is assigned the value3. After the third iteration,
there are no more elements left in the sequence and the loop terminates.
Thus, the syntax of afor loop requires us to give a variable name for
the variable which will hold the individual elements of the sequence. For
example, we cannot do this:
>>> for [1, 2, 3]:
... print(""Hello!"")
If we were to try this, we’d get aSyntaxError. The syntax that must
be used is:
for <some variable> in <some iterable>:
# body of the loop, indented
where <some variable> is replaced with a valid variable name, and<some
iterable> is the name of some iterable, be it a list, tuple, string, or other
iterable.
Iterating over a range of numbers
Sometimes we want to iterate over arange of numbers or we wish to
iterate some fixed number of times, and Python provides us with a means
to do this: therange type. This is a new type that we’ve not seen before.
range objects are iterable, and we can use them infor loops.
We can create a newrange object using Python’s built-in function
range(). This function, also called therange constructor, is used to create
range objects representingarithmetic sequences.5
Before we create a loop using arange object, let’s experiment a little.
The simplest syntax for creating a range object is to pass a positive
integer as an argument to therange constructor. What we get back is
a range object, which is like a list of numbers. If we provide a positive
integer, n, as a single argument, we get arange object withn elements.
>>> r = range(4)
Now we have arange object, namedr. Let’s get nosy.
>>> len(r)
4
OK. Sor has 4 elements. That checks out.
5 An arithmetic sequence, is a sequence of numbers such that the difference be-
tween any number in the sequence and its predecessor is constant. 1, 2, 3, 4, …is an
arithmetic sequence because the difference between each of the terms is 1. Similarly ,
2, 4, 6, 8, …is an arithmetic sequence because the difference between each term is 2.
Python range objects are restricted to arithmetic sequences of integers.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 245}","**Metadata**

* Page Number: 245
* Line Numbers: 231-255
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Content**

**1. For Loops**

**a. Syntax**

The syntax of a for loop in Python is:

```python
for <some variable> in <some iterable>:
# body of the loop, indented
```

where:

* `<some variable>` is a valid variable name that will hold the individual elements of the sequence.
* `<some iterable>` is the name of an iterable object, such as a list, tuple, string, or range.

**b. Iterating over Ranges of Numbers**

A range object represents an arithmetic sequence of integers. It can be created using the `range()` function, which takes a positive integer as an argument. The resulting range object will have that number of elements.

**Example:**

```python
r = range(4)
print(len(r))  # Outputs: 4
```

**2. Difference between a Range Object and a List**

| Feature | Range Object | List |
|---|---|---|
| Type | Iterable | Array |
| Storage | Lazy evaluated | Stores values in memory |
| Memory Usage | Efficient | Less efficient than range object |
| Creation | Created using `range()` function | Created using `[]` or `list()` function |
| Iteration | Iterates over a sequence of integers | Iterates over a collection of values of any type |
| Accessing Elements | Can't access elements directly | Can access elements using indexing or slicing |"
"page_content='232 Loops and iteration
>>> r[0]
0
>>> r[1]
1
>>> r[2]
2
>>> r[3]
3
>>> r[4]
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
IndexError: range object index out of range
We see that the values held by thisrange object, are 0, 1, 2, and 3, in
that order.
Now let’s use arange object in afor loop. Here’s the simplest possible
example:
>>> for n in range(4):
... print(n)
What do you think this will print?
• The numbers 1 through 4?
• The numbers 0 through 4? (since Python is zero-indexed)
• The numbers 0 through 3? (since Python slices go up to, but do
not include, the stop index)
Here’s the answer:
>>> for n in range(4):
... print(n)
...
0
1
2
3
Zero through three.range(n) with a single integer argument will generate
an arithmetic sequence from 0 up to,but not including , the value of the
argument.
Notice, though, that if we userange(n) our loop will executen times.
What if we wanted to iterate integers in the interval[5, 10]? How
would we do that?
>>> for n in range(5, 11):
... print(n)
...
5
6' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 246}","## Loops and Iteration

### Range Objects

```python
>>> r[0]
0
>>> r[1]
1
>>> r[2]
2
>>> r[3]
3
>>> r[4]
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
IndexError: range object index out of range
```

Range objects contain a sequence of values. In this example, the range object `r` contains the values 0, 1, 2, and 3.

### Using Range Objects in For Loops

For loops can be used to iterate over the values in a range object. The following example iterates over the values in the range object `r`:

```python
>>> for n in range(4):
... print(n)
```

This loop will print the following output:

```
0
1
2
3
```

### Generating Arithmetic Sequences with Range Objects

Range objects can also be used to generate arithmetic sequences. The following example generates an arithmetic sequence from 0 to 9:

```python
>>> for n in range(5, 11):
... print(n)
```

This loop will print the following output:

```
5
6
7
8
9
10
```"
"page_content='for loops 233
7
8
9
10
The syntax here, when we use two arguments, is range(<start>,
<stop>), where <start> and <stop> are integers or variables with inte-
ger values. Therange will include integers starting at the start value up
to but not including the stop value.
What if, for some reason, we wanted only even or odd values? Or
what if we wanted to count by threes, or fives, or tens? Can we use a
different step size or stride? Yes, of course. These are all valid arithmetic
sequences. Let’s count by threes.
>>> for n in range(3, 19, 3):
... print(n)
...
3
6
9
12
15
18
This three argument syntax isrange(<start>, <stop>, <stride>) . The
last argument, called thestride or step size corresponds to the difference
between terms in the arithmetic sequence (the default stride is 1).
Can we go backward? Yup. We just use a negative stride, and adjust
the start and stop values accordingly.
>>> for n in range(18, 2, -3):
... print(n)
...
18
15
12
9
6
3
This yields a range which goes from 18, down tobut not including 2,
counting backward by threes.
So you see,range() is pretty flexible.
What if I just want to do something many times and I
don’t care about the members in the sequence?
No big deal. While we do require a variable to hold each member of the
sequence or other iterable we’re iterating over, we aren’trequired to use
it in the body of the loop. There is a convention, not required by the' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 247}","### for Loops

**Syntax for range with two arguments:**

```
range(<start>, <stop>)
```

**Syntax for range with three arguments:**

```
range(<start>, <stop>, <stride>)
```

**Key Concepts:**

- The **start** argument specifies the starting value of the range.
- The **stop** argument specifies the ending value of the range (not included).
- The **stride** argument specifies the step size or difference between terms in the sequence.

**Example: Counting by threes:**

```python
>>> for n in range(3, 19, 3):
... print(n)
...
3
6
9
12
15
18
```

**Example: Counting backward by threes:**

```python
>>> for n in range(18, 2, -3):
... print(n)
...
18
15
12
9
6
3
```

**Use of range with no specified variable:**

In cases where the members of the sequence are not needed, a placeholder variable can be used. For example:

```python
for _ in range(5):
    print(""Hello"")
```"
"page_content='234 Loops and iteration
language, but commonly used, to use an underscore as the name for a
variable that we aren’t going to use or don’t really care about.
>>> for _ in range(5):
... print(""I don't like Brussles sprouts!"")
...
I don't like Brussles sprouts!
I don't like Brussles sprouts!
I don't like Brussles sprouts!
I don't like Brussles sprouts!
I don't like Brussles sprouts!
(Now you know how I feel about Brussels sprouts.)
Comprehension check
1. What is the evaluation ofsum(range(5))?
2. What is the evaluation ofmax(range(10))?
3. What is the evaluation oflen(range(0, 10, 2))
11.6 Iterables
As we have seen, iterables are Python’s way of controlling afor loop.
You can think of an iterable as a sequence or composite object (com-
posed of many parts) which can return one element at a time, until the
sequence is exhausted. We usually refer to the elements of an iterable as
members of the iterable.
It’s much like dealing playing cards from a deck, and doing something
(performing a task or calculation) once for each card that’s dealt.
A deck of playing cards is an iterable. It has 52 members (the indi-
vidual cards). The cards have some order (they may be shuffled or not,
but the cards in a deck are ordered nonetheless). We can deal cardsone
at a time . This isiterating through the deck. Once we’ve dealt the 52nd
card, the deck is exhausted, and iteration stops.
Now, there are two ways we could use the cards.
First, we can use the information that’s encoded in each card . For
example, we could say the name of the card, or we could add up the pips
on each card, and so on.
Alternatively, if we wanted to do something 52 times (like push-ups)
we could do one push-up for every card that was dealt. In this case, the
information encoded in each card and the order of the individual cards
would be irrelevant. Nevertheless, if we did one push-up for every card
that was dealt, we’d know when we reached the end of the deck that
we’d done 52 push-ups.
So it is in Python. When iterating some iterable, we can use the data
or value of each member (say calculating the sum of numbers in a list),
or we can just use iteration as a way of keeping count. Both are OK in
Python.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 248}","## Content Structuring

### Loops and Iteration

**for Loops**
- The `for` loop iterates over the items in an iterable, executing the body of the loop for each item.
- Example:
```python
for item in [1, 2, 3]:
    print(item)
```
Output:
```
1
2
3
```

**Range Function**
- The `range()` function generates a sequence of numbers.
- Example:
```python
for i in range(5):
    print(i)
```
Output:
```
0
1
2
3
4
```

**Underscore as Placeholder**
- It's common to use an underscore as a name for a variable that we don't need.
- Example:
```python
for _ in range(5):
    print(""I don't like Brussels sprouts!"")
```

### Comprehension Check

1. The evaluation of `sum(range(5))` is 10.
2. The evaluation of `max(range(10))` is 9.
3. The evaluation of `len(range(0, 10, 2))` is 5.

### Iterables

**Definition**
- Iterables are objects that can return one element at a time until exhausted.

**Example**
- A deck of playing cards is an iterable with 52 members.

**Uses**
- Iterables can be used to iterate over individual elements (e.g., calculate the sum of numbers in a list).
- Iterables can also be used as a way of keeping count (e.g., perform a set number of push-ups)."
"page_content='Iterables 235
Using the data provided by an iterable
Here are two examples of using the data of members of an iterable.
First, assume we have a list of integers and we want to know how
many of those numbers are even and how many are odd. Say we have
such a list in a variable namedlst.
evens = 0
for n in lst:
if n % 2 == 0: # it's even
evens += 1
print(f""There are {evens} even numbers in this list, ""
f""and there are {len(lst) - evens} odd numbers."")
As another example, say we have a list of all known periodic comets,
and we want to produce a list of those comets with an orbital period of
less than 100 years. We would iterate through the list of comets, check
to see each comet’s orbital period, and if that value were less than 100
years, we’d append that comet to another list. In the following example,
the listCOMETS contains tuples in which the first element of the tuple is
the name of the comet, and the second element is its orbital period in
years.6
""""""
Produce a list of Halley's type periodic comets
with orbital period less than 100 years.
""""""
COMETS = [('Mellish', 145), ('Sheppard–Trujillo', 66),
('Levy', 51), ('Halley', 75), ('Borisov', 152),
('Tsuchinshan', 101), ('Holvorcem', 38)]
# This list is abridged. You get the idea.
short_period_comets = []
for comet in COMETS:
if comet[1] < 100:
short_period_comets.append(comet)
# Yes, there's a better way to do this,
# but this suffices for illustration.
Here we’re using the data encoded in each member of the iterable,
COMETS.
6 The orbital period of a comet is the time it takes for the comet to make one
orbit around the sun.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 249}","### Metadata

- Page Number: 249
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

## Iterables

### Using the Data Provided by an Iterable

#### Example 1: Counting Even and Odd Numbers

```python
evens = 0
for n in lst:
    if n % 2 == 0:  # it's even
        evens += 1
print(f""There are {evens} even numbers in this list, ""
      f""and there are {len(lst) - evens} odd numbers."")
```

#### Example 2: Filtering Comets by Orbital Period

```python
short_period_comets = []
for comet in COMETS:
    if comet[1] < 100:
        short_period_comets.append(comet)
```"
"page_content='236 Loops and iteration
Using an iterable solely to keep count
for _ in range(1_000_000):
print(""I will not waste chalk"")
Here we’re not using the data encoded in the members of the iterable.
Instead, we’re just using it to keep count. Accordingly, we’ve given the
variable which holds the individual members returned by the iterable the
name _. _ is commonly used as a name for a variable that we aren’t going
to use in any calculation. It’s the programmer’s way of saying, “Yeah,
whatever, doesn’t matter what value it has and I don’t care.”
So these are two different ways to treat an iterable. In one case, we
care about the value of each member of the iterable; in the other, we
don’t. However,both approaches are used to govern afor loop.
11.7 Iterating over strings
We’ve seen how we can iterate over sequences such as lists, tuples, and
ranges. Python allows us to iterate over strings the same way we do for
other sequences!
When we iterate over a string, the iterator returns one character at a
time. Here’s an example:
>>> word = ""cat""
>>> for letter in word:
... print(letter)
...
c
a
t
11.8 Calculating a sum in a loop
While we have the Python built-in functionsum() which sums the ele-
ments of a sequence (provided the elements of the sequence are all of
numeric type), it’s instructive to see how we can do this in a loop (in
fact, summing in a loop isexactly what thesum() function does).
Here’s a simple example.
t = (27, 3, 19, 43, 11, 9, 31, 36, 75, 2)
sum_ = 0
for n in t:
sum_ += n
print(sum_) # prints 256
assert sum_ == sum(t) # verify answer' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 250}","## Loops and Iteration

### Using an Iterable Solely to Keep Count

```python
for _ in range(1_000_000):
    print(""I will not waste chalk"")
```

In this example, we are not using the data encoded in the members of the iterable. Instead, we are just using it to keep count. Accordingly, we have given the variable which holds the individual members returned by the iterable the name _. _ is commonly used as a name for a variable that we aren't going to use in any calculation. It's the programmer's way of saying, ""Yeah, whatever, doesn't matter what value it has and I don't care.""

### Iterating Over Strings

We can iterate over strings the same way we do for other sequences. When we iterate over a string, the iterator returns one character at a time.

```python
>>> word = ""cat""
>>> for letter in word:
...     print(letter)
...
c
a
t
```

### Calculating a Sum in a Loop

Here's a simple example of how to calculate a sum in a loop:

```python
t = (27, 3, 19, 43, 11, 9, 31, 36, 75, 2)
sum_ = 0
for n in t:
    sum_ += n
print(sum_)  # prints 256
assert sum_ == sum(t)  # verify answer
```

Here, the `sum()` function does the same thing as the loop."
"page_content='Loops and summations 237
We begin with a tuple of numeric values,t. Since the elements oft are
all numeric, we can calculate their sum. First, we create a variable to
hold the result of the sum. We call this,sum_.7 Then, we iterate over all
the elements int, and at each iteration of the loop, we add the value of
each element to the variablesum_. Once the loop has terminated,sum_
holds the sum of all the elements oft. Then we print, and compare with
the result returned bysum(t) to verify this is indeed the correct result.
In calculations like this we call the variable,sum_, an accumulator
(because it accumulates the values of the elements in the iteration).
That’s how we calculate a sum in a loop!
11.9 Loops and summations
It is often the case that we have some formula which includes asumma-
tion, and we wish to implement the summation in Python.
For example, the formula for calculating the arithmetic mean of a list
of numbers requires that we first sum all the numbers:
𝜇 = 1
𝑁
𝑁 −1
∑
𝑖=0
𝑥𝑖
If you’ve not seen the symbol∑ before, it’s just shorthand for “add
them all up.”
What’s the connection between summations and loops? The summa-
tion is a loop !
In the formula above, there’s some list of values,𝑥 indexed by𝑖. The
summation says: “Take all the elements,𝑥𝑖 , and sum them.” The sum-
mation portion is just
𝑁 −1
∑
𝑖=0
𝑥𝑖
which is the same as
𝑥0 + 𝑥1 + … + 𝑥𝑁 −2 + 𝑥𝑁 −1
Here’s the loop in Python (assuming we have some list calledx):
s = 0
for e in x:
s = s + e
after which, we’d divide by the number of elements in the list:
mean = s / len(x)
Yes, we could calculate the sum withsum() but what do you thinksum()
does behind the scenes? Exactly this!
7 Why do we use the trailing underscore? T o avoid overwriting the Python built-
in function sum() with a new definition.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 251}","### Loops and summations

#### Introduction

We begin with a tuple of numeric values, t. Since the elements of t are all numeric, we can calculate their sum. First, we create a variable to hold the result of the sum. We call this, sum_. Then, we iterate over all the elements in t, and at each iteration of the loop, we add the value of each element to the variable sum_. Once the loop has terminated, sum_ holds the sum of all the elements of t. Then we print, and compare with the result returned by sum(t) to verify this is indeed the correct result.

In calculations like this we call the variable, sum_, an accumulator (because it accumulates the values of the elements in the iteration).

#### Loops and summations in Python

It is often the case that we have some formula which includes a summation, and we wish to implement the summation in Python.

For example, the formula for calculating the arithmetic mean of a list of numbers requires that we first sum all the numbers:

```
𝜇 = 1
𝑁
𝑁 −1
∑
𝑖=0
𝑥𝑖
```

If you’ve not seen the symbol ∑ before, it’s just shorthand for “add them all up.”

What’s the connection between summations and loops? The summation is a loop!

In the formula above, there’s some list of values, x indexed by i. The summation says: “Take all the elements, xi, and sum them.” The summation portion is just:

```
𝑁 −1
∑
𝑖=0
𝑥𝑖
```

which is the same as:

```
𝑥0 + 𝑥1 + … + 𝑥𝑁 −2 + 𝑥𝑁 −1
```

Here’s the loop in Python (assuming we have some list called x):

```python
s = 0
for e in x:
    s = s + e
```

after which, we’d divide by the number of elements in the list:

```python
mean = s / len(x)
```

Yes, we could calculate the sum with sum() but what do you think sum() does behind the scenes? Exactly this!"
"page_content='238 Loops and iteration
Here’s another. Let’s say we wanted to calculate the sum of the
squares of a list of numbers (which is common enough). Here’s the sum-
mation notation (again using zero indexing):
𝑁 −1
∑
𝑖=0
𝑥2
𝑖
Here’s the loop in Python:
s = 0
for e in x:
s = s + e ** 2
See? The connection between summations and loops is straightforward.
11.10 Products
The same applies to products. Just as we can sum by adding all the
elements in some list or tuple of numerics, we can also take their product
by multiplying. For this, instead of the symbol∑, we use the symbolΠ
(that’s an upper-caseΠ to distinguish it from the constant𝜋).
𝑁 −1
∏
𝑖=0
𝑥𝑖
This is the same as
𝑥0 × 𝑥1 × … × 𝑥𝑁 −2 × 𝑥𝑁 −1
The corresponding loop in Python:
p = 1
for e in x:
p = p * e
Why do we initialize the accumulator to 1? Because that’s the mul-
tiplicative identity. If we set this equal to zero the product would be
zero, because anything multiplied by zero is zero. Anything multiplied
by one is itself. Thus, if calculating a repeated product, we initialize the
accumulator to one.
11.11 enumerate()
We’ve seen how to iterate over the elements of an iterable in afor loop.
for e in lst:
print(e)
Sometimes, however, it’s helpful to have both the element and theindex
of the element at each iteration. One common application requiring an
element and the index of the element is in calculating analternating' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 252}","## Loops and Iteration

### 11.10 Products

Products are similar to sums, except that we use the symbol Π (upper-case pi) instead of ∑. The product of a list or tuple of numbers is the result of multiplying all the elements together:

```
𝑁 −1
∏
𝑖=0
𝑥𝑖
```

This can be expressed as:

```
𝑥0 × 𝑥1 × … × 𝑥𝑁 −2 × 𝑥𝑁 −1
```

In Python, we can calculate a product using a loop:

```python
p = 1
for e in x:
    p = p * e
```

We initialize the accumulator (in this case, `p`) to 1 because it is the multiplicative identity. Multiplying anything by 1 does not change its value, so we start with 1 to ensure that the product is not zero (0 is the additive identity).

### 11.11 enumerate()

The `enumerate()` function can be used to iterate over the elements of an iterable while also returning the index of the element. This is useful when we need to access both the element and its index.

For example, the following code uses `enumerate()` to calculate the alternating sum of a list of numbers:

```python
total = 0
for i, e in enumerate(lst):
    if i % 2 == 0:
        total += e
    else:
        total -= e
```

In this example, `i` represents the index of the current element in the list, and `e` represents the element itself. We use the index to determine whether to add or subtract the element from the total.

## Table of Differences Between Summation and Product

| **Summation (Σ)** | **Product (Π)** |
|---|---|
| Adds all elements of a list or tuple | Multiplies all elements of a list or tuple |
| Typically starts with an accumulator of 0 | Typically starts with an accumulator of 1 |
| Uses the symbol Σ | Uses the symbol Π |
| Example: `∑𝑖=0𝑁−1 𝑥𝑖` | Example: `∏𝑖=0𝑁−1 𝑥𝑖` |"
"page_content='enumerate() 239
sum. Alternating sums appear in analysis, number theory, combinatorics,
many with real-world applications.
An alternating sum is simply a summation where the signs of terms
alternate. Rather than
𝑥0 + 𝑥1 + 𝑥2 + 𝑥3 + 𝑥4 + 𝑥5 + …
where the signs are all positive, an alternating sum would look like this:
𝑥0 − 𝑥1 + 𝑥2 − 𝑥3 + 𝑥4 − 𝑥5 + …
Notice that we alternate addition and subtraction.
There are many ways we could implement this. Here’s one rather
clunky example (which assumes we have a list of numerics namedlst):
alternating_sum = 0
for i in range(len(lst)):
if i % 2: # i is odd, then we subtract
alternating_sum -= lst[i]
else:
alternating_sum += lst[i]
This works. Strictly speaking from a mathematical standpoint it is
correct, but for i in range(len(lst)) and then using i as an index
into lst is considered an “anti-pattern” in Python. (Anti-patterns are
patterns that we should avoid.)
So what’s a programmer to do?
enumerate() to the rescue! Python provides us with a handy built-
in function called enumerate(). This iterates over all elements in some
sequence and yields a tuple of the index and the element at each iteration.
Here’s the same loop implemented usingenumerate():
alternating_sum = 0
for i, e in enumerate(lst):
if i % 2:
alternating_sum -= e
else:
alternating_sum += e
We do away with having to calllen(list) and we do away with indexed
reads fromlst.
Here’s another example, where we wish to perform indexed writes
into a list in a loop. Say we wanted to increment every element in a
list of numeric values by a constant. Here’s how we can do this with
enumerate().
incr = 5
lst = [1, 2, 3, 4]
for i, e in enumerate(lst):' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 253}","## Formatting Instructions

**Metadata:**

* Page: 253
* Line Numbers: 239
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Content Structuring

**Alternating Sums with enumerate()**

#### Introduction

* Alternating sums are summations where signs of terms alternate.
* Example: 𝑥0 − 𝑥1 + 𝑥2 − 𝑥3 + 𝑥4 − 𝑥5 + …

#### Traditional Implementation (Clunky Example)

* Iterates over a list using range(len(lst)) and indexes into the list.
* Considers using i for indexing an ""anti-pattern"" in Python.

```python
alternating_sum = 0
for i in range(len(lst)):
    if i % 2: # i is odd, then we subtract
        alternating_sum -= lst[i]
    else:
        alternating_sum += lst[i]
```

#### Improved Implementation with enumerate()

* enumerate() iterates over a sequence and yields tuples of index and element.
* Eliminates the need for calling len(list) and indexed reads from the list.

```python
alternating_sum = 0
for i, e in enumerate(lst):
    if i % 2:
        alternating_sum -= e
    else:
        alternating_sum += e
```

#### Example: Indexed Writes with enumerate()

* Incrementing each element of a numeric list by a constant.

```python
incr = 5
lst = [1, 2, 3, 4]
for i, e in enumerate(lst):
    lst[i] += incr  # Indexed write
```"
"page_content='240 Loops and iteration
lst[i] = e + incr
That’s it! After this code has run,lst has the value[6, 7, 8, 9].
In many cases, use ofenumerate() leads to cleaner and more readable
code. But how does it work? What, exactly, doesenumerate() do?
If we pass some iterable—say a list, tuple, or string—as an argument
to enumerate() we get a new iterable object back, one of typeenumerate
(this is a new type we haven’t seen before). When we iterate over an
enumerate object, it yieldstuples. The first element of the tuple is the
index of the element in the original iterable. The second element of the
tuple is the element itself.
That’s a lot to digest at first, so here’s an example:
lst = ['a', 'b', 'c', 'd']
for i, element in enumerate(lst):
print(f""The element at index {i} is '{element}'."")
This prints:
The element at index 0 is 'a'.
The element at index 1 is 'b'.
The element at index 2 is 'c'.
The element at index 3 is 'd'.
The syntax that we use above istuple unpacking (which we saw in
an earlier chapter). When usingenumerate() this comes in really handy.
We use one variable to hold the index and one to hold the element.
enumerate() yields a tuple, and we unpack it on the fly to these two
variables.
Let’s dig a little deeper using the Python shell.
>>> lst = ['a', 'b', 'c']
>>> en = enumerate(lst)
>>> type(en) # verify type is `enumerate`
<class 'enumerate'>
>>> for t in en: # iterate `en` without tuple unpacking
... print(t)
...
(0, 'a')
(1, 'b')
(2, 'c')
So you see, what’s yielded at each iteration is a tuple of index and ele-
ment. Pretty cool, huh?
Now that we’ve learned a little aboutenumerate() let’s revisit the
alternating sum example:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 254}","**Metadata**

* **Page Number:** 254
* **Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Loops and Iteration**

**Using enumerate()**

The `enumerate()` function in Python is a built-in function that allows us to iterate over an iterable, such as a list, tuple, or string, and get the index of each element in the iterable as well as the element itself.

**How does enumerate() work?**

When we pass an iterable as an argument to `enumerate()`, we get a new iterable object back, one of type `enumerate`. When we iterate over an `enumerate` object, it yields tuples. The first element of the tuple is the index of the element in the original iterable. The second element of the tuple is the element itself.

**Example**

Consider the following example:

```python
lst = ['a', 'b', 'c', 'd']
for i, element in enumerate(lst):
    print(f""The element at index {i} is '{element}'."")
```

This code will print the following output:

```
The element at index 0 is 'a'.
The element at index 1 is 'b'.
The element at index 2 is 'c'.
The element at index 3 is 'd'.
```

**Tuple unpacking**

The syntax used in the above example is called tuple unpacking. When using `enumerate()`, this comes in really handy. We use one variable to hold the index and one to hold the element. `enumerate()` yields a tuple, and we unpack it on the fly to these two variables.

**Using enumerate() without tuple unpacking**

We can also iterate over an `enumerate` object without using tuple unpacking. To do this, we can use the following syntax:

```python
lst = ['a', 'b', 'c']
en = enumerate(lst)
for t in en:  # iterate en without tuple unpacking
    print(t)
```

This code will print the following output:

```
(0, 'a')
(1, 'b')
(2, 'c')
```

As you can see, what is yielded at each iteration is a tuple of index and element."
"page_content='T racing a loop 241
alternating_sum = 0
for i, e in enumerate(lst):
if i % 2:
alternating_sum -= e
else:
alternating_sum += e
Recall that we’d assumed lst is a previously defined list of numeric
elements. When we passlst as an argument toenumerate() we get an
enumerate object. When we iterate over this object, we get tuples at each
iteration. Here we unpack them to variablesi and e. i is assigned the
index, ande is assigned the element.
If you need both the element and its index, useenumerate().
11.12 T racing a loop
Oftentimes, we wish to understand the behavior of a loop that perhaps
we did not write. One way to suss out a loop is to use a table totrace the
execution of the loop. When we do this, patterns often emerge, and—in
the case of awhile loop—we understand better the termination criteria
for the loop.
Here’s an example. Say you were asked to determine the value of the
variable s after this loop has terminated:
s = 0
for n in range(1, 10):
if n % 2:
# n is odd; 1 is truthy
s = s + 1 / n
else:
# n must be even; 0 is falsey
s = s - 1 / n
Let’s make a table, and fill it out. The first row in the table will
represent our starting point, subsequent rows will capture what goes on
in the loop. In this table, we need to keep track of two things,n and s.
n s
0
Before we enter the loop,s has the value0.
Now consider what values we’ll be iterating over.range(1, 10) will
yield the values 1, 2, 3, 4, 5, 6, 7, 8 and 9. So let’s add these to our table
(without calculating values fors yet).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 255}","### Tracing a loop

**Metadata**

- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 255

**Code**

```python
for i, e in enumerate(lst):
    if i % 2:
        alternating_sum -= e
    else:
        alternating_sum += e
```

### Tracing a loop

**Difference between enumerate() and zip()**

|  **Enumerate**  |  **Zip**  |
|:---|:---|
| Gives indices along with the values | Combines multiple iterables into one |
| Returns an enumerate object, which is an iterator of tuples | Returns a zip object, which is an iterator of tuples |

**Example**

```python
lst = [1, 2, 3, 4, 5]

# Using enumerate()
for index, value in enumerate(lst):
    print(index, value)

# Output
# 0 1
# 1 2
# 2 3
# 3 4
# 4 5

# Using zip()
for index, value in zip(range(len(lst)), lst):
    print(index, value)

# Output
# 0 1
# 1 2
# 2 3
# 3 4
# 4 5
```"
"page_content='242 Loops and iteration
n s
0
1 ?
2 ?
3 ?
4 ?
5 ?
6 ?
7 ?
8 ?
9 ?
Since there are nobreak or return statements, we know we’ll iterate
over all these values ofn.
Now let’s figure out what happens tos within the loop. At the first
iteration, n will be 1, which is odd, so theif branch will execute. This
will add1 / n to s, so at the end of the first iteration,s will equal 1 (1
/ 1). So we write that down in our table:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 256}","**242 Loops and iteration**

**Metadata:**

* Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 256

**n** | **s**
------- | -------
0 | ?
1 | ?
2 | ?
3 | ?
4 | ?
5 | ?
6 | ?
7 | ?
8 | ?
9 | ?

Since there are no break or return statements, we know we’ll iterate over all these values of n.

Now let’s figure out what happens to s within the loop. At the first iteration, n will be 1, which is odd, so the if branch will execute. This will add 1 / n to s, so at the end of the first iteration, s will equal 1 (1 / 1). So we write that down in our table:

**n** | **s**
------- | -------
1 | 1"
"page_content='T racing a loop 243
n s
0
1 1
2 ?
3 ?
4 ?
5 ?
6 ?
7 ?
8 ?
9 ?
Now for the next iteration. At the next iteration,n takes on the value
2. Which branch executes? Well, 2 is even, so theelse branch will execute
and 1/2 will be subtracted froms. Let’s not perform decimal expansion,
so we can write:
n s
0
1 1
2 1 − 1/2
3 ?
4 ?
5 ?
6 ?
7 ?
8 ?
9 ?
Now for the next iteration.n takes on the value 3, 3 is odd, and so
the if branch executes and we add1/3 to s. Again, let’s not perform
decimal expansion (not doing so will help us see the pattern that will
emerge).
n s
0
1 1
2 1 − 1/2
3 1 − 1/2 + 1/3
4 ?
5 ?
6 ?
7 ?
8 ?
9 ?
Now for the next iteration.n takes on the value 4, 4 is even, and so
the else branch executes and we subtract1/4 to s.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 257}","### Tracing a Loop

#### Metadata

> Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
> Page: 257

#### Content

```
n s
0
1 1
2 ?
3 ?
4 ?
5 ?
6 ?
7 ?
8 ?
9 ?
```

Now for the next iteration. At the next iteration, `n` takes on the value 2. Which branch executes? Well, 2 is even, so the `else` branch will execute and `1/2` will be subtracted from `s`. Let's not perform decimal expansion, so we can write:

```
n s
0
1 1
2 1 - 1/2
3 ?
4 ?
5 ?
6 ?
7 ?
8 ?
9 ?
```

Now for the next iteration. `n` takes on the value 3, 3 is odd, and so the `if` branch executes and we add `1/3` to `s`. Again, let's not perform decimal expansion (not doing so will help us see the pattern that will emerge).

```
n s
0
1 1
2 1 - 1/2
3 1 - 1/2 + 1/3
4 ?
5 ?
6 ?
7 ?
8 ?
9 ?
```

Now for the next iteration. `n` takes on the value 4, 4 is even, and so the `else` branch executes and we subtract `1/4` to `s`."
"page_content='244 Loops and iteration
n s
0
1 1
2 1 − 1/2
3 1 − 1/2 + 1/3
4 1 − 1/2 + 1/3 − 1/4
5 ?
6 ?
7 ?
8 ?
9 ?
Do you see where this is heading yet? No? Let’s do a couple more
iterations.
At the next iteration.n takes on the value 5, 5 is odd, and so theif
branch executes and we add1/5 to s. Thenn takes on the value 6, 6 is
even, and so theelse branch executes and we subtract1/6 to s.
n s
0
1 1
2 1 − 1/2
3 1 − 1/2 + 1/3
4 1 − 1/2 + 1/3 − 1/4
5 1 − 1/2 + 1/3 − 1/4 + 1/5
6 1 − 1/2 + 1/3 − 1/4 + 1/5 − 1/6
7 ?
8 ?
9 ?
At this point, it’s likely you see the pattern (if not, just work out two
or three more iterations). This loop is calculating
1 − 1
2 + 1
3 − 1
4 + 1
5 − 1
6 + 1
7 − 1
8 + 1
9
See? At each iteration, we’re checking to see ifn is even or odd. Ifn is
odd, we add1 / n; ifn is even, we subtract1 / n.
We can write this more succinctly using summation notation. This
loop calculates
𝑠 =
𝑛=9
∑
𝑛=1
(−1)𝑛−1 1
𝑛 .
You may ask yourself: What’s up with the(−1)𝑛−1 term? That’s han-
dling the alternating sign!
• What’s (−1)0 ? 1.
• What’s (−1)1 ? -1.
• What’s (−1)2 ? 1.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 258}","**Formatted Output:**

**Loops and Iteration**

**n and s Values**

| n | s |
|---|---|
| 0 | 1 |
| 1 | 1 |
| 2 | 1 - 1/2 |
| 3 | 1 - 1/2 + 1/3  |
| 4 | 1 - 1/2 + 1/3 - 1/4 |
| 5 | 1 - 1/2 + 1/3 - 1/4 + 1/5 |
| 6 | 1 - 1/2 + 1/3 - 1/4 + 1/5 - 1/6 |
| 7 | ? |
| 8 | ? |
| 9 | ? |

**Loop Calculation**

This loop calculates the following sum:

```
s = n=9
∑
n=1
(-1)n-1 1 / n
```

**Alternating Sign Handling**

The alternating sign is handled by the term (-1)n-1:

* (-1)^0 = 1
* (-1)^1 = -1
* (-1)^2 = 1"
"page_content='T racing a loop 245
• What’s (−1)3 ? -1.
• What’s (−1)4 ? 1.
Another example: factorial
In mathematics, thefactorial of a natural number,𝑛 is the product of
all the natural numbers up to and including𝑛. It is written with an
exclamation point, for example,
6 ! = 1 × 2 × 3 × 4 × 5 × 6.
Let’s trace a Python loop which calculates factorial.
n = 6
f = 1
for i in range(2, n + 1):
f = f * i
What does this loop do? At each iteration, it multiplies𝑓 by 𝑖 and
makes this the new𝑓 .
i f
1
2 2
3 6
4 24
5 120
6 720
This calculates factorial,𝑛! for some𝑛. (Yes, there are easier ways.)
Remember:
𝑛 ! =
𝑖=𝑛
∏
𝑖=1
𝑖.
Another example: discrete population growth
birth_rate = 0.05
death_rate = 0.03
pop = 1000 # population
n = 4
for _ in range(n):
pop = int(pop * (1 + birth_rate - death_rate))' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 259}","## Tracing a Loop
### Metadata
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 259

### Example: Negative Exponents
• What's (−1)3? -1.
• What's (−1)4? 1.

### Example: Factorial
In mathematics, the factorial of a natural number, 𝑛, is the product of all the natural numbers up to and including 𝑛. It is written with an exclamation point, for example,
6 ! = 1 × 2 × 3 × 4 × 5 × 6.

Let's trace a Python loop which calculates factorial.
```python
n = 6
f = 1
for i in range(2, n + 1):
    f = f * i
```
**(Explanation) What does this loop do?** At each iteration, it multiplies 𝑓 by 𝑖 and makes this the new 𝑓.

| Iteration | | f |
|:---|:---|:---|
| 1 | | 1 |
| 2 | | 2 |
| 3 | | 6 |
| 4 | | 24 |
| 5 | | 120 |
| 6 | | 720 |

This calculates factorial, 𝑛!, for some 𝑛. (Yes, there are easier ways.)

Remember:
𝑛 ! =
𝑖=𝑛
∏
𝑖=1
𝑖.

### Example: Discrete Population Growth
```python
birth_rate = 0.05
death_rate = 0.03
pop = 1000 # population
n = 4
for _ in range(n):
    pop = int(pop * (1 + birth_rate - death_rate))
```"
"page_content='246 Loops and iteration
_ p
1000
1 1020
2 1040
3 1060
4 1081
Here we don’t use the value of the loop index in our calculations, but
we include it in our table just to keep track of which iteration we’re on. In
this example, we multiply the oldpop by (1 + birth_rate - death_rate)
and make this the newpop at each iteration. This one’s a nuisance to
work out by hand, but with a calculator it’s straightforward.
What is this calculating? This is calculating the size of a population
which starts with 1000 individuals, and which has a birth rate of 5%
and a death rate of 3%. This calculates the population after four time
intervals (for example, years).
Being able to trace through a loop (or any portion of a program) is a
useful skill for a programmer.
11.13 Nested loops
It’s not uncommon that we include one loop within another. This is
callednesting, and such loops are callednested loops.
Let’s say we wanted to print out pairings of contestants in a round
robin chess tournament (a “round robin” tournament is one in which
each player plays each other player). Because in chess white has a slight
advantage over black, it’s fair that each player should play each other
player twice: once as black and once as white.
We’ll represent each game with the names of the players, in pairs,
where the first player listed plays white and the second plays black.
So in a tiny tournament with players Anne, Bojan, Carlos, and Doris,
we’d have the pairings:
Anne (W) vs Bojan (B)
Anne (W) vs Carlos (B)
Anne (W) vs Doris (B)
Bojan (W) vs Anne (B)
Bojan (W) vs Carlos (B)
Bojan (W) vs Doris (B)
Carlos (W) vs Anne (B)
Carlos (W) vs Bojan (B)
Carlos (W) vs Doris (B)
Doris (W) vs Anne (B)
Doris (W) vs Bojan (B)
Doris (W) vs Carlos (B)
(we exclude self-pairings for obvious reasons).
Given the list of players,['Anne', 'Bojan', 'Carlos', 'Doris'], how
could we write code to generate all these pairings? One way is with a
nested loop.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 260}","### Loops and Iteration
**Page: 260**
**Line Numbers: 1000 - 1081**
**Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

Here we don’t use the value of the loop index in our calculations, but
we include it in our table just to keep track of which iteration we’re on. In
this example, we multiply the oldpop by (1 + birth_rate - death_rate)
and make this the newpop at each iteration. This one’s a nuisance to
work out by hand, but with a calculator it’s straightforward.
What is this calculating? This is calculating the size of a population
which starts with 1000 individuals, and which has a birth rate of 5%
and a death rate of 3%. This calculates the population after four time
intervals (for example, years).
Being able to trace through a loop (or any portion of a program) is a
useful skill for a programmer.

### Nested Loops
It’s not uncommon that we include one loop within another. This is
called nesting, and such loops are called nested loops.
Let’s say we wanted to print out pairings of contestants in a round
robin chess tournament (a “round robin” tournament is one in which
each player plays each other player). Because in chess white has a slight
advantage over black, it’s fair that each player should play each other
player twice: once as black and once as white.
We’ll represent each game with the names of the players, in pairs,
where the first player listed plays white and the second plays black.
So in a tiny tournament with players Anne, Bojan, Carlos, and Doris,
we’d have the pairings:
- Anne (W) vs Bojan (B)
- Anne (W) vs Carlos (B)
- Anne (W) vs Doris (B)
- Bojan (W) vs Anne (B)
- Bojan (W) vs Carlos (B)
- Bojan (W) vs Doris (B)
- Carlos (W) vs Anne (B)
- Carlos (W) vs Bojan (B)
- Carlos (W) vs Doris (B)
- Doris (W) vs Anne (B)
- Doris (W) vs Bojan (B)
- Doris (W) vs Carlos (B)
(we exclude self-pairings for obvious reasons).
Given the list of players,['Anne', 'Bojan', 'Carlos', 'Doris'], how
could we write code to generate all these pairings? One way is with a
nested loop."
"page_content='Nested loops 247
players = ['Anne', 'Bojan', 'Carlos', 'Doris']
for white in players:
for black in players:
if white != black: # exclude self-pairings
print(f""{white} (W) vs {black} (B)"")
This code, when executed, prints exactly the list of pairings shown above.
How does this work? The outer loop—for white in players:—iterates
over all players, one at a time: Anne, Bojan, Carlos, and Doris. For each
iteration of the outer loop, there’s an iteration of the inner loop, again:
Anne, Bojan, Carlos, and Doris. If the element assigned towhite in the
outer loop does not equal the element assigned toblack in the inner loop,
we print the pairing. In this way, all possible pairings are generated.
Here’s another example—performing multiplication using a nested
loop. (What follows is ineﬀicient, and perhaps a little silly, but hopefully
it illustrates the point.)
Let’s say we wanted to multiply5 × 7 without using the* operator.
We could do this with a nested loop!
answer = 0
for _ in range(5):
for __ in range(7):
answer += 1
print(answer) # prints 35
How many times does the outer loop execute? Five. How many times
does the inner loop executefor each iteration of the outer loop ? Seven.
How many times do we incrementanswer? 5 × 7 = 35.
Using nested loops to iterate a two-dimensional list
Yikes! What’s a two-dimensional list? A two-dimensional list is just a
list containing other lists!
Let’s say we have the outcome of a game of tic-tac-toe encoded in a
two-dimensional list:
game = [
['X', ' ', 'O'],
['O', 'X', 'O'],
['X', ' ', 'X']
]
To print this information in tabular form we can use a nested loop.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 261}","## Formatting Instructions

### Content Structuring:

- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

### Metadata Inclusion:

- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

### Code Formatting:

- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

Example:
```python
# Python code example
print(""Hello, World!"")
```

### Tabular Format:

- If possible, present differences in tabular format for improved readability.

### Examples:

- Include examples clearly if provided.

### Content Limit:

- Strictly follow the provided content length. Do not modify or shorten the content.

### Metadata:

- source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- page: 261

## Nested Loops

### Iterating a List of Pairs

```python
players = ['Anne', 'Bojan', 'Carlos', 'Doris']
for white in players:
    for black in players:
        if white != black: # exclude self-pairings
            print(f""{white} (W) vs {black} (B)"")
```

This code prints all possible pairings from a list of players, as demonstrated in the example pairings provided.

### Nested Loops for Multiplication

```python
answer = 0
for _ in range(5):
    for __ in range(7):
        answer += 1
print(answer) # prints 35
```

This code performs multiplication without using the * operator by iterating nested loops to increment the answer value.

### Iterating a Two-Dimensional List

```python
game = [
    ['X', ' ', 'O'],
    ['O', 'X', 'O'],
    ['X', ' ', 'X']
]
```

To print the contents of a two-dimensional list in tabular form, nested loops can be used, as seen in the provided code snippet."
"page_content='248 Loops and iteration
for row in game:
for col in row:
print(col, end='')
print()
This prints
X O
OXO
X X
11.14 Stacks and queues
Now that we’ve seen lists and loops, it makes sense to present two fun-
damental data structures: thestack and the queue. You’ll see that im-
plementing these in Python is almost trivial—we use a list for both, and
the only difference ishow we use the list.
Stacks
A stack is what’s called a last in, first out data structure (abbreviated
LIFO and pronounced life-o). It’s a linear data structure where we add
elements to a list at one end, and remove them fromthe same end .
The canonical example for a stack is cafeteria trays. Oftentimes these
are placed on a spring-loaded bed, and cafeteria customers take the tray
off the top and the next tray in the stack is exposed. The first tray to be
put on the stack is the last one to be removed. You’ve likely seen chairs
that can be stacked. The last one on is the first one off. Have you ever
packed a suitcase? What’s gone in last is the first to come out. Have you
ever hit the ‘back’ button in your web browser? Web browsers use a stack
to keep track of the pages you’ve visited. Have you ever usedctrl-z to
undo an edit to a document? Do you have a stack of dishes or bowls in
your cupboard? Guess what? These are all everyday examples of stacks.
We refer to appending an element to a stack aspushing. We refer to
removing an element to a stack aspopping (this should sound familiar).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 262}","## Loops and Iteration

```python
for row in game:
    for col in row:
        print(col, end='')
    print()
```

This prints:

X O
OXO
X X

## Stacks and Queues

### Stacks

A stack is a last-in, first-out (LIFO) data structure. Elements are added to and removed from the same end.

**Examples**:

* Cafeteria trays on a spring-loaded bed
* Stacked chairs
* Packed suitcase
* Web browser's back button
* Undoing edits in a document
* Stack of dishes or bowls in a cupboard

**Operations**:

* Push: Appending an element to a stack
* Pop: Removing an element from a stack

### Queues

A queue is a first-in, first-out (FIFO) data structure. Elements are added to one end and removed from the other end.

**Examples**:

* Line of people waiting for a bus
* Queue of jobs waiting to be printed
* Line of cars at a drive-through

**Operations**:

* Enqueue: Adding an element to a queue
* Dequeue: Removing an element from a queue"
"page_content='Stacks and queues 249
Stacks are very widely used in computer science and stacks are at the
heart of many important algorithms. (In fact, function calls are managed
using a stack!)
The default behavior for a list in Python is to function as a stack.
Yes, that’s right, we get stacks for free! If we append an item to a list,
it’s appended at one end. When we pop an item off a list, by default, it
popsfrom the same end . So the last element in a Python list represents
the top of the stack.
Here’s a quick example:
>>> stack = []
>>> stack.append(""Pitchfork"")
>>> stack.append(""Spotify"")
>>> stack.append(""Netflix"")
>>> stack.append(""Reddit"")
>>> stack.append(""YouTube"")
>>> stack[-1] # see what's on top
YouTube
>>> stack.pop()
YouTube' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 263}","# Stacks and Queues

## Stacks

- **Page Number:** 263
- **Line Numbers:** 1-10
- **Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Definition
Stacks are widely used in computer science and form the foundation of many important algorithms. Function calls are managed using a stack.

### Implementation in Python
The default behavior of lists in Python is to function as stacks. When an item is appended to a list, it is added at one end. When an item is popped from a list, by default, it is removed from the same end. Therefore, the last element in a Python list represents the top of the stack.

### Example
```python
stack = []
stack.append(""Pitchfork"")
stack.append(""Spotify"")
stack.append(""Netflix"")
stack.append(""Reddit"")
stack.append(""YouTube"")
print(stack[-1]) # see what's on top - YouTube
stack.pop()
```"
"page_content='250 Loops and iteration
>>> stack[-1] # see what's on top
Reddit
>>> stack.pop()
Reddit
>>> stack[-1] # see what's on top
Netflix
So you see, implementing a stack in Python is a breeze.
Queues
A queue is a first in, first out linear data structure (FIFO, pronounced
fife-o). The only difference between a stack and a queue is that with a
stack we push and pop items from the same end, and with a queue we
add elements at one end and remove them from the other. That’s the
only difference.
What are some real world examples? The checkout line at a grocery
store—the first one in line is the first to be checked out. Did you ever
wait at a printer because someone had sent a job before you did? That’s
another queue. Cars through a toll booth, wait lists for customer service
chats, and so on—real world examples abound.
The terminology is a little different. We refer to appending an element
to a queue asenqueueing. We refer to removing an element to a queue as
dequeueing. But these are just fancy names for appending and popping.
Like stacks, queues are very widely used in computer science and are
at the heart of many important algorithms.
There’s one little twist needed to turn a list into a queue. With a
queue, we enqueue from one end and dequeue from the other. Like a
stack, we can use append to enqueue. The little twist is that instead of
.pop() which would pop from the same end, we use.pop(0) to pop from
the other end of the list, andvoilà, we have a queue.
Here’s a quick example:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 264}","## Data Structures: Stacks and Queues

### Stacks

**Metadata:**
- Page: 264
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

Stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle. This means that the last element added to the stack is the first one to be removed.

**Python Implementation:**

```python
stack = []

# Push an element to the stack
stack.append(""Reddit"")

# Pop an element from the stack
print(stack.pop())  # Prints ""Reddit""
```

### Queues

Queues follow the First-In-First-Out (FIFO) principle, where the first element added is the first to be removed.

**Terminology:**

- Enqueue: Adding an element to the queue
- Dequeue: Removing an element from the queue

**Python Implementation:**

```python
queue = []

# Enqueue an element to the queue
queue.append(""Netflix"")

# Dequeue an element from the queue
print(queue.pop(0))  # Prints ""Netflix""
```

### Differences between Stacks and Queues

| Feature | Stack | Queue |
|---|---|---|
| Principle | Last-In-First-Out (LIFO) | First-In-First-Out (FIFO) |
| Operations | Push, Pop | Enqueue, Dequeue |
| Real-world examples | Printer queue, call center | Checkout line, traffic jam |"
"page_content='A deeper dive into iteration in Python 251
queue = []
>>> queue.append(""Fred"") # Fred is first in line
>>> queue.append(""Mary"") # Mary is next in line
>>> queue.append(""Claire"") # Claire ie behind Mary
>>> queue.pop(0) # Fred has been served
'Fred'
>>> queue[0] # now see who's in front
'Mary'
>>> queue.append(""Gladys"") # Gladys gets in line
>>> queue.pop(0) # Mary's been served
'Mary'
So you see, a list can be used as a stack or a queue. Usually, stacks
and queues are used within a loop. We’ll see a little more about this in
a later chapter.
11.15 A deeper dive into iteration in Python
What follows is a bit more detail about iterables and iteration in Python.
You can skip this section entirely if you wish. This is presented here for
thesolepurposeofdemonstratingwhatgoeson“behindthescenes”when
we iterate over some object in Python. With that said, let’s start with
the case of a list (it works the same with a tuple or any other iterable).
>>> m = ['Greninja', 'Lucario', 'Mimikyu', 'Charizard']
When we ask Python to iterate over some iterable, it calls the function
iter() which returns aniterator for the iterable (in this case a list).
>>> iterator = iter(m)
>>> type(iterator)
<class 'list_iterator'>
The way iterators work is that Python keeps asking “give me the next
member”, until the iterator is exhausted. This is done (behind the scenes)
by calls to the iterator’s__next__() method.
>>> iterator.__next__()
'Greninja'
>>> iterator.__next__()
'Lucario'
>>> iterator.__next__()
'Mimikyu'
>>> iterator.__next__()
'Charizard'
Now what happens if we call__next__() one more time?
We get aStopIteration error' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 265}","**A Deeper Dive into Iteration in Python**

**Metadata**
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 265

**11.15 A Deeper Dive into Iteration in Python**

**Iterables and Iteration**

- Iterables are objects that can be iterated over, meaning that their elements can be accessed one at a time.
- Python's built-in iter() function returns an iterator for an iterable.
- Iterators are objects that have a __next__() method, which returns the next element in the iterable.

**Example: Iterating Over a List**

```python
m = ['Greninja', 'Lucario', 'Mimikyu', 'Charizard']
iterator = iter(m)

while True:
    try:
        element = iterator.__next__()
        print(element)
    except StopIteration:
        break
```

**Output:**

```
Greninja
Lucario
Mimikyu
Charizard
```

**Difference Between Stacks and Queues**

| Data Structure | First-In, First-Out (FIFO) | Last-In, First-Out (LIFO) |
|---|---|---|
| **Stack** | No | Yes |
| **Queue** | Yes | No |

**Example of a Stack**

```python
stack = []
stack.append(""Fred"")
stack.append(""Mary"")
stack.append(""Claire"")
stack.pop()  # Claire has been served
```

**Example of a Queue**

```python
queue = []
queue.append(""Fred"")
queue.append(""Mary"")
queue.append(""Claire"")
queue.pop(0)  # Fred has been served
```"
"page_content='252 Loops and iteration
>>> iterator.__next__()
Traceback (most recent call last):
File ""/Library/.../code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
StopIteration
Again, behind the scenes, when iterating through an iterable, Python
will get an iterator for that object, and then call __next__() until a
StopIteration error occurs, and then it stops iterating.
What about range()?
As we’ve seen earlier,range() returns an object of therange type.
>>> r = range(5)
>>> type(r)
<class 'range'>
But ranges are iterable, so they work with the same functioniter(r),
and the resulting iterator will have__next__() as a method.
>>> iterator = iter(r)
>>> iterator.__next__()
0
>>> iterator.__next__()
1
>>> iterator.__next__()
2
>>> iterator.__next__()
3
>>> iterator.__next__()
4
>>> iterator.__next__()
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
StopIteration
When Python iterates over a sequence (list, tuple, string) or arange
object, it first creates an iterator, then iterates the iterator.
It’s important to note thatenumerate objects are themselves iterators.
This is why an enumerate object can be iterated only once . Python does
not create a new iterator for these objects automatically, as it does when
iterating sequences orrange objects. (We’ll see something similar later
on when we get tocsv.reader objects, but that’s for another time.)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 266}","## Loops and Iteration

### Iterators

When iterating through an iterable, Python gets an iterator for that object, then calls `__next__()` until a `StopIteration` error occurs, and then it stops iterating.

**Example:**

```python
>>> iterator.__next__()
Traceback (most recent call last):
File ""/Library/.../code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
StopIteration
```

### Ranges

`range()` returns an object of the `range` type. Ranges are iterable, so they work with the same function `iter(r)`, and the resulting iterator will have `__next__()` as a method.

**Example:**

```python
>>> r = range(5)
>>> type(r)
<class 'range'>
>>> iterator = iter(r)
>>> iterator.__next__()
0
>>> iterator.__next__()
1
>>> iterator.__next__()
2
>>> iterator.__next__()
3
>>> iterator.__next__()
4
>>> iterator.__next__()
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
StopIteration
```

### Python's Iteration Process

When Python iterates over a sequence (list, tuple, string) or a `range` object, it first creates an iterator, then iterates the iterator.

### Enumerate Objects

Enumerate objects are themselves iterators. This is why an enumerate object can be iterated only once. Python does not create a new iterator for these objects automatically, as it does when iterating sequences or `range` objects."
"page_content='Exercises 253
11.16 Exercises
Exercise 01
Write awhile loop that adds all numbers from one to ten. Do not use
for. What is the sum? Check your work. (See: section 11.2)
Exercise 02
Without a loop but usingrange(), calculate the sum of all numbers from
one to ten. Check your work. (See: section 11.5)
Exercise 03
a. Write afor loop that prints the numbers 0, 2, 4, 6, 8, each on a
separate line.
b. Write a for loop that prints some sentence of your choosing five
times.
Exercise 04
Write afor loop that calculates the sum of the squares of some arbitrary
list of numerics, nameddata (make up your own list, but be sure that it
has at least four elements).
For example, if the list of numerics were[2, 9, 5, -1] , the result
would be 111, because
2 × 2 = 4
9 × 9 = 81
5 × 5 = 25
−1 × −1 = 1
and 4 + 81 + 25 + 1 = 111.
(See: section 11.6)
Exercise 05
Write afor loop that iterates the list
lst = [23, 7, 42, 17, 9, 38, 28, 31, 49, 22, 5, 26, 15]
and prints theparity sum of the list. That is, if the number is even, add
it to the total; if the number is odd, subtract it from the total.
What is the sum? Check your work. Double-check your work.
(See: section 11.11)
Exercise 06
Write afor loop which iterates over a string and capitalizes every other
letter. For example, with the string “Rumplestiltskin”, the result should
be “RuMpLeStIlTsKiN”. With the string “HELLO WORLD!”, the result' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 267}","**Exercises 253**

**11.16 Exercises**

**Exercise 01**

**Write awhile loop that adds all numbers from one to ten. Do not use
for. What is the sum? Check your work. (See: section 11.2)**

```python
# Python code example
sum = 0
n = 1
while n <= 10:
    sum += n
    n += 1
print(sum)  # Output: 55
```

**Exercise 02**

**Without a loop but using range(), calculate the sum of all numbers from
one to ten. Check your work. (See: section 11.5)**

```python
# Python code example
print(sum(range(1, 11)))  # Output: 55
```

**Exercise 03**

**a. Write a for loop that prints the numbers 0, 2, 4, 6, 8, each on a
separate line.**

```python
# Python code example
for i in range(0, 9, 2):
    print(i)
# Output:
# 0
# 2
# 4
# 6
# 8
```

**b. Write a for loop that prints some sentence of your choosing five times.**

```python
# Python code example
sentence = ""Hello, world!""
for i in range(5):
    print(sentence)
# Output:
# Hello, world!
# Hello, world!
# Hello, world!
# Hello, world!
# Hello, world!
```

**Exercise 04**

**Write a for loop that calculates the sum of the squares of some arbitrary
list of numerics, named data (make up your own list, but be sure that it
has at least four elements).**

**For example, if the list of numerics were [2, 9, 5, -1] , the result
would be 111, because**

```python
# Python code example
data = [2, 9, 5, -1]
sum_of_squares = 0
for number in data:
    sum_of_squares += number ** 2
print(sum_of_squares)  # Output: 111
```

**Exercise 05**

**Write a for loop that iterates the list**

```
lst = [23, 7, 42, 17, 9, 38, 28, 31, 49, 22, 5, 26, 15]
```

**and prints the parity sum of the list. That is, if the number is even, add
it to the total; if the number is odd, subtract it from the total.**

**What is the sum? Check your work. Double-check your work.**

```python
# Python code example
lst = [23, 7, 42, 17, 9, 38, 28, 31, 49, 22, 5, 26, 15]
parity_sum = 0
for number in lst:
    if number % 2 == 0:
        parity_sum += number
    else:
        parity_sum -= number
print(parity_sum)  # Output: 0
```

**Exercise 06**

**Write a for loop which iterates over a string and capitalizes every other
letter. For example, with the string “Rumplestiltskin”, the result should
be “RuMpLeStIlTsKiN”. With the string “HELLO WORLD!”, the result'**

```python
# Python code example
string = ""Rumplestiltskin""
capitalized_string = """"
for i, letter in enumerate(string):
    if i % 2 == 0:
        capitalized_string += letter.upper()
    else:
        capitalized_string += letter.lower()
print(capitalized_string)  # Output: RuMpLeStIlTsKiN
```"
"page_content='254 Loops and iteration
should be “HeLlO WoRlD!” With the string “123456789”, the result
should be “123456789”.
What happens if we capitalize a space or punctuation or number?
Exercise 07
Create some list of your own choosing. Your list should contain at least
five elements. Once you’ve created your list, write a loop that uses
enumerate() to iterate over your list, yielding both index and element
at each iteration. Print the results indicating the element and its index.
For example, given the list
albums = ['Rid Of Me', 'Spiderland', 'This Stupid World',
'Icky Thump', 'Painless', 'New Long Leg""]
your program would print
""Rid Of Me"" is at index 0.
""Spiderland"" is at index 1.
""This Stupid World"" is at index 2.
""Icky Thump"" is at index 3.
""Painless"" is at index 4.
""New Long Leg"" is at index 5.
Exercise 08 (challenge!)
The Fibonacci sequence is a sequence of integers, starting with 0 and 1,
such that after these first two, each successive number in the sequence is
the sum of the previous two numbers. So, for example, the next number
is 1 because0 + 1 = 1 , the number after that is 2 because1 + 1 = 2 ,
the number after that is 3 because1 + 2 = 3, the number after that is 5
because 2 + 3 = 5, and so on.
Write a program that uses a loop (not recursion) to calculate the first
𝑛 terms of the Fibonacci sequence. Start with this list:
fibos = [0, 1]
You may use one call toinput(), oneif statement, and onewhile loop.
You may not use any other loops. You may not use recursion. Examples:
Enter n for the first n terms in the Fibonacci sequence: 7
[0, 1, 1, 2, 3, 5, 8]
Enter n for the first n terms in the Fibonacci sequence: 10
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 268}","## Loops and Iteration

### Capitalization

Capitalization converts a string to uppercase. If the string contains any lowercase letters, they will be converted to uppercase. If the string contains any uppercase letters, spaces, punctuation, or numbers, they will remain the same.

For example, with the string ""HeLlO WoRlD!"", the result should be “HELLOWORLD!”. With the string “123456789”, the result should be “123456789”.

### Exercise 07

Create some list of your own choosing. Your list should contain at least five elements. Once you’ve created your list, write a loop that uses enumerate() to iterate over your list, yielding both index and element at each iteration. Print the results indicating the element and its index.

For example, given the list
```
albums = ['Rid Of Me', 'Spiderland', 'This Stupid World', 'Icky Thump', 'Painless', 'New Long Leg""]
```
your program would print
```
""Rid Of Me"" is at index 0.
""Spiderland"" is at index 1.
""This Stupid World"" is at index 2.
""Icky Thump"" is at index 3.
""Painless"" is at index 4.
""New Long Leg"" is at index 5.
```

### Exercise 08 (challenge!)

The Fibonacci sequence is a sequence of integers, starting with 0 and 1, such that after these first two, each successive number in the sequence is the sum of the previous two numbers. So, for example, the next number is 1 because 0 + 1 = 1, the number after that is 2 because 1 + 1 = 2, the number after that is 3 because 1 + 2 = 3, the number after that is 5 because 2 + 3 = 5, and so on.

Write a program that uses a loop (not recursion) to calculate the first 𝑛 terms of the Fibonacci sequence. Start with this list:
```
fibos = [0, 1]
```
You may use one call to input(), one if statement, and one while loop. You may not use any other loops. You may not use recursion.

Examples:
```
Enter n for the first n terms in the Fibonacci sequence: 7
[0, 1, 1, 2, 3, 5, 8]
Enter n for the first n terms in the Fibonacci sequence: 10
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]'
```"
"page_content='Exercises 255
Enter n for the first n terms in the Fibonacci sequence: 50
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,
610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657,
46368, 75025, 121393, 196418, 317811, 514229, 832040,
1346269, 2178309, 3524578, 5702887, 9227465, 14930352,
24157817, 39088169, 63245986, 102334155, 165580141,
267914296, 433494437, 701408733, 1134903170, 1836311903,
2971215073, 4807526976, 7778742049]
Exercise 09
Write a function that takes a list as an argument and modifies the list in
a loop. How you modify the list is up to you, but you should use at least
two different list methods. Include code that calls the function, passing
in a list variable, and then demonstrates that the list has changed, once
the function has returned.
Exercise 10
Write a function which takes two integers,𝑛 and 𝑘 as arguments, and
produces a list of all odd multiples of𝑘 between 1 and 𝑛. E.g., given
input 𝑛 = 100 and 𝑘 = 7, the function should return
[7, 21, 35, 49, 63, 77, 91]
Exercise 11 (challenge!)
The modulo operator partitions the integers into equivalence classes
based on theirresidues (remainders) with respect to some modulus. For
example, with a modulus of three, the integers are partitioned into three
equivalence classes: those for which𝑛 mod 3 ≡ 0 , 𝑛 mod 3 ≡ 1 , and𝑛
mod 3 ≡ 2.
Write and test a function which takes as arguments an arbitrary list
of integers and some modulus, 𝑛, and returns a tuple containing the
count of elements in the list in each equivalence class, where the index
of the tuple elements corresponds to the residue. So, for example, if the
input list were[1, 5, 8, 2, 11, 15, 9] and the modulus were 3, then
the function should return the tuple(2, 1, 4) , because there are two
elements with residue 0 (15 and 9), one element with residue 1, (1), and
four elements with residue 2 (5, 8, 2, 11).
Notice also that if the modulus is𝑛, the value returned will be an
𝑛-tuple.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 269}","## Exercises

**Exercise 2:**
### Fibonacci Sequence

```python
# Python code to generate and print the Fibonacci sequence
n = int(input(""Enter n for the first n terms in the Fibonacci sequence: ""))
fibs = [0, 1]
while len(fibs) < n:
    next_term = fibs[-1] + fibs[-2]
    fibs.append(next_term)
print(fibs)
```

**Output:**
```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,
610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657,
46368, 75025, 121393, 196418, 317811, 514229, 832040,
1346269, 2178309, 3524578, 5702887, 9227465, 14930352,
24157817, 39088169, 63245986, 102334155, 165580141,
267914296, 433494437, 701408733, 1134903170, 1836311903,
2971215073, 4807526976, 7778742049]
```

**Exercise 9:**
### Modifying a List

```python
# Python code to demonstrate modifying a list using list methods

def modify_list(lst):
    # 1. Remove the first element of the list
    lst.pop(0)
    # 2. Append a new element to the end of the list
    lst.append(100)
    # 3. Sort the list in ascending order
    lst.sort()

my_list = [1, 2, 3, 4, 5]
print(""Original list:"", my_list)

modify_list(my_list)
print(""Modified list:"", my_list)
```

**Output:**
```
Original list: [1, 2, 3, 4, 5]
Modified list: [2, 3, 4, 5, 100]
```

**Exercise 10:**
### Odd Multiples of a Number

```python
# Python code to generate a list of odd multiples of a given number

def odd_multiples(n, k):
    odd_multiples = []
    for i in range(1, n+1):
        if i % k == 1:
            odd_multiples.append(i)
    return odd_multiples

n = int(input(""Enter the number to find odd multiples of: ""))
k = int(input(""Enter the odd multiple to check for: ""))

odd_multiples = odd_multiples(n, k)
print(f""Odd multiples of {k} between 1 and {n}: {odd_multiples}"")
```

**Output:**
```
Enter the number to find odd multiples of: 100
Enter the odd multiple to check for: 7
Odd multiples of 7 between 1 and 100: [7, 21, 35, 49, 63, 77, 91]
```

**Exercise 11 (Challenge):**
### Equivalence Classes in Modulo Arithmetic

```python
# Python code to count the elements in a list that belong to each equivalence class in modulo arithmetic

def equivalence_classes(lst, n):
    """"""
    Counts the elements in a list that belong to each equivalence class in modulo arithmetic.

    Args:
        lst: The list of integers to be analyzed.
        n: The modulus to use.

    Returns:
        A tuple containing the counts of elements in each equivalence class.
    """"""
    counts = [0] * n
    for x in lst:
        counts[x % n] += 1
    return tuple(counts)

lst = [1, 5, 8, 2, 11, 15, 9]
n = 3

equivalence_classes = equivalence_classes(lst, n)
print(f""Equivalence classes for modulus {n}: {equivalence_classes}"")
```

**Output:**
```
Equivalence classes for modulus 3: (2, 1, 4)
```"
"page_content='256 Loops and iteration
Exercise 12
Use a Python list as a stack. Start with an empty list:
stack = []
1. push ‘teal’
2. push ‘magenta’
3. push ‘yellow’
4. push ‘viridian’
5. pop
6. pop
7. push ‘amber’
8. pop
9. pop
10. push ‘vermilion’
Print your stack. Your stack should look like this
['teal', 'vermilion']
If it does not, start over and try again.
See: Section 11.14 Stacks and queues
Exercise 13
At the Python shell, create a list and use it as a queue. At the start, the
queue should be empty.
>>> queue = []
Now perform the following operations:
1. enqueue ‘red’
2. enqueue ‘blue’
3. dequeue
4. enqueue ‘green’
5. dequeue
6. enqueue ‘ochre’
7. enqueue ‘cyan’
8. enqueue ‘umber’
9. dequeue
10. enqueue ‘mauve’
Now, print your queue. Your queue should look like this:
['ochre', 'cyan', 'umber', 'mauve']
If it doesn’t, start over and try again.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 270}","**Data Structures: Stacks and Queues**

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 270

### Stacks

**Exercise 12:**

* **Steps:**
    1. Create an empty stack using a Python list.
    2. Push 'teal' onto the stack.
    3. Push 'magenta' onto the stack.
    4. Push 'yellow' onto the stack.
    5. Push 'viridian' onto the stack.
    6. Pop an element from the stack.
    7. Pop an element from the stack.
    8. Push 'amber' onto the stack.
    9. Pop an element from the stack.
    10. Pop an element from the stack.
    11. Push 'vermilion' onto the stack.
* **Expected Output:**
    ['teal', 'vermilion']

### Queues

**Exercise 13:**

* **Steps:**
    1. Create an empty queue using a Python list.
    2. Enqueue 'red' into the queue.
    3. Enqueue 'blue' into the queue.
    4. Dequeue an element from the queue.
    5. Enqueue 'green' into the queue.
    6. Dequeue an element from the queue.
    7. Enqueue 'ochre' into the queue.
    8. Enqueue 'cyan' into the queue.
    9. Enqueue 'umber' into the queue.
    10. Dequeue an element from the queue.
    11. Enqueue 'mauve' into the queue.
* **Expected Output:**
    ['ochre', 'cyan', 'umber', 'mauve']"
"page_content='Chapter 12
Randomness, games, and
simulations
Here we will learn about some of the abundant uses of randomness. Ran-
domness is useful in games (shuffle a deck, roll a die), but it’s also useful
for modeling and simulating a staggering variety of real world processes.
Learning objectives
• You will understand why it is useful to be able to generate pseudo-
random numbers or make pseudo-random choices in a computer
program.
• Youwilllearnhowtousesomeofthemostcommonly-usedmethods
from Python’srandom module, including
– random.random() to generate a pseudo-random a floating point
number in the interval[0.0, 1.0),
– random.randint() to generate a pseudo-random integer in a
specified interval,
– random.choice() tomakeapseudo-randomselectionofanitem
from an iterable object, and
– random.shuffle() to shuffle a list.
• You will understand the role of a seed in the generation of
pseudo-random numbers, and understand how setting a seed
makes predictable the behavior of a program incorporating pseudo-
randomness.
T erms introduced
• Monte Carlo simulation
• pseudo-random
• random module
• random walk
• seed
257' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 271}","## Chapter 12: Randomness, Games, and Simulations

### Metadata

* Page: 271
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Learning Objectives

* Comprehend the importance of generating pseudo-random numbers and making pseudo-random choices in computer programs.
* Develop proficiency in using common methods from Python's `random` module, including:
    * `random.random()`: Generates a pseudo-random floating-point number in the interval `[0.0, 1.0)`
    * `random.randint()`: Generates a pseudo-random integer in a specified interval
    * `random.choice()`: Selects a pseudo-random item from an iterable object
    * `random.shuffle()`: Shuffles a list
* Understand the concept of a seed in pseudo-random number generation and its impact on program behavior.

### Key Terms Introduced

* Monte Carlo simulation
* Pseudo-random
* Random module
* Random walk
* Seed"
"page_content='258 Randomness, games, and simulations
12.1 The random module
Consider all the games you’ve ever played that involve throwing dice or
shuffling a deck of cards. Games like this are fun in part because of the
element of chance. We don’t know how many dots will come up when we
throw the dice. We don’t know what the next card to be dealt will be. If
we knew all these things in advance, such games would be boring!
Outside of games, there’s a tremendous variety of applications which
require randomness.
Simulations of all kinds make use of this—for example, modeling bio-
logical or ecological phenomena, statistical mechanics and physics, phys-
ical chemistry, modeling social or economic behavior of humans, opera-
tions research, and climate modeling. Randomness is also used in cryp-
tography, artificial intelligence, and many other domains. For example,
the Monte Carlo method (named after the famous casino in Monaco) is
a widely used technique which repeatedly samples data from a random
distribution, and has been used in science and industry since the 1940s.
Python’s random module gives us many methods for generating “ran-
dom” numbers or making “random” choices. These come in handy when
we want to implement a game of chance (or game with some chance
element) or simulation.
But think: how would you write code that simulates the throw of a
die or picks a “random” number between, say, one and ten? Really. Stop
for a minute and give it some thought. This is where therandom module
comes in. We can use it to simulate such events.
I put “random” in quotation marks (above) because true randomness
cannot be calculated. What the Python random module does is generate
pseudo-random numbers and makepseudo-random choices. What’s the
difference? To the casual observer, there is no difference. However, deep
down there are deterministic processes behind the generation of these
pseudo-random numbers and making pseudo-random choices.
That sounds rather complicated, but using therandom module isn’t.
If we wish to use therandom module, we first import it (just like we’ve
been doing with themath module).
import random
Now we can use methods within therandom module.
random.choice()
The random.choice() method takes an iterable and returns a pseudo-
random choice from among the elements of the iterable. This is useful
when selecting from a fixed set of possibilities. For example:
>>> import random
>>> random.choice(['heads', 'tails'])
'tails'
Each time we callchoice this way, it will make a pseudo-random choice
between ‘heads’ and ‘tails’, thus simulating a coin toss.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 272}","**Metadata**

* Page Number: 272
* Line Number: 12.1 - 12.54
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Randomness, Games, and Simulations**

**The random Module**

**Introduction to Randomness**

Games like dice and card shuffling rely on the element of chance to create excitement. Beyond games, randomness finds applications in simulations (e.g., modeling biological phenomena), cryptography, artificial intelligence, and more.

**Python's random Module**

Python provides the random module to generate pseudo-random numbers and make pseudo-random choices. These are used in games with chance elements and simulations.

**Pseudo-Randomness vs. True Randomness**

True randomness is impossible to compute, so the random module generates pseudo-random numbers and choices, which appear random to casual observers.

**Importing the random Module**

To use the random module, import it first:

```python
import random
```

**random.choice() Method**

The random.choice() method takes an iterable and returns a pseudo-random choice from its elements. This is useful when selecting from a fixed set of possibilities, like simulating a coin toss:

```python
>>> import random
>>> random.choice(['heads', 'tails'])
'tails'
```"
"page_content='The random module 259
This works with any iterable.
>>> random.choice((1, 2, 3, 4, 5))
2
>>> random.choice(['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6',
... '5', '4', '3', '2'])
'7'
>>> random.choice(['rock', 'paper', 'scissors'])
'rock'
>>> random.choice(range(10))
4
It even works with a string as an iterable!
>>> random.choice(""random"")
'm'
Comprehension check
1. How could we userandom.choice() to simulate the throw of a six-
sided die?
2. Howcouldweuse random.choice() tosimulatethethrowofatwelve-
sided die?
Using random.choice() for a random walk
The random walk is a process whereby we take steps along the number
line in a positive or negative direction, at random.
Starting at 0, and taking five steps, choosing -1 or +1 at random, a
walk might proceed like this: 0, -1, 0, 1, 2, 1. At each step, we move one
to the left (negative) or one to the right (positive). In a walk like this
there are2𝑛 possible outcomes, where𝑛 is the number of steps taken.
Here’s a loop which implements such a walk:
>>> position = 0
>>> for _ in range(5):
... position = position + random.choice([-1, 1])
...
random.random()
This method returns the next pseudo-random floating point number in
the interval[0.0, 1.0). Note that the interval given here is in mathematical
notation and is not Python syntax. Example:
x = random.random()
Here x is assigned a pseudo-random value greater than or equal to zero,
and strictly less than 1.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 273}","### Metadata

- Source: *C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf*
- Page: 273

### The random Module

The `random` module provides various functions to generate pseudo-random numbers.

### `random.choice()`

- **Description:** Selects a random element from a non-empty sequence.
- **Usage:** `random.choice(sequence)`
- **Parameters:**
  - `sequence`: Any iterable sequence (e.g., list, tuple, string)

### Examples

```
>>> random.choice((1, 2, 3, 4, 5))
2
>>> random.choice(['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6',
... '5', '4', '3', '2'])
'7'
>>> random.choice(['rock', 'paper', 'scissors'])
'rock'
>>> random.choice(range(10))
4
>>> random.choice(""random"")
'm'
```

### Comprehension Check

1. **Simulating a Six-Sided Die:**
   ```python
   die = random.choice([1, 2, 3, 4, 5, 6])
   ```

2. **Simulating a Twelve-Sided Die:**
   ```python
   die = random.choice(range(1, 13))
   ```

### `random.random()`

- **Description:** Generates a pseudo-random floating-point number between 0.0 and 1.0 (exclusive).
- **Usage:** `random.random()`
- **Parameters:** None
- **Returns:** A float in the range [0.0, 1.0)

### Example

```python
x = random.random()
```

In this example, `x` will be assigned a pseudo-random value greater than or equal to zero but strictly less than 1."
"page_content='260 Randomness, games, and simulations
What use is this? We can use this to simulate events with a certain
probability,𝑝. Recall that probabilities are in the interval[0.0, 1.0], where
0.0 represents impossibility, and 1.0 represents certainty. Anything be-
tween these two extremes is interesting.
Comprehension check
1. How would we generate a pseudo-random number in the interval
[0.0, 10.0)?
Using random.random() to simulate the toss of a biased coin
Let’s say we want to simulate the toss of a slightly biased coin—one
that’s rigged to come up heads 53% of the time. Here’s how we’d go
about it.
if random.random() < 0.53:
print(""Heads!"")
else:
print(""Tails!"")
This approach is commonly used in simulations in physical or biological
modeling, economics, and games.
What if you wanted to choose a pseudo-random floating point number
in the interval[−100.0, 100.0). No big deal. Rememberrandom.random()
gives us a pseudo-random number in the interval[0.0, 1.0), so to get a
value in the desired interval we simply subtract 0.5 (so the distribution
is centered at zero) and multiply by 200 (to “stretch” the result).
x = (random.random() - 0.5) * 200
Comprehension check
1. How would we simulate an event which occurs with a probability
of 1/4?
2. How would we generate a pseudo-random floating point number in
the interval[−2.0, 2.0)?
random.randint()
As noted, we can userandom.choice() to choose objects from some iter-
able. If we wanted to pick a number from one to ten, we could use
n = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
Thisiscorrect,butitcangetcumbersome.Whatifwewantedtochoosea
pseudo-random number between 1 and 1000? In cases like this, it’s better
to userandom.randint(). This method takes two arguments representing' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 274}","### Randomness, Games, and Simulations

#### What use is this?

We can use this to simulate events with a certain probability, 𝑝. Recall that probabilities are in the interval [0.0, 1.0], where 0.0 represents impossibility, and 1.0 represents certainty. Anything between these two extremes is interesting.

#### Comprehension check

1. How would we generate a pseudo-random number in the interval [0.0, 10.0)?

#### Using random.random() to simulate the toss of a biased coin

Let’s say we want to simulate the toss of a slightly biased coin—one that’s rigged to come up heads 53% of the time. Here’s how we’d go about it:

```python
if random.random() < 0.53:
    print(""Heads!"")
else:
    print(""Tails!"")
```

This approach is commonly used in simulations in physical or biological modeling, economics, and games.

#### What if you wanted to choose a pseudo-random floating point number in the interval [−100.0, 100.0).

No big deal. Remember random.random() gives us a pseudo-random number in the interval [0.0, 1.0), so to get a value in the desired interval we simply subtract 0.5 (so the distribution is centered at zero) and multiply by 200 (to “stretch” the result).

```python
x = (random.random() - 0.5) * 200
```

#### Comprehension check

1. How would we simulate an event which occurs with a probability of 1/4?
2. How would we generate a pseudo-random floating point number in the interval [−2.0, 2.0)?

#### random.randint()

As noted, we can use random.choice() to choose objects from some iterable. If we wanted to pick a number from one to ten, we could use

```python
n = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
```

This is correct, but it can get cumbersome. What if we wanted to choose a pseudo-random number between 1 and 1000? In cases like this, it’s better to use random. randint(). This method takes two arguments representing the lower and upper bounds of the random integer to be generated.

```python
n = random.randint(1, 1000)
```"
"page_content='Pseudo-randomness in more detail 261
the upper and lower bound (inclusive). Thus, to pick a pseudo-random
integer between 1 and 1000:
n = random.randint(1, 1000)
Now we have,𝑛, such that𝑛 is an integer,𝑛 ≥ 1, and𝑛 ≤ 1000.
random.shuffle()
Sometimes, we want to shuffle values, for example a deck of cards.
random.shuffle() will shuffle a mutable sequence (for example, a list)
in place. Example:
cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10',
'J', 'Q', 'K']
random.shuffle(cards)
Now the cards are shuffled.
Comprehension check
1. random.shuffle() works with a list. Why wouldn’t it work with a
tuple? Would it work with a string?
2. Where’s the bug in this code?
>>> import random
>>> cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9',
... '10', 'J', 'Q', 'K']
>>> cards = random.shuffle(cards)
>>> print(cards)
None
>>>
Other random methods
The random module includes many other methods which include gen-
erating random numbers sampled from various distributions, and other
nifty tools!
If you are so inclined—especially if you have some probability theory
and statistics under your belt—see:random — Generate pseudo-random
numbers: https://docs.python.org/3/library/random.html
12.2 Pseudo-randomness in more detail
I mentioned earlier that the numbers generated and choices made by the
random module aren’t truly random, they’re pseudo-random, but what
does this mean?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 275}","### Pseudo-Randomness in More Detail

**Metadata**
* Source: 'C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf'
* Page: 275

**Content Structuring**

**Choosing a Pseudo-Random Integer**

The `random.randint()` method selects an integer from a specified range, including both endpoints. For instance, to choose a number between 1 and 1000:

```python
n = random.randint(1, 1000)
```

This ensures that `n` is an integer between 1 and 1000, inclusive.

**Shuffling Values**

The `random.shuffle()` function swaps elements within a mutable sequence (e.g., a list) in place. For example:

```python
cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
random.shuffle(cards)
```

After this code runs, the order of elements in `cards` is randomized.

**Comprehension Check**

1. `random.shuffle()` is not applicable to tuples because tuples are immutable. It cannot operate on immutable sequences. However, it can operate on strings, as strings are mutable in Python.
2. The code contains an error because `random.shuffle()` returns `None`, not the shuffled list. The correct code is:

```python
cards = random.shuffle(cards)
```

**Other Random Methods**

Beyond `random.randint()` and `random.shuffle()`, the `random` module provides various other methods for generating pseudo-random numbers from specific distributions, as well as other useful functions. For more information, refer to the documentation:
https://docs.python.org/3/library/random.html"
"page_content='262 Randomness, games, and simulations
Computers compute. They can’t pluck a random number out of thin
air. You might think that computation by your computer is deterministic
and you’d be right.
So how do we use a deterministic computing device to produce some-
thing that appears random, something that has all the statistical prop-
erties we need?
Deep down, therandom module makes use of an algorithm called the
Mersenne twister (what a lovely name for an algorithm!).1 You don’t
need to understand how this algorithm works, but it’s useful to under-
stand that it does require an input used as a starting point for its calcu-
lations. This input is called aseed, and from this, the algorithm produces
a sequence of pseudo-random numbers. At each request, we get a new
pseudo-random number.
>>> import random
>>> random.random()
0.16558225561225903
>>> random.random()
0.20717009610984627
>>> random.random()
0.2577426786448077
>>> random.random()
0.5173312574262303
>>>
Try this out. (The sequence of numbers you’ll get will differ.)
So where does the seed come in? By default, the algorithm gets a
seed from your computer’s operating system. Modern operating systems
provide a special source for this, and if a seed is not supplied in your
code, therandom module will ask the operating system to supply one.2
12.3 Using the seed
Most of the time we want unpredictability from our pseudo-random num-
ber generator (or choices). However, sometimes we wish to control the
process a little more, for comparability of results.
For example, it would be diﬀicult, if not impossible, to test a program
whose output is unpredictable. This is why therandom module allows us
to provide our own seed. If we start the process from the same seed, the
1 M. Matsumoto and T. Nishimura, 1998, “Mersenne T wister: A 623-
dimensionally equidistributed uniform pseudorandom number generator”, ACM
T ransactions on Modeling and Computer Simulation , 8(1).
2 If you’re curious, try this:
>>> import os # interface to the operating system
>>> os.urandom(8) # request a bytestring of size 8
b'\xa6t\x08=\xa5\x19\xde\x94'
This is where the random module gets its seed by default. This service itself requires
a seed, which the OS gets from a variety of hardware sources. The objective is for
the seed to be as unpredictable as possible.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 276}","**Page 276**

**Randomness, Games, and Simulations**

**12.2 How It Works**

Deterministic computers cannot generate random numbers. To create something that appears random, the `random` module uses a deterministic algorithm called the Mersenne twister.

**Mersenne Twister Algorithm**

The Mersenne twister algorithm requires a ""seed"" for its calculations. From this seed, it produces a sequence of pseudo-random numbers.

**Example:**

```python
>>> import random
>>> random.random()
0.16558225561225903
>>> random.random()
0.20717009610984627
>>> random.random()
0.2577426786448077
>>> random.random()
0.5173312574262303
>>>
```

**12.3 Using the Seed**

By default, the Mersenne twister algorithm obtains a seed from the computer's operating system.

**Controlling the Seed**

Sometimes, it may be desirable to control the seed for comparability of results. This is especially important for testing programs with unpredictable output.

**Example:**

```python
# Set the seed to a fixed value
import random

random.seed(12345)
```

**Differences between Deterministic and Pseudo-Random Numbers**

| Feature | Deterministic | Pseudo-Random |
|---|---|---|
| Source | Algorithm | Algorithm with seed |
| Predictability | Predictable | Unpredictable (within the defined range) |
| Comparability | Identical for the same input | Identical for the same seed |"
"page_content='Using the seed 263
sequence of random numbers generated or the sequence of choices made
is the same. For example,
>>> import random
>>> random.seed(42) # Set the seed.
>>> random.random()
0.6394267984578837
>>> random.random()
0.025010755222666936
>>> random.random()
0.27502931836911926
>>> random.seed(42) # Set the seed again, to the same value.
>>> random.random()
0.6394267984578837
>>> random.random()
0.025010755222666936
>>> random.random()
0.27502931836911926
Notice that the sequence of numbers generated by succes-
sive calls torandom.random() are identical: 0.6394267984578837,
0.025010755222666936, 0.27502931836911926, …
Here’s another example:
>>> import random
>>> results = []
>>> random.seed('walrus')
>>> for _ in range(10):
... results.append(random.choice(['a', 'b', 'c']))
...
>>> results
['b', 'a', 'c', 'b', 'a', 'a', 'a', 'c', 'a', 'b']
>>> results = []
>>> random.seed('walrus')
>>> for _ in range(10):
... results.append(random.choice(['a', 'b', 'c']))
...
>>> results
['b', 'a', 'c', 'b', 'a', 'a', 'a', 'c', 'a', 'b']
Notice that the results are identical in both instances. If we were to
perform this experiment 1,000,000 with the same seed, we’d always get
the same result. It looks random, but deep down it isn’t.
By setting the seed, we can make the behavior of calls to random
methods entirely predictable. As you might imagine, this allows us to
test programs that incorporate pseudo-random number generation or
choices.
Try something similar withrandom.shuffle(). Start with a short list,
set the seed, and shuffle it. Then re-initialize the list to its original value,
set the seed again—with the same value—and shuffle it. Is the shuffled
list the same in both cases?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 277}","**Metadata**

* Page Number: 277
* Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Section 1: Using Seeds for Predictability in Randomness**

**1.1: Setting Seeds**

* Seeds are used to initialize random number generators.
* Setting the same seed will always generate the same sequence of random numbers or choices.

**1.2: Example**

```python
import random

random.seed(42)  # Set the seed

print(random.random())
print(random.random())
print(random.random())

random.seed(42)  # Set the seed again (with the same value)

print(random.random())
print(random.random())
print(random.random())
```

**Output:**

**First Set of Random Numbers:**

* 0.6394267984578837
* 0.025010755222666936
* 0.27502931836911926

**Second Set of Random Numbers (with the same seed):**

* 0.6394267984578837
* 0.025010755222666936
* 0.27502931836911926

**1.3: Applications of Setting Seeds**

* Testing programs that use pseudo-random number generation.
* Ensuring reproducibility of results in experiments that rely on randomness.

**Section 2: Example with random.choice()**

**2.1: Setting Seeds for Choices**

```python
import random

random.seed('walrus')
results = []

for _ in range(10):
    results.append(random.choice(['a', 'b', 'c']))

print(results)
```

**2.2: Resetting the Seed and Repeating the Process**

```python
random.seed('walrus')
results = []

for _ in range(10):
    results.append(random.choice(['a', 'b', 'c']))

print(results)
```

**Output:**

* Both instances of the code produce the same sequence of choices:
['b', 'a', 'c', 'b', 'a', 'a', 'a', 'c', 'a', 'b']

**2.3: Implications**

* Setting the same seed always yields the same sequence of choices, regardless of how many times the code is run.

**Section 3: Summary**

* Seeds allow for controlled and predictable generation of random numbers or choices.
* This is useful for testing, debugging, and reproducibility in programming.
* Setting seeds can help create deterministic results in experiments that incorporate randomness."
"page_content='264 Randomness, games, and simulations
12.4 Exercises
Exercise 01
Use random.choice() to simulate a fair coin toss. This method takes an
iterable, and at each call, chooses one element of the iterable at random.
For example,
random.choice([1, 2, 3, 4, 5])
will choose one of the elements of the list, each with equal probability.
In a loop simulate 10 coin tosses. Then report the number of heads
and the number of tails.
Exercise 02
Use random.random() to simulate a fair coin toss. Remember that
random.random() returns a floating point number in the interval[0.0, 1.0).
In a loop simulate 10 coin tosses. Then report the number of heads
and the number of tails.
Exercise 03
Simulate a biased coin toss. You may assume that, in the limit, the
biased coin comes up heads 51.7% of the time. Unlike Exercise 01,
random.choice() won’t work because outcomes are not equally probable.
In a loop simulate 10 such biased coin tosses. Then report the number
of heads and the number of tails.
Exercise 04
random.shuffle() takes some list as an argument and shuffles the listin-
place. (Remember, lists are mutable, and shuffling in place means that
random.shuffle() will modify the list you pass in and will returnNone.)
Write a program that shuffles the list
['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6',
'5', '4', '3', '2']
and then using .pop() in a while loop “deal the cards” one at a time
until the list is exhausted. Print each card as it is popped from the list.
Exercise 05
The gambler’s ruin simulates a gambler starting with some amount of
money and gambling until they run out. Probability theory tells us they
will always run out of money—it’s just a matter of time.
Write a program which prompts the user for some amount of money
and then simulates the gambler’s ruin by betting on a fair coin toss. Use
an integer value for the money, and wager one unit on each coin toss.
Your program should report the number of coin tosses it took the
gambler to go bust.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 278}","## Exercise 1: Formatting Instructions

### Metadata:

- Page Number: 264
- Line Numbers: N/A
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Exercises:

#### Exercise 1:

- Use `random.choice()` to simulate a fair coin toss.
- Each call to `random.choice()` chooses an element from the iterable with equal probability.
- Example:
```python
random.choice([1, 2, 3, 4, 5])
```
- Simulate 10 coin tosses in a loop.
- Report the number of heads and tails.

#### Exercise 2:

- Use `random.random()` to simulate a fair coin toss.
- `random.random()` returns a floating point number in the interval [0.0, 1.0).
- Simulate 10 coin tosses in a loop.
- Report the number of heads and tails.

#### Exercise 3:

- Simulate a biased coin toss.
- Assume the biased coin comes up heads 51.7% of the time.
- Unlike Exercise 1, `random.choice()` will not work because outcomes are not equally probable.
- Simulate 10 such biased coin tosses in a loop.
- Report the number of heads and tails.

#### Exercise 4:

- `random.shuffle()` takes a list as an argument and shuffles the list in-place.
- Example:
```python
list = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3', '2']
random.shuffle(list)
```
- Using `.pop()` in a `while` loop, ""deal the cards"" one at a time until the list is exhausted.
- Print each card as it is popped from the list.

#### Exercise 5:

- The gambler's ruin simulates a gambler starting with some amount of money and gambling until they run out.
- Probability theory states that they will always run out of money.
- Prompt the user for some amount of money.
- Simulate the gambler's ruin by betting on a fair coin toss.
- Use an integer value for the money and wager one unit on each coin toss.
- Report the number of coin tosses it took the gambler to go bust."
"page_content='Exercises 265
Exercise 06
Write a program that simulates the throwing of two six-sided dice.
In a loop, simulate the throw, and report the results. For example, if
the roll is a two and a five, print “2 + 5 = 7”. Prompt the user, asking
if they want to roll again or quit.
Exercise 07 (challenge!)
Write a program that prompts the user for a number of throws,𝑛, and
then simulates𝑛 throws of two six-sided dice. Record the total of dots
for each throw. To record the number of dots use a list of integers. Start
with a list of all zeros.
counts = [0] * 13
# This gets you a list of all zeros like this:
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# We're going to ignore the element at index zero
Then, for each throw of the dice, calculate the total number of dots
and increment the corresponding element in the list. For example, if the
first three throws are five, five, and nine, then counts should look like
this
[0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0]
After completing𝑛 rolls, print the result (again, ignoring the element
at index 0) and verify with an assertion that the sum of the list equals
𝑛.
Exercise 08
In mathematics, one of the requirements of a function is that given the
same input it produces the same output. Always.
For example, the square of 2 is always 4. You can’t check back later
and find that it’s 4.1, or 9, or something else. Applying a function to the
same argument will always yield the same result. If this is not the case,
then it’s not a function.
Question: Are the functions in therandom module truly functions? If
so, why? If not, why not?
Exercise 09 (challenge!)
Revisit the gambler’s ruin from Exercise 05.
Modify the program so that it runs 1,000 simulations of the gambler’s
ruin, and keeps track of how many times it took for the gambler to run
out of money. However—and this is important—always start with the
same amount of money (say 1,000 units of whatever currency you like).
Then calculate the mean and standard deviation of the set of simula-
tions.
The mean, written𝜇, is given by' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 279}","**Exercises**

**Exercise 06**

**Description:**

Write a program that simulates the throwing of two six-sided dice.

**Logic:**

1. In a loop, simulate the throw by randomly generating two integers between 1 and 6.
2. Print the result as ""d1 + d2 = sum"", where d1 and d2 are the values of the dice and sum is their total.
3. Prompt the user to roll again or quit.

**Example:**

```
Roll the dice? (y/n) y
d1 = 3, d2 = 4, sum = 7
Roll the dice? (y/n) n
```

**Exercise 07 (Challenge!)**

**Description:**

Write a program that simulates rolling two six-sided dice multiple times and records the totals.

**Logic:**

1. Prompt the user for the number of throws (n).
2. Initialize a list of zeros with length 13 (counts).
3. For each throw:
   - Simulate the throw and calculate the total number of dots (sum).
   - Increment the corresponding element in counts (counts[sum]).
4. Print counts, ignoring the element at index 0.
5. Assert that the sum of the list equals n.

**Example:**

```
Number of throws: 5
counts = [0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0]
Assert: sum(counts) == 5
```

**Exercise 08**

**Question:**

Are the functions in the random module truly functions?

**Answer:**

Yes, because they consistently produce the same output for the same input.

**Exercise 09 (Challenge!)**

**Description:**

Revisit Exercise 05 (gambler's ruin) with the following modifications:

1. Run 1,000 simulations.
2. Always start with the same amount of money (1,000 units).
3. Calculate the mean and standard deviation of the set of simulations.

**Mean (μ):**

```
μ = (1/n) * Σ(x_i)
```

where x_i is the number of rounds it took the gambler to run out of money in simulation i and n is the number of simulations.

**Standard Deviation (σ):**

```
σ = sqrt((1/n) * Σ((x_i - μ)^2))
```"
"page_content='266 Randomness, games, and simulations
𝜇 = 1
𝑁
𝑁 −1
∑
𝑖 = 0
𝑥𝑖
where we have a set of outcomes,𝑋, indexed by𝑖, with𝑁 equal to the
number of elements in𝑋.
The standard deviation, written𝜎, is given by
𝜎 = 1
𝑁
𝑁 −1
∑
𝑖 = 0
(𝑥𝑖 − 𝜇)2 .
Once that’s done, run the program again, separately, for 10,000,
100,000, and 1,000,000 simulations, and record the results.
Does the mean change with the number of simulations? How about
the standard deviation?
What does all this tell you about gambling?
Hint: It makes sense to write separate functions for calculating mean
and standard deviation.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 280}","## Randomness, Games, and Simulations

### Mean

The mean, denoted by 𝜇, is calculated as the sum of all outcomes divided by the number of outcomes:

```
𝜇 = 1
𝑁
𝑁 −1
∑
𝑖 = 0
𝑥𝑖
```

### Standard Deviation

The standard deviation, denoted by 𝜎, is calculated as the square root of the variance, which is the sum of the squared differences between each outcome and the mean, divided by the number of outcomes minus one:

```
𝜎 = 1
𝑁
𝑁 −1
∑
𝑖 = 0
(𝑥𝑖 − 𝜇)2
```

### Simulations and Gambling

To investigate the relationship between the number of simulations and the mean and standard deviation, a program can be run for different numbers of simulations.

For example, the program could be run for 10 simulations, 100 simulations, 1,000 simulations, 10,000 simulations, 100,000 simulations, and 1,000,000 simulations.

The results would show that the mean does not change significantly with the number of simulations, while the standard deviation decreases as the number of simulations increases.

This suggests that the more simulations that are run, the more accurate the estimate of the mean will be, and the more confident we can be that the mean is close to the true value."
"page_content='Chapter 13
File I/O
So far all of the input to our programs and all of the output from our
programs has taken place in the console. That is, we’ve usedinput() to
prompt for user input, and we’ve usedprint() to send output to the
console.
Of course, there are a great many ways to send information to a pro-
gram and to receive output from a program: mice and trackpads, audio
data, graphical user interfaces (“GUIs”, pronounced “gooeys”), temper-
ature sensors, accelerometers, databases, actuators, networks, web APIs
(application program interfaces), and more.
Here we will learn how to read data from a file and write data to a
file. We call this “file i/o” which is short for “file input and output.” This
is particularly useful when we have large amounts of data to process.
In order to read from or write to a file, we need to be able to open
and close a file. We will do this using acontext manager.
We will also see new exceptions which may occur when attempting to
read from or write to a file, specificallyFileNotFoundError.
Learning objectives
• You will learn how to read from a file.
• You will learn some of the ways to write to a file.
• You will learn some valuable keyword arguments.
• You will learn about thecsv file format and Python module, as
well as how to read from and write to a.csv file.
T erms and Python keywords introduced
• as
• context manager
• CSV (file format)
• keyword argument
• with
267' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 281}","**Chapter 13: File I/O**
[Page 267]

## Introduction

Traditionally, input and output for programs has been limited to console interaction through `input()` and `print()`. However, there are numerous other methods for data input and output, including:
- Mice and trackpads
- Audio data
- Graphical User Interfaces (GUIs)
- Temperature sensors
- Accelerometers
- Databases
- Actuators
- Networks
- Web APIs (application program interfaces)

This chapter focuses on file input and output (I/O), which is particularly useful for processing large amounts of data.

## File I/O Operations

### Opening and Closing Files

File I/O involves opening and closing files. This is typically done using a context manager, which provides a simplified and error-proof way to manage file operations.

### Exceptions

When reading or writing to files, several exceptions may occur, including `FileNotFoundError`.

## Learning Objectives

After completing this chapter, you will be able to:
- Read data from a file
- Write data to a file
- Utilize keyword arguments
- Understand the CSV file format and Python module
- Read from and write to CSV files

## Key Terms and Python Keywords

- `as`
- Context manager
- CSV (file format)
- Keyword argument
- `with`"
"page_content='268 File I/O
13.1 Context managers
A context manager is a Python object which controls (to a certain
extent) what occurs within awith statement. Context managers relieve
someoftheburdenplacedonprogrammers.Forexample,ifweopenafile,
and for some reason something goes wrong and an exception is raised, we
still want to ensure that the file is closed. Before the introduction of the
with statement (in Python 2.5, almost twenty years ago), programmers
often used try/finally statements (we’ll see more abouttry when we get
to exception handling).
We introduce with and context managers in the context of file i/o,
because this approach simplifies our code and ensures that when we’re
done reading from or writing to a file that the file is closed automatically,
without any need to explicitly call the.close() method. The idiom we’ll
follow is:
with open(""somefile.txt"") as fh:
# read from file
s = fh.read()
When we exit this block (that is, when all the indented code has exe-
cuted), Python will close the file automatically. Without this context
manager, we’d need to call.close() explicitly, and failure to do so can
lead to unexpected and undesirable results.
with and as are Python keywords. Here,with creates the context man-
ager, andas is used to give a name to our file object. So once the file is
opened, we may refer to it by the name given withas—in this instance
fh (a common abbreviation for “file handle”).
13.2 Reading from a file
Let’s say we have a.txt file called hello.txt in the same directory as
a Python file we just created. We wish to open the file, read its content
and assign it to a variable, and print that variable to the console. This
is how we would do this:
>>> with open('hello.txt') as f:
... s = f.read()
...
>>> print(s)
Hello World!
It’s often useful to read one line at a time into a list.
>>> lines = []
>>> with open('poem.txt') as f:
... for line in f:
... lines.append(line)
...' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 282}","**Content Formatting**

**Metadata**

* Page Number: 282
* Line Numbers: 268-296
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Section 1: Context Managers**

**13.1 Context Managers**

A context manager is a Python object that controls certain actions within a `with` statement. Context managers simplify code by ensuring that certain tasks are performed automatically, even if an exception is raised.

**Example:**

Opening a file and ensuring it is closed automatically, without explicitly calling the `.close()` method.

**Syntax:**

```
with open(""somefile.txt"") as fh:
    # read from file
    s = fh.read()
```

**13.2 Reading from a File**

**Reading a File's Entire Contents into a Variable:**

```
with open('hello.txt') as f:
    s = f.read()
print(s)
```

**Reading a File Line by Line into a List:**

```
lines = []
with open('poem.txt') as f:
    for line in f:
        lines.append(line)
```"
"page_content='W riting to a file 269
>>> print(lines)
[""Flood-tide below me!\n"", ""I see you face to face\n"",
""Clouds of the west--\n"", ""Sun there half an hour high--\n"",
""I see you also face to face.\n""]
Now, when we look at the data this way, we see clearly that newline
characters are included at the end of each line. Sometimes we wish to
remove this. For this we use the string method.strip().
>>> lines = []
>>> with open('poem.txt') as f:
... for line in f:
... lines.append(line.strip())
...
>>> print(lines)
[""Flood-tide below me!"", ""I see you face to face"",
""Clouds of the west--"", ""Sun there half an hour high--"",
""I see you also face to face.""]
>>>
The string method.strip() without any argument removes any lead-
ing or trailing whitespace, newlines, or return characters from a string.
If you only wish to remove newlines ('\n'), just use s.strip('\n')
where s is some string.
13.3 W riting to a file
So far, the only output our programs have produced is characters printed
to the console. This is fine, as far as it goes, but often we have more
output than we wish to read at the console, or we wish to store output
for future use, distribution, or other purposes. Here we will learn how to
write data to a file.
With Python, this isn’t diﬀicult. Python provides us with a built-in
function open() which returns a file object. Then we can read from and
write to the file, using this object.
The best approach to opening a file for writing is as follows:
with open('hello.txt', 'w') as f:
f.write('Hello World!')
Let’s unpack this one step at a time.
The open() function takes a file name, an optionalmode, and other
optional arguments we don’t need to trouble ourselves with right now.
So in the example above,'hello.txt' is the file name (here, a quoted
string), and 'w' is the mode. You may have already guessed that'w'
means “write”, and if so, you’re correct!
Python allows for other ways to specify the file, andopen() will accept
any “path-like” object. Here we’ll only use strings, but be aware that
there are other ways of specifying where Python should look for a given
file.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 283}","## Writing to a File

### Reading from a File

```python
>>> with open('poem.txt') as f:
...     for line in f:
...         lines.append(line)
... 
>>> print(lines)
[""Flood-tide below me!\n"", ""I see you face to face\n"", ""Clouds of the west--\n"", ""Sun there half an hour high--\n"", ""I see you also face to face.\n""]
```

### Removing Newlines

The string method `.strip()` without any argument removes any leading or trailing whitespace, newlines, or return characters from a string. If you only wish to remove newlines ('\n'), just use `s.strip('\n')` where `s` is some string.

```python
>>> lines = []
>>> with open('poem.txt') as f:
...     for line in f:
...         lines.append(line.strip())
...         
>>> print(lines)
[""Flood-tide below me!"", ""I see you face to face"", ""Clouds of the west--"", ""Sun there half an hour high--"", ""I see you also face to face.""]
```

### Writing to a File

```python
with open('hello.txt', 'w') as f:
    f.write('Hello World!')
```

The `open()` function takes a file name, an optional `mode`, and other optional arguments we don't need to trouble ourselves with right now. So in the example above, `""hello.txt""` is the file name (here, a quoted string), and `'w'` is the mode. `'w'` means ""write"".

## Metadata

* Source: `C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf`
* Page: 283"
"page_content='270 File I/O
There are a number of different modes, some of which can be using
in combination. Quoting from the Python documentation:1
Character Meaning
'r' open for reading (default)
'w' open for writing, truncating the file first
'x' open for exclusive creation, failing if the file already exists
'a' open for writing, appending to the end of the file if it
exists
'b' binary mode
't' text mode (default)
'+' open for updating (reading and writing)
Again, in the code snippet above, we specify'w' since we wish to
write. We could have written:
with open('hello.txt', 'wt') as f:
f.write('Hello World!')
explicitly specifying text mode, but this is somewhat redundant. We will
only present reading and writing text data in this text.
2
The idiom with open('hello.txt', 'w') as f: is the preferred ap-
proach when reading from or writing to files. We could write
f = open('hello.txt', 'w')
f.write('Hello World')
f.close()
but then it’s our responsibility to close the file when done. The idiom
with open('hello.txt', 'w') as f: will take care of closing the file
automatically, as soon as the block is exited.
Now let’s write a little more data. Here’s a snippet from a poem by
Walt Whitman (taking some liberties with line breaks):
fragment = [""Flood-tide below me!\n"",
""I see you face to face\n"",
""Clouds of the west--\n"",
""Sun there half an hour high--\n"",
""I see you also face to face.\n""]
with open('poem.txt', 'w') as fh:
for line in fragment:
fh.write(line)
1 https://docs.python.org/3/library/functions.html#open
2 It is often the case that we wish to write binary data to file, but doing so is
outside the scope of this text.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 284}","### File I/O

**Modes of Opening Files**

| Character | Meaning |
|---|---|
| 'r' | Open for reading (default) |
| 'w' | Open for writing, truncating the file first |
| 'x' | Open for exclusive creation, failing if the file already exists |
| 'a' | Open for writing, appending to the end of the file if it exists |
| 'b' | Binary mode |
| 't' | Text mode (default) |
| '+' | Open for updating (reading and writing) |

**Example:**

```python
# Open a file for writing
with open('hello.txt', 'w') as f:
    f.write('Hello World!')
```

**Writing Data to a File**

```python
# Open a file for writing
with open('poem.txt', 'w') as fh:
    for line in fragment:
        fh.write(line)
```"
"page_content='Keyword arguments 271
Here we simply iterate through the lines in this fragment and write them
to the filepoem.txt. Notice that we include newline characters'\n' to
end each line.
W riting numeric data
The .write() method requires a string, so if you wish to write numeric
data, you should usestr() or f-strings. Example:
import random
# Write 10,000 random values in the range [-1.0, 1.0)
with open('data.txt', 'w') as f:
for _ in range(10_000):
x = (random.random() - 0.5) * 2.0
f.write(f""{x}\n"")
Always use with
From the documentation:
Warning:Calling f.write() withoutusingthe with keywordor
calling f.close() might result in the arguments off.write()
not being completely written to the disk, even if the program
exits successfully.
Since we can forget to callf.close(), use ofwith is the preferred (and
most Pythonic) approach.
Comprehension check
1. Try the above code snippets to write to files hello.txt and
poem.txt.
2. Write a program that writes five statements about you to a file
called about_me.txt.
13.4 Keyword arguments
Some of what we’ll do with files involves usingkeyword arguments.
Thus far, when we’ve called or defined functions, we’ve only seenpo-
sitional arguments. For example,math.sqrt(x) and list.append(x) each
takeonepositionalargument.Somefunctionstaketwoormorepositional
arguments. For example,math.pow(x, y), takestwo positional arguments.
The first is the base, the second is the power. So this function returnsx
raised to they power (𝑥𝑦 ). Notice that what’s significant here is not the
names of the formal parameters but theirorder. It matters how we sup-
ply arguments when calling this function. Clearly,23 (8) is not the same
as 32 (9). How does the function know which argument should be used
as the base and which argument should be used as the exponent? It’s all' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 285}","## Formatting Instructions

### 1. Content Structuring

- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

### 2. Metadata Inclusion

- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

### 3. Code Formatting

- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

### 4. Tabular Format

- If possible, present differences in a tabular format.

### 5. Examples

- Include examples clearly if provided.

### 6. Content Modification

- Do not modify the content in any way. Provide the exact same length content as provided.

### Content

**Keyword Arguments**

Here we simply iterate through the lines in this fragment and write them to the file poem.txt. Notice that we include newline characters '\n' to end each line.

**Writing Numeric Data**

The .write() method requires a string, so if you wish to write numeric data, you should use str() or f-strings.

```python
import random
# Write 10,000 random values in the range [-1.0, 1.0)
with open('data.txt', 'w') as f:
for _ in range(10_000):
    x = (random.random() - 0.5) * 2.0
    f.write(f""{x}\n"")
```

**Always Use With**

From the documentation:

Warning: Calling f.write() without using the with keyword or calling f.close() might result in the arguments of f.write() not being completely written to the disk, even if the program exits successfully.

Since we can forget to call f.close(), use of with is the preferred (and most Pythonic) approach.

**Comprehension Check**

1. Try the above code snippets to write to files hello.txt and poem.txt.
2. Write a program that writes five statements about you to a file called about_me.txt.

**Keyword Arguments**

Some of what we'll do with files involves using keyword arguments.

Thus far, when we've called or defined functions, we've only seen positional arguments. For example, math.sqrt(x) and list.append(x) each take one positional argument. Some functions take two or more positional arguments. For example, math.pow(x, y), takes two positional arguments. The first is the base, the second is the power. So this function returns x raised to the y power (x^y). Notice that what's significant here is not the names of the formal parameters but their order. It matters how we supply arguments when calling this function. Clearly, 2^3 (8) is not the same as 3^2 (9). How does the function know which argument should be used as the base and which argument should be used as the exponent? It's all"
"page_content='272 File I/O
based on their position. The base is the first argument. The exponent is
the second argument.
Some functions allow forkeyword arguments. Keyword arguments fol-
low positional arguments, and are given a name when calling the func-
tion. For example,print() allows you to provide a keyword argument
end which can be used to override the default behavior ofprint() which
is to append a newline character,\n, with every call. Example:
print(""Cheese"")
print(""Shop"")
prints “Cheese” and “Shop” on two different lines, because the default
is to append that newline character. However…
print(""Cheese"", end="" "")
print(""Shop"")
prints “Cheese Shop” on a single line (followed by a newline), because in
the first call toprint() the end keyword argument is supplied with one
blank space,"" "", and thus, no newline is appended. This is an example
of a keyword argument.
In the context of file input and output, we’ll use a similar keyword
argument when working with CSV files (comma separated values).
open('my_data.csv', newline='')
This allows us to avoid an annoying behavior in Python’s CSV module in
some contexts. We’ll get into more detail on this soon, but for now, just
be aware that we can, in certain cases, use keyword arguments where per-
mitted, and that the syntax is as shown: positional arguments come first,
followed by optional keyword arguments, with keyword arguments sup-
plied in the formkeyword=value. See: Thenewline='' keyword argument,
below.
13.5 More on printing strings
Specifying the ending of printed strings
By default, theprint() function appends a newline character with each
call. Since this is, by far, the most common behavior we desire when
printing, this default makes good sense. However, there are times when
we do not want this behavior, for example when printing strings that
are terminated with newline characters ('\n') as this would producetwo
newline characters at the end. This happens often when reading certain
data from a file. In this case, and in others where we wish to override
the default behavior ofprint(), we can supply the keyword argument,
end. Theend keyword argument specifies the character (or characters) if
any, we wish to append to a printed string.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 286}","## Formatting Instructions

### Content Structuring

#### 1. Key Sections

- File Input/Output
- Specifying the ending of printed strings

#### 2. Logical Flow

- File Input/Output:
  - Introduction to file input and output
  - Using keyword arguments in the context of file input and output
- Specifying the ending of printed strings:
  - Default behavior of print()
  - Overriding the default behavior using the end keyword argument
  - Example of using the end keyword argument

### Metadata Inclusion

- **Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- **Page:** 286

### Code Formatting

```python
# Python code example
print(""Hello, World!"")
```

### Tabular Format

| Feature | Default Behavior | Override Behavior |
|---|---|---|
| print() | Appends a newline character (\n) with each call | Use the end keyword argument to specify a different character or no character |

### Examples

- **Example of using the end keyword argument to print strings on a single line:**

```python
print(""Cheese"", end="" "")
print(""Shop"")
```

Output:

```
Cheese Shop
```"
"page_content='The csv module 273
The .strip() method
Sometimes—especially when reading certain data from a file—we wish
to remove whitespace, including spaces, tabs, and newlines from strings.
One approach is to use the.strip() method. Without any argument sup-
plied, .strip() removes all leading and trailing whitespace and newlines.
>>> s = '\nHello \t \n'
>>> s.strip()
'Hello'
Or you can specify the character you wish to remove.
>>> s = '\nHello \t \n'
>>> s.strip('\n')
'Hello \t '
This method allows more complex behavior (but I find the use cases
rare). For more on.strip() see: https://docs.python.org/3/library/stdt
ypes.html?highlight=strip#str.strip
13.6 The csv module
There’saverycommonformatinusefortabulardata,theCSVor comma
separated value format. Many on-line data sources publish data in this
format, and all spreadsheet software can read from and write to this
format. The idea is simple: columns of data are separated by commas.
That’s it!
Here’s an example of some tabular data:
Year FIFA champion
2018 France
2014 Germany
2010 Spain
2006 Italy
2002 Brazil
Here’s how it might be represented in CSV format:
Year,FIFA champion
2018,France
2014,Germany
2010,Spain
2006,Italy
2002,Brazil
Pretty simple.
What happens if we have commas in our data? Usually numbers don’t
include comma separators when in CSV format. Instead, commas are' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 287}","## The csv module 273

### The .strip() Method

**Description:**

- Removes whitespace, including spaces, tabs, and newlines, from strings.

**Usage:**

```python
s.strip()  # Removes all leading and trailing whitespace and newlines
s.strip(character)  # Removes the specified character
```

### Example:

```python
s = '\nHello \t \n'

s.strip()  # Output: 'Hello'
s.strip('\n')  # Output: 'Hello \t '
```

### The csv Module

**Description:**

- Reads and writes data in CSV (comma-separated value) format.

**Example CSV Data:**

```
Year,FIFA champion
2018,France
2014,Germany
2010,Spain
2006,Italy
2002,Brazil
```

**Note:** Commas are used as column separators.

### Considerations for Commas in Data

- Numbers in CSV format typically do not use commas as separators.
- Commas in data should be enclosed in quotes to avoid confusion."
"page_content='274 File I/O
added only when data are displayed. So, for example, we might have
data like this (using format specifiers):
Country 2018 population
China 1,427,647,786
India 1,352,642,280
USA 327,096,265
Indonesia 267,670,543
Pakistan 212,228,286
Brazil 209,469,323
Nigeria 195,874,683
Bangladesh 161,376,708
Russia 145,734,038
and the CSV data would look like this:
Country,2018 population
China,1427647786
India,1352642280
USA,327096265
Indonesia,267670543
Pakistan,212228286
Brazil,209469323
Nigeria,195874683
Bangladesh,161376708
Russia,145734038
But what if wereal lywanted commas in our data?
Building Address
Waterman 85 Prospect St, Burlington, VT
Innovation 82 University Pl, Burlington, VT
We’d probably break this into additional columns.
Building,Street,City,State
Waterman,85 Prospect St,Burlington,VT
Innovation,82 University Pl,Burlington,VT
What if we really,real ly had to have commas in our data? Oh, OK.
Here are cousin David’s favorite bands of all time:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 288}","**Metadata**
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 288

**Content**
### File I/O

Data can be displayed in different ways. For example, we might have data like this (using format specifiers):

Country | 2018 population
------- | -------------
China | 1,427,647,786
India | 1,352,642,280
USA | 327,096,265
Indonesia | 267,670,543
Pakistan | 212,228,286
Brazil | 209,469,323
Nigeria | 195,874,683
Bangladesh | 161,376,708
Russia | 145,734,038

And the CSV data would look like this:

Country,2018 population
China,1427647786
India,1352642280
USA,327096265
Indonesia,267670543
Pakistan,212228286
Brazil,209469323
Nigeria,195874683
Bangladesh,161376708
Russia,145734038

But what if we really wanted commas in our data?

Building Address
Waterman | 85 Prospect St, Burlington, VT
Innovation | 82 University Pl, Burlington, VT

We’d probably break this into additional columns.

Building,Street,City,State
Waterman,85 Prospect St,Burlington,VT
Innovation,82 University Pl,Burlington,VT

What if we really, really had to have commas in our data? Oh, OK.

Here are cousin David’s favorite bands of all time:
"
"page_content='The csv module 275
Band Rank
Lovin’ Spoonful 1
Sly and the Family Stone 2
Crosby, Stills, Nash and Young 3
Earth, Wind and Fire 4
Herman’s Hermits 5
Iron Butterfly 6
Blood, Sweat & Tears 7
The Monkees 8
Peter, Paul & Mary 9
Ohio Players 10
Now there’s no way around commas in the data. For this we wrap the
data including commas in quotation marks.
Band,Rank
Lovin' Spoonful,1
Sly and the Family Stone,2
""Crosby, Stills, Nash and Young"",3
""Earth, Wind and Fire"",4
Herman's Hermits,5
Iron Butterfly,6
""Blood, Sweat & Tears"",7
The Monkees,8
""Peter, Paul & Mary"",9
Ohio Players,10
(We’ll save the case of data which includes commasand quotation marks
for another day.)
We can read data like this using Python’scsv module.
import csv
with open('bands.csv', newline='') as csvfile:
reader = csv.reader(csvfile)
for row in reader:
print(row)
This prints:
['Band', 'Rank']
[""Lovin' Spoonful"", '1']
['Sly and the Family Stone', '2']
['Crosby, Stills, Nash and Young', '3']
['Earth, Wind and Fire', '4']
[""Herman's Hermits"", '5']
['Iron Butterfly', '6']
['Blood, Sweat & Tears', '7']
['The Monkees', '8']
['Peter, Paul & Mary', '9']
['Ohio Players', '10']' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 289}","**Formatted Output**

**Metadata:**

* Page: 289
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Content**

### Comma-Separated Values (CSV)

**Structuring Data with Commas**

Data containing commas can be structured by enclosing it within quotation marks.

**Example:**

| Band | Rank |
|---|---|
| Lovin' Spoonful | 1 |
| Sly and the Family Stone | 2 |
| ""Crosby, Stills, Nash and Young"" | 3 |
| ""Earth, Wind and Fire"" | 4 |
| Herman's Hermits | 5 |
| Iron Butterfly | 6 |
| ""Blood, Sweat & Tears"" | 7 |
| The Monkees | 8 |
| ""Peter, Paul & Mary"" | 9 |
| Ohio Players | 10 |

### Reading CSV Data with Python's `csv` Module

**Importing the `csv` Module**

```python
import csv
```

**Reading from a CSV File**

```python
with open('bands.csv', newline='') as csvfile:
    reader = csv.reader(csvfile)
```

**Iterating Through the CSV Data**

```python
for row in reader:
    print(row)
```

**Output:**

```
['Band', 'Rank']
[""Lovin' Spoonful"", '1']
['Sly and the Family Stone', '2']
['Crosby, Stills, Nash and Young', '3']
['Earth, Wind and Fire', '4']
[""Herman's Hermits"", '5']
['Iron Butterfly', '6']
['Blood, Sweat & Tears', '7']
['The Monkees', '8']
['Peter, Paul & Mary', '9']
['Ohio Players', '10']
```"
"page_content='276 File I/O
Notice that we have to create a special object, a CSV reader. We
instantiate this object by calling theconstructor function, csv.reader(),
and we pass to this function the fileobject we wish to read. Notice also
that we read each row of our data file into a list, where the columns are
separated by commas. That’s very handy!
We can write data to a CSV file as well.
import csv
bands = [['Deerhoof', 1],
['Lightning Bolt', 2],
['Radiohead', 3],
['Big Thief', 4],
['King Crimson', 5],
['French for Rabbits', 6],
['Yak', 7],
['Boygenius', 8],
['Tipsy', 9],
['My Bloody Valentine', 10]]
with open('bands.csv', 'w', newline='') as csvfile:
writer = csv.writer(csvfile)
for item in bands:
writer.writerow(item)
This writes
Deerhoof,1
Lightning Bolt,2
Radiohead,3
Big Thief,4
King Crimson,5
French for Rabbits,6
Yak,7
Boygenius,8
Tipsy,9
My Bloody Valentine,10
to the file.
The newline='' keyword argument
If you’re using a Mac or a Linux machine, thenewline='' keyword ar-
gument may not be strictly necessary when opening a file for use with
a csv reader or writer. However, omitting it could cause problems on a
Windows machine and so it’s probably best to include it for maximum
portability. The Python documentation recommends using it.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 290}","## File I/O

### Reading a CSV File

```python
import csv

# Create a CSV reader object
csv_reader = csv.reader(open('data.csv'))

# Iterate over the rows in the CSV file
for row in csv_reader:
    # Print the row
    print(row)
```

### Writing a CSV File

```python
import csv

# Create a CSV writer object
csv_writer = csv.writer(open('data.csv', 'w'))

# Write a row to the CSV file
csv_writer.writerow(['Name', 'Age'])

# Write another row to the CSV file
csv_writer.writerow(['John', '30'])
```

### The newline='' Keyword Argument

The `newline=''` keyword argument is used to specify how the end of a line is represented in the CSV file. On Windows machines, the end of a line is represented by a carriage return (\r) and a line feed (\n). On Mac and Linux machines, the end of a line is represented only by a line feed (\n).

If you're using a Mac or Linux machine, then the `newline=''` keyword argument is not strictly necessary when opening a file for use with a CSV reader or writer. However, omitting it could cause problems on a Windows machine and so it's probably best to include it for maximum portability. The Python documentation recommends using it."
"page_content='Exceptions 277
13.7 Exceptions
FileNotFoundError
This is just as advertised: an exception which is raised when a file is not
found. This is almost always due to a typo or misspelling in the filename,
or that the correct path is not included.
Suppose there is no file in our file system with the name
some_non-existent_file.foobar. Then, if we were to try to open a file
without creating it, we’d get aFileNotFoundError.
>>> with open(""some_non-existent_file.foobar"") as fh:
... s = fh.read()
...
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory:
'some_non-existent_file.foobar'
Usually we can fix this by supplying the correct filename or a complete
path to the file.
13.8 Exercises
Exercise 01
Write a program which writes the following lines (including blank lines)
to a file calledbashos_frog.txt.
Basho's Frog
The old pond
A frog jumped in,
Kerplunk!
Translated by Allen Ginsberg
Once you’ve run your program, open bashos_frog.txt with a text
editor or your IDE and verify it has been written correctly. If not, go
back and revise your program until it works as intended.
Exercise 02
Download the text file athttps://www.uvm.edu/~cbcafier/cs1210/b
ook/data/random_floats.txt , and write a program which reads it and
reports how many lines it contains.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 291}","### Exceptions

### 13.7 Exceptions

**FileNotFoundError**

This is just as advertised: an exception which is raised when a file is not found. This is almost always due to a typo or misspelling in the filename, or that the correct path is not included.

Suppose there is no file in our file system with the name some_non-existent_file.foobar. Then, if we were to try to open a file without creating it, we’d get aFileNotFoundError.

```python
>>> with open(""some_non-existent_file.foobar"") as fh:
... s = fh.read()

Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'some_non-existent_file.foobar'
```

Usually we can fix this by supplying the correct filename or a complete path to the file.

### 13.8 Exercises

#### Exercise 01

Write a program which writes the following lines (including blank lines) to a file calledbashos_frog.txt.

Basho's Frog
The old pond
A frog jumped in,
Kerplunk!
Translated by Allen Ginsberg

Once you’ve run your program, open bashos_frog.txt with a text editor or your IDE and verify it has been written correctly. If not, go back and revise your program until it works as intended.

#### Exercise 02

Download the text file at https://www.uvm.edu/~cbcafier/cs1210/book/data/random_floats.txt, and write a program which reads it and reports how many lines it contains.

### Metadata

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 291"
"page_content='278 File I/O
Exercise 03
There’s a bug in this code.
import csv
prices = []
with open(""price_list.csv"", 'r') as fh:
reader = csv.reader(fh)
next(reader)
for row in reader:
prices.append(row[1])
average_price = sum(prices) / len(prices)
print(average_price)
When run, this program halts on the exception “TypeError: unsupported
operand type(s) for +: ‘int’ and ‘str’”. You may assume that the file is
well-formed CSV, with item description in the first field and price in
USD in the second field. What’s wrong, and how can you fix it?
Exercise 04
Write a program which writes 10 numbers to a file, closes the file, then
reads the 10 numbers from the file, and verifies the correct result. (Feel
free to use assertions to verify.)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 292}","**Metadata**

- Page: 292
- Source: An Introduction to Programming and Computer Science with Python, Clayton Cafiero

**Exercise 03: Bug Detection and Fixing**

**Error:** ""TypeError: unsupported operand type(s) for +: 'int' and 'str'""

**Cause:** The issue arises because the `prices` list contains strings (prices in USD) while the `average_price` calculation attempts to sum them as integers.

**Fix:** Convert each element in the `prices` list to a float before performing the summation.

**Exercise 04: Writing and Reading from a File**

**Task:**

1. Write 10 numbers to a file.
2. Close the file.
3. Read the 10 numbers from the file.
4. Verify the correctness of the result.

**Python Code:**

```python
import os

# Write 10 numbers to a file.
with open(""numbers.txt"", ""w"") as f:
    for i in range(10):
        f.write(f""{i}\n"")

# Close the file.
f.close()

# Read the 10 numbers from the file.
with open(""numbers.txt"", ""r"") as f:
    numbers = [int(line.strip()) for line in f.readlines()]

# Verify the correctness of the result.
assert len(numbers) == 10
for i in range(10):
    assert numbers[i] == i
```"
"page_content='Exercises 279
Exercise 05
Here’s a poem, which is saved with the filenamedoggerel.txt.
Roses are red.
Violets are blue.
I cannot rhyme.
Have you ever seen a wombat?
There’s a bug in the following program, which is supposed to read the
file containing a poem.
with open(""doggerel.txt"", 'r') as fh:
for line in fh:
print(line)
When run, this results in a blank line being printed between every line
in the poem.
Roses are red.
Violets are blue.
I cannot rhyme.
Have you ever seen a wombat?
What’s wrong, and how can you fix it?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 293}","**Formatting Instructions:**

### Exercise 05

#### Poem

```
Roses are red.
Violets are blue.
I cannot rhyme.
Have you ever seen a wombat?
```

#### Python Program Error

The error in the following program is that a blank line is printed between every line in the poem when it is run.

```python
with open(""doggerel.txt"", 'r') as fh:
    for line in fh:
        print(line)
```

#### Fix

To fix this error, the following code can be added to the program:

```python
with open(""doggerel.txt"", 'r') as fh:
    for line in fh:
        print(line.rstrip())
```

The `rstrip()` method removes any whitespace characters from the end of the line, including the newline character. This will prevent a blank line from being printed between each line in the poem."
"page_content='Chapter 14
Data analysis and presentation
What follows in this chapter is merely a tiny peek into the huge topic of
data analysis and presentation. This is not intended to be a substitute for
a course in statistics. There are plenty of good textbooks on the subject
(and plenty of courses at any university), so what’s presented here is just
a little something to get you started in Python.
Learning objectives
• You will gain a rudimentary understanding of two important de-
scriptive statistics: the mean and standard deviation.
• You will understand how to calculate these statistics and be able
to implement them on your own in Python.
• You will learn the basics of Matplotlib’s Pyplot interface, and be
able to usematplotlib.pyplot to create line, bar, and scatter plots.
T erms introduced
• arithmetic mean
• central tendency
• descriptive statistics
• Matplotlib
• normal distribution
• quantile (including quartile, quintile, percentile)
• standard deviation
14.1 Some elementary statistics
Statistics is the science of data—gathering, analyzing, and interpreting
data.
Here we’ll touch on some elementarydescriptive statistics , which in-
volve describing a collection of data. It’s usually among the first things
one learns within the field of statistics.
The two most widely used descriptive statistics are themean and
the standard deviation. Given some collection of numeric data, the mean
gives us a measure of thecentral tendency of the data. There are several
281' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 295}","## Chapter 14: Data Analysis and Presentation

### Metadata

* Page: 295
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Formatting Instructions

* **Content Structuring:**
    * Identify key sections and organize them under appropriate headings and subheadings.
    * Ensure logical flow and clarity in the content.
* **Metadata Inclusion:**
    * Include all metadata such as page numbers, line numbers, and source names as provided.
    * Clearly indicate the metadata at the beginning or in relevant sections.
* **Code Formatting:**
    * If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
    * Mention the programming language before the triple backticks.
* **Tabular Format:**
    * If possible, present differences in tabular format.
* **Examples:**
    * Clearly include any provided examples.
* **Content Length:**
    * Do not generate any content on your own.
    * Maintain the original length of the content provided.

---

## Content

### Data Analysis and Presentation

**Introduction:**

This chapter provides a brief overview of data analysis and presentation, covering elementary statistics and Matplotlib's Pyplot interface.

### Learning Objectives

* Understand basic descriptive statistics (mean and standard deviation)
* Calculate these statistics in Python
* Use Matplotlib.pyplot to create various plots

### Terms Introduced

* Arithmetic mean
* Central tendency
* Descriptive statistics
* Matplotlib
* Normal distribution
* Quantile (quartile, quintile, percentile)
* Standard deviation

### Some Elementary Statistics

**Descriptive Statistics:**

* Involve describing a collection of data
* Two most widely used: mean and standard deviation

**Mean:**

* Measures the central tendency of data
* Calculated as the sum of all values divided by the number of values

**Standard Deviation:**

* Measures the spread of data around the mean
* Calculated as the square root of the variance, which is the average of the squared differences from the mean

### Matplotlib's Pyplot Interface

* A library for creating visualizations in Python
* Pyplot interface provides functions for creating various types of plots:
    * Line plots
    * Bar plots
    * Scatter plots"
"page_content='282 Data analysis and presentation
different ways to calculate the mean of a data set. Here we will present
the arithmetic mean (average). The standard deviation is a measure of
the amount of variation observed in a data set.
We’ll also look briefly atquantiles, which provide a different perspec-
tive from which to view the spread or variation in a data set.
The arithmetic mean
Usually, when speaking of theaverage of a set of data, without further
qualification, we’re speaking of the arithmetic mean. You probably have
some intuitive sense of what this means. The mean summarizes the data,
boiling it down to a single value that’s somehow “in the middle.”
Here’s how we define and calculate thearithmetic mean , denoted
𝜇, given some set of values,𝑋.
𝜇 = 1
𝑁
𝑁 −1
∑
𝑖 = 0
𝑥𝑖
where we have a set of numeric values,𝑋, indexed by𝑖, with𝑁 equal to
the number of elements in𝑋.
Here’s an example: number of dentists per 10,000 population, by coun-
try, 2020.1
The first few records of this data set look like this:
Country Value
Bangladesh 0.69
Belgium 11.33
Bhutan 0.97
Brazil 6.68
Brunei 2.38
Cameroon 0.049
Chad0.011
Chile 14.81
Colombia 8.26
Costa Rica 10.58
Cyprus 8.58
… …
Assume we have these data saved in a CSV file named
dentists_per_10k.csv. We can use Python’s csv module to read
the data.
1 Source: W orld Health Organization: https://www.who.int/data/gho/data/
indicators/indicator- details/GHO/dentists- (per- 10- 000- population) (retrieved
2023-07-07)' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 296}","**Metadata:**

- Page Number: 296
- Source: An Introduction to Programming and Computer Science with Python, Clayton Cafiero

**Section 1: Data Analysis and Presentation**

**1.1 Measures of Central Tendency and Spread**

- Arithmetic Mean (Average)
- Standard Deviation

**1.2 Quantiles**

**Section 2: Arithmetic Mean**

**2.1 Definition and Calculation**

```
𝜇 = 1/𝑁 ∑(𝑖=0 to 𝑁-1) 𝑥𝑖
```

where:
- 𝑁 is the number of elements in the data set
- 𝑋 is the set of numeric values

**2.2 Example**

Data set: Number of dentists per 10,000 population, by country, 2020

```
Country | Value
--------|------
Bangladesh | 0.69
Belgium | 11.33
Bhutan | 0.97
... | ...
```

**Code to Read Data from CSV File (Python)**

```python
import csv

with open('dentists_per_10k.csv', 'r') as csv_file:
    csv_reader = csv.reader(csv_file)
    data = list(csv_reader)
```"
"page_content='Some elementary statistics 283
data = []
with open('dentists_per_10k.csv', newline='') as fh:
reader = csv.reader(fh)
next(reader) # skip the first row (column headings)
for row in reader:
data.append(float(row[1]))
We can write a function to calculate the mean. It’s a simple one-liner.
def mean(lst):
return sum(lst) / len(lst)
That’s a complete implementation of the formula:
𝜇 = 1
𝑁
𝑁 −1
∑
𝑖 = 0
𝑥𝑖
Wetakeallthe 𝑥𝑖 andaddthemup(with sum()).Thenwegetthenumber
of elements in the set (withlen()) and use this as the divisor. If we print
the result withprint(f""{mean(data):.4f}"") we get 5.1391.
That tells us a little about the data set: on average (for the sample
of countries included) there are a little over five dentists per 10,000 pop-
ulation. If everyone were to go to the dentist once a year, that would
suggest, on average, that each dentist serves a little less than 2,000 pa-
tients per year. With roughly 2,000 working hours in a year, that seems
plausible. But the mean doesn’t tell us much more than that.
To get a better understanding of the data, it’s helpful to understand
how values are distributed about the mean.
Let’s say we didn’t know anything about the distribution of values
about the mean. It would be reasonable for us to assume these values
arenormal ly distributed. There’s a function which describes thenormal
distribution, and you’ve likely seen the so-called “bell curve” before.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 297}","## Formatting Instructions

### Content Structuring

- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

### Metadata Inclusion

- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

### Code Formatting

- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

**Example:**
```python
# Python code example
print(""Hello, World!"")
```

### Differences in Tabular Format

- If there is any information that can be represented in a tabular format, present it as a table.
- Provide clear column headings and align the content accordingly.

### Inclusion of Examples

- Include examples clearly if provided.
- Use clear formatting to distinguish examples from the rest of the text.

### Content Preservation

- Do not generate any content on your own.
- Format the provided content without changing its meaning or length.

### Metadata
```
source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
page: 297
```

## Elementary Statistics

### Mean

- Definition: The average of a set of numbers.
- Formula:

```
𝜇 = 1/N * ∑(𝑖=0 to 𝑁-1) 𝑥𝑖
```

- Example:
  - Given the data set [2, 4, 6, 8, 10], the mean is (2 + 4 + 6 + 8 + 10) / 5 = 6.

### Normal Distribution

- Assumption:
  - If the distribution of values about the mean is unknown, it can be assumed to be normally distributed.
- Characteristics:
  - Bell-shaped curve
  - Symmetrical around the mean
  - Most values close to the mean, with fewer values further away"
"page_content='284 Data analysis and presentation
On the 𝑥-axis are the values we might measure, and on the𝑦-axis we
have the probability of observing a particular value. In a normal distri-
bution, the mean is the most likely value for an observation, and the
greater the distance from the mean, the less likely a given value. The
standard deviation tells us how spread out values are about the mean. If
the standard deviation is large, we have a broad curve:
With a smaller standard deviation, we have a narrow curve with a higher
peak.
The area under these curves is equal.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 298}","## Data Analysis and Presentation

**Metadata**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 298

### Normal Distribution

A normal distribution is a bell-shaped curve that describes the probability of observing a particular value. The mean is the most likely value for an observation, and the greater the distance from the mean, the less likely a given value. The standard deviation tells us how spread out values are about the mean.

**Key Features**

* Values are plotted on the x-axis.
* Probabilities are plotted on the y-axis.
* The mean is the most likely value.
* The standard deviation determines the spread of values.

**Impact of Standard Deviation**

* **Large Standard Deviation:** Broad curve.
* **Small Standard Deviation:** Narrow curve with a higher peak.

### Area Under the Curve

The area under the normal distribution curve represents equal probability."
"page_content='Some elementary statistics 285
If we had a standard deviation of zero, that would mean that every
value in the data set is identical (that doesn’t happen often). The point
is that the greater the standard deviation, the greater the variation there
is in the data.
Just like we can calculate the mean of our data, we can also calculate
the standard deviation. Thestandard deviation , written 𝜎, is given
by
𝜎 =
√√√
⎷
1
𝑁
𝑁 −1
∑
𝑖 = 0
(𝑥𝑖 − 𝜇)2 .
Let’s unpack this. First, remember the goal of this measure is to tell
us how much variation there is in the data. But variation with respect
to what? Look at the expression(𝑥𝑖 − 𝜇)2 . We subtract the mean,𝜇,
from each value in the data set𝑥𝑖 . This tells us how far the value of a
given observation is from the mean. But we care more about the distance
from the mean rather than whether a given value is above or below the
mean. That’s where the squaring comes in. When we square a positive
number we get a positive number. When we square a negative number
we get a positive number. So by squaring the difference between a given
value and the mean, we’re eliminating the sign. Then, we divide the
sum of these squared differences by the number of elements in the data
set (just as we do when calculating the mean). Finally, we take the
square root of the result. Why do we do this? Because by squaring the
differences, we stretch them, changing the scale. For example,5 − 2 = 3,
but 52 −22 = 25−4 = 21 . So this last step, taking the square root, returns
the result to a scale appropriate to the data. This is how we calculate
standard deviation.
2
As we calculate the summation, we perform the calculation(𝑥𝑖 − 𝜇)2 .
On this account, we cannot usesum(). Instead, we must calculate this in
a loop. However, this is not too terribly complicated, and implementing
this in Python is left as an exercise for the reader.
2 Strictly speaking, this is the population standard deviation, and is used if the
data set represents the entire universe of possible observations, rather than just a
sample. There’s a slightly different formula for the sample standard deviation.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 299}","# Page 299
## Elementary Statistics
### Standard Deviation

The standard deviation (denoted as 𝜎) measures the variation within a dataset. A standard deviation of zero indicates that all values in the dataset are identical. The greater the standard deviation, the greater the variation.

#### Calculation of Standard Deviation

The formula for calculating the standard deviation is:

```
𝜎 = √√√
⎷
1
𝑁
𝑁 −1
∑
𝑖 = 0
(𝑥𝑖 − 𝜇)2
```

where:

- 𝑥𝑖 is each value in the dataset
- 𝜇 is the mean of the dataset
- 𝑁 is the number of elements in the dataset

#### Interpretation of Standard Deviation

The standard deviation indicates the degree of data dispersion. It provides information about how far the data values are spread out from the mean. A smaller standard deviation indicates that the data values are clustered close to the mean, while a larger standard deviation indicates that the data values are more spread out.

#### Note

The formula provided calculates the population standard deviation, which assumes that the dataset represents the entire universe of possible observations. For a sample, the formula slightly differs."
"page_content='286 Data analysis and presentation
Assuming we have implemented this correctly, in a function
named std_dev(), if we apply this to the data and print with
print(f""{std_dev(data):.4f}""), we get 4.6569.
How do we interpret this? Again, the standard deviation tells us how
spread out values are about the mean. Higher values mean that the data
are more spread out. Lower values mean that the data are more closely
distributed about the mean.
What practical use is the standard deviation? There are many uses,
but it’s commonly used to identify unusual or “unlikely” observations.
We can calculate the area of some portion under the normal curve.
Using this fact, we know that given a normal distribution, we’d expect to
find 68.26% of observations within one standard deviation of the mean.
We’d expect 95.45% of observations within two standard deviations of
the mean. Accordingly, the farther from the mean, the less likely an
observation. If we express this distance in standard deviations, we can
determine just how likely or unlikely an observation might be (assuming
a normal distribution). For example, an observation that’s more than
five standard deviations from the mean would be very unlikely indeed.
Range Expected fraction in range
𝜇 ± 𝜎 68.2689%
𝜇 ± 2𝜎 95.4500%
𝜇 ± 3𝜎 99.7300%
𝜇 ± 4𝜎 99.9937%
𝜇 ± 5𝜎 99.9999%
When we have real-world data, it’s not often perfectly normally dis-
tributed. By comparing our data with what would be expected if it were
normally distributed we can learn a great deal.
Returning to our dentists example, we can look for possible outliers
by iterating through our data and finding any values that are greater
than two standard deviations from the mean.
m = mean(data)
std = std_dev(data)
outliers = []
for datum in data:
if abs(datum) > m + 2 * std:
outliers.append(datum)
In doing so, we find two possible outliers—14.81, 16.95—which corre-
spond to Chile and Uruguay, respectively. This might well lead us to
ask, “Why are there so many dentists per 10,000 population in these
particular countries?”' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 300}","### Data Analysis and Presentation

#### Interpreting the Standard Deviation

The standard deviation measures how spread out the data is about the mean. Higher values indicate greater spread, while lower values indicate closer distribution.

#### Practical Uses of the Standard Deviation

One common use of the standard deviation is to identify unusual or unlikely observations. By calculating the area under the normal curve, we can determine the expected fraction of observations within a given number of standard deviations from the mean:

| Range | Expected Fraction in Range |
|---|---|
| µ ± σ | 68.2689% |
| µ ± 2σ | 95.4500% |
| µ ± 3σ | 99.7300% |
| µ ± 4σ | 99.9937% |
| µ ± 5σ | 99.9999% |

#### Detecting Outliers

For real-world data, it is unusual to have perfect normal distribution. Comparing actual data with expected normal distribution can help identify outliers:

```python
m = mean(data)
std = std_dev(data)
outliers = []
for datum in data:
    if abs(datum) > m + 2 * std:
        outliers.append(datum)
```

**Example:**

In the dentists example, two possible outliers are: 14.81 (Chile) and 16.95 (Uruguay). This prompts the question of why these countries have higher dentists per 10,000 population."
"page_content='Python’s statistics module 287
14.2 Python’s statistics module
While implementing standard deviation (either for a sample or for an
entire population) is straightforward in Python, we don’t often write
functions like this ourselves (except when learning how to write func-
tions). Why? Because Python provides a statistics module for us.
We can use Python’sstatistics module just like we do with themath
module. First we import the module, then we have access to all the
functions (methods) within the module.
Let’s start off using Python’s functions for mean and population stan-
dard deviation. These arestatistics.mean() and statistics.pstdev(),
and they each take an iterable of numeric values as arguments.
import csv
import statistics
data = []
with open('dentists_per_10k.csv', newline='') as fh:
reader = csv.reader(fh)
next(reader) # skip the first row
for row in reader:
data.append(float(row[1]))
print(f""{statistics.mean(data):.4f}"")
print(f""{statistics.pstdev(data):.4f}"")
When we run this, we see that the results for mean and standard
deviation—5.1391 and 4.6569, respectively—are in perfect agreement
with the results reported above.
The statistics module comes with a great many functions including:
• mean()
• median()
• pstdev()
• stdev()
• quantiles()
among others.
Using the statistics module to calculate quantiles
Quantiles divide a data set into continuous intervals, with each interval
having equal probability. For example, if we divide our data set into
quartiles (𝑛 = 4), then each quartile represents 1/4 of the distribution. If
we divide our data set into quintiles (𝑛 = 5), then each quintile represents
1/5 of the distribution. If we divide our data into percentiles (𝑛 = 100),
then each percentile represents 1/100 of the distribution.
You may have seen quantiles—specifically percentiles—before, since
these are often reported for standardized test scores. If your score was in
the 80th percentile, then you did better than 79% of others taking the' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 301}","## Python's Statistics Module

### Introduction

Python provides a statistics module that offers a range of functions for statistical calculations, including mean, standard deviation, and quantiles.

### Using the Statistics Module

To use the statistics module, import it:

```python
import statistics
```

### Calculating Mean and Standard Deviation

```python
data = [1, 2, 3, 4, 5]
mean = statistics.mean(data)
stdev = statistics.stdev(data)
```

### Quantiles

Quantiles divide a dataset into equal probability intervals.

| Number of Quantiles | Probability | Description |
|---|---|---|
| 4 (quartiles) | 1/4 | Divides dataset into 4 equal parts |
| 5 (quintiles) | 1/5 | Divides dataset into 5 equal parts |
| 100 (percentiles) | 1/100 | Divides dataset into 100 equal parts |

### Quantile Calculation

```python
quantiles = statistics.quantiles(data, n)
```

where:

* `data` is the dataset
* `n` is the number of quantiles to divide the dataset into

### Example

```python
data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
percentiles = statistics.quantiles(data, 10)
print(percentiles)
```

Output:

```
[1, 2.333333333333333, 3, 4, 5, 6, 7, 8, 8.666666666666666, 10]
```"
"page_content='288 Data analysis and presentation
test. If your score was in the 95th percentile, then you’re in the top 5%
all those who took the test.
Let’s use thestatistics module to find quintiles for our dentists data
(recall that quintiles divide the distribution into five parts).
If we importcsv and statistics and then read our data (as above),
we can calculate the values which divide the data into quintiles thus:
quintiles = statistics.quantiles(data, n=5)
print(quintiles)
Notice that we pass the data to the function just as we did withmean()
and pstdev(). Here we also supply a keyword argument,n=5, to indicate
we want quintiles. When we print the result, we get
[0.274, 2.2359999999999998, 6.590000000000001, 8.826]
Notice we havefour values, which divide the data intofive equal parts.
Any value below 0.274 is in the first quintile. Values between 0.274 and
0.236 (rounding) are in the second quartile, and so on. Values above
8.826 are in the fifth quintile.
If we check the value for the United States of America (not shown
in the table above), we find that the USA has 5.99 dentists per 10,000
population, which puts it squarely in the third quartile. Countries with
more than 8.826 dentists per 10,000—those in the top fifth—are Belgium
(11.33), Chile (14.81), Costa Rica (10.58), Israel (8.88), Lithuania (13.1),
Norway (9.29), Paraguay (12.81), and Uruguay (16.95). Of course, in-
terpreting these results is a complex matter, and results are no doubt
influenced by per capita income, number and size of accredited dental
schools, regulations for licensure and accreditation, and other infrastruc-
ture and economic factors.
3
Other functions in the statistics module
I encourage you to experiment with these and other functions in the
statistics module. If you have a course in which you’re expected to calcu-
late means, standard deviations, and the like, you might consider doing
away with your spreadsheet and trying this in Python!
14.3 A brief introduction to plotting with
Matplotlib
Now that we’ve seen how to read data from a file, and how to generate
some descriptive statistics for the data, it makes sense that we should
address visual presentation of data. For this we will use a third-party4
module: Matplotlib.
3 I’m happy with my dentist here in V ermont, but I will say she’s booking ap-
pointments over nine months in advance, so maybe a few more dentists in the USA
wouldn’t be such a bad thing.
4 i.e, not provided by Python or written by you' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 302}","## Data Analysis and Presentation

### Quantiles

Quantiles divide a distribution into equal parts. To find quintiles (which divide the distribution into five parts) using the statistics module, we can:

#### Python Code
```python
import statistics
data = [0.274, 2.2359999999999998, 6.590000000000001, 8.826]
quintiles = statistics.quantiles(data, n=5)
print(quintiles)
```

This will output:

```
[0.274, 2.2359999999999998, 6.590000000000001, 8.826]
```

### Interpreting Quintile Results

* Values below 0.274 are in the first quintile.
* Values between 0.274 and 2.236 are in the second quintile.
* Values between 2.236 and 6.59 are in the third quintile.
* Values between 6.59 and 8.826 are in the fourth quintile.
* Values above 8.826 are in the fifth quintile.

For example, if the United States of America has 5.99 dentists per 10,000 population, it would be in the third quartile.

### Other Functions in the Statistics Module

The statistics module offers various other functions for statistical analysis, including:

| Function | Purpose |
|---|---|
| mean() | Calculate the mean (average) |
| pstdev() | Calculate the population standard deviation |
| pvariance() | Calculate the population variance |
| median() | Calculate the median |
| mode() | Calculate the mode(s) |

### Plotting with Matplotlib

Matplotlib is a third-party module used for data visualization. It allows users to create various types of plots, including line charts, bar charts, and scatter plots.

metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 302}"
"page_content='A brief introduction to plotting with Matplotlib 289
Matplotlib is a feature-rich module for producing a wide array of
graphs, plots, charts, images, and animations. It is thede facto standard
for visual presentation of data in Python (yes, there are some other tools,
but they’re not nearly as widely used).
Since Matplotlib is not part of the Python core library (like themath,
csv, andstatistics modules we’ve seen so far), we need to install Mat-
plotlib before we can use it.
The installation process for third-party Python modules is unlike
installing an app on your phone or desktop. Some IDEs (PyCharm,
Thonny, VS Code,etc.) have built-in facilities for installing such modules.
IDLE (the Python-supplied IDE) does not have such a facility. Accord-
ingly, we won’t get into the details of installation here (since details will
vary from OS to OS, machine to machine), though if you’re the DIY type
and aren’t using PyCharm, Thonny, or VS Code, you may findAppendix
C: pip and venv helpful.
Here are some examples of plots made with Matplotlib (from the
Matplotlib gallery at matplotlib.org):' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 303}","**Introduction to Plotting with Matplotlib**
```python
# Python code example
print(""Hello, World!"")
```

**1. What is Matplotlib?**

Matplotlib is a comprehensive Python module for creating and visualizing data. It enables users to produce various graphs, charts, images, and animations. It is the industry standard for data visualization in Python.

**2. Installation**

Matplotlib is not part of the Python core library. To use it, you must install it separately. The installation process varies depending on your operating system and environment. For manual installation instructions, refer to the provided resources.

**3. Examples of Matplotlib Plots**

The official Matplotlib gallery contains numerous examples of plots created using the library:
- [Link to Matplotlib Gallery](https://matplotlib.org/)"
"page_content='290 Data analysis and presentation
For more examples and complete (very well-written) documentation,
visit https://matplotlib.org.
14.4 The basics of Matplotlib
We’re just going to cover the basics here. Why? Because Matplotlib has
thousands of featuresand it has excellent documentation. So we’re just
going to dip a toe in the waters.
For more, see:
• Matplotlib website:https://matplotlib.org
• Getting started guide:https://matplotlib.org/stable/users/gettin
g_started
• Documentation: https://matplotlib.org/stable/index.html
• Quick reference guides and handouts:https://matplotlib.org/che
atsheets' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 304}","## Matplotlib Basics

### Metadata

- Page Number: 304
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Introduction

Matplotlib is a powerful library for data analysis and presentation. With thousands of features and excellent documentation at https://matplotlib.org, it is a comprehensive resource for data visualization.

### Key Features

- **Data Analysis:** Matplotlib provides tools for data exploration, analysis, and manipulation.
- **Presentation:** It offers a wide range of visualization options for presenting data clearly and effectively.
- **Extensive Capabilities:** Matplotlib includes support for various data types, including 2D plots, 3D plots, and interactive figures.

### Getting Started

- Website: https://matplotlib.org
- Getting Started Guide: https://matplotlib.org/stable/users/getting_started
- Documentation: https://matplotlib.org/stable/index.html
- Quick Reference Guides: https://matplotlib.org/cheatsheets"
"page_content='The basics of Matplotlib 291
The most basic basics
We’ll start with perhaps the simplest interface provided by Matplotlib,
called pyplot. To usepyplot we usually import and abbreviate:
import matplotlib.pyplot as plt
Renaming isn’t required, but it is commonplace (and this is how it’s done
in the Matplotlib documentation). We’ve seen this syntax before—using
asto give a name to an object without using the assignment operator
(=). It’s very much like giving a name to a file object when using thewith
context manager. Here we givematplotlib.pyplot a shorter nameplt so
we can refer to it easily in our code. This is almost as if we’d written
import matplotlib.pyplot
plt = matplotlib.pyplot
Almost.
Now let’s generate some data to plot. We’ll generate random numbers
in the interval(−1.0, 1.0).
import random
data = [0]
for _ in range(100):
data.append(data[-1]
+ random.random()
* random.choice([-1, 1]))
So now we’ve got some random data to plot. Let’s plot it.
plt.plot(data)
That’s pretty straightforward, right?
Now let’s label our𝑦 axis.
plt.ylabel('Random numbers (cumulative)')
Let’s put it all together and display our plot.
import random
import matplotlib.pyplot as plt
data = [0]
for _ in range(100):
data.append(data[-1]
+ random.random()
* random.choice([-1, 1]))' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 305}","## Formatting Instructions

**Content Structuring:**

- Identify key sections and organize them under appropriate headings and subheadings.
- Ensure logical flow and clarity in the content.

**Metadata Inclusion:**

- Include all metadata such as page numbers, line numbers, and source names as provided.
- Clearly indicate the metadata at the beginning or in relevant sections.

**Code Formatting:**

- If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
- Mention the programming language before the triple backticks.

Example:

```python
# Python code example
print(""Hello, World!"")
```

**Tabular Formatting:**

- Give differences in tabular format if possible.

**Example Inclusion:**

- Include examples clearly if provided.

**Content Length:**

- Do not modify the length of the provided content.

## Content

### The Basics of Matplotlib

### The Most Basic Basics

**Using pyplot**

```python
import matplotlib.pyplot as plt
```

Renaming plt is not mandatory, but it is common practice.

**Generating Data**

```python
import random
data = [0]
for _ in range(100):
    data.append(data[-1]
    + random.random()
    * random.choice([-1, 1]))
```

### Plotting

```python
plt.plot(data)
```

### Labeling and Displaying

```python
plt.ylabel('Random numbers (cumulative)')
```

```python
plt.show()  # Display the plot
```

### Metadata

**Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
**Page:** 305"
"page_content='292 Data analysis and presentation
plt.plot(data)
plt.ylabel('Random numbers (cumulative)')
plt.show()
It takes only one more line to save our plot as an image file. We call
the savefig() method and provide the file name we’d like to use for
our plot. The plot will be saved in the current directory, with the name
supplied.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 306}","**Formatting Instructions:**

**1. Content Structuring:**

- Key sections are identified and organized under appropriate headings and subheadings.
- Logical flow and clarity are ensured in the content.

**2. Metadata Inclusion:**

- Page number: 306
- Line number: Not provided
- Source name: An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**3. Code Formatting:**

- Python code example is provided with proper syntax highlighting and enclosed within triple backticks.

**4. Tabular Format:**

- No tables are included in the provided content.

**5. Examples:**

- The content does not include any examples.

**Formatted Content:**

**Section 1: Plotting Random Numbers**

**Creating a Line Plot of Random Numbers**

```python
import matplotlib.pyplot as plt
import numpy as np

# Generate random data
data = np.random.rand(100)

# Create a line plot of the random data
plt.plot(data)

# Set the y-axis label
plt.ylabel('Random numbers (cumulative)')

# Display the plot
plt.show()
```

**Saving a Plot as an Image File**

```python
# Save the plot as an image file
plt.savefig('random_numbers.png')
```

**Metadata**

- Page: 306
- Source: An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf"
"page_content='The basics of Matplotlib 293
import random
import matplotlib.pyplot as plt
data = [0]
for _ in range(100):
data.append(data[-1]
+ random.random()
* random.choice([-1, 1]))
plt.plot(data)
plt.ylabel('Random numbers (cumulative)')
plt.savefig('my_plot.png')
plt.show()
That’s it. Our first plot—presented and saved to file.
Let’s do another. How about a bar chart? For our bar chart, we’ll use
this as data (which is totally made up by the author):
Flavor Servings
Cookie dough 9,214
Strawberry 3,115
Chocolate 5,982
Vanilla 2,707
Fudge brownie 6,553
Mint chip 7,005
Kale and beet 315
Let’s assume we have this saved in a CSV file calledflavors.csv. We’ll
read the data from the CSV file, and produce a simple bar chart.
import csv
import matplotlib.pyplot as plt
servings = [] # data
flavors = [] # labels
with open('flavors.csv') as fh:
reader = csv.reader(fh)
for row in reader:
flavors.append(row[0])
servings.append(int(row[1]))
plt.bar(flavors, servings)
plt.xticks(flavors, rotation=-45)
plt.ylabel(""Servings"")
plt.xlabel(""Flavor"")
plt.tight_layout()' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 307}","**Formatting Instructions:**

### Content Structuring:

1. **Content Structuring:**  
   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**  
   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**  
   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

   Example:
   ```python
   # Python code example
   print(""Hello, World!"")
   
4. **give difference in tabular format if possible** 
5. **include examples clearly if provided**   
6. **do not generate any content by your self just format privided content also keep answers in breif do not cut short it just put it full content as it is without changing any thing**
   if content is of 1000 words give all 1000 words do not cut short it stirictly follow this rule no content or should be modified give exact same length content as provided
   
### Metadata:

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 307

### Content:

**The Basics of Matplotlib**

To demonstrate the basics of Matplotlib, we'll create a simple line plot.

```python
import random
import matplotlib.pyplot as plt

# Generate some random data
data = [0]
for _ in range(100):
    data.append(data[-1] + random.random() * random.choice([-1, 1]))

# Create the plot
plt.plot(data)
plt.ylabel('Random numbers (cumulative)')
plt.savefig('my_plot.png')
plt.show()
```

Now, let's create a bar chart using data stored in a CSV file.

```python
import csv
import matplotlib.pyplot as plt

# Read the data from the CSV file
with open('flavors.csv') as fh:
    reader = csv.reader(fh)
    flavors = [] # labels
    servings = [] # data
    for row in reader:
        flavors.append(row[0])
        servings.append(int(row[1]))

# Create the bar chart
plt.bar(flavors, servings)
plt.xticks(flavors, rotation=-45)
plt.ylabel(""Servings"")
plt.xlabel(""Flavor"")
plt.tight_layout()
```"
"page_content='294 Data analysis and presentation
plt.show()
V oilá! A bar plot!
Notice that we have two lists: one holding the servings data, the
other holding the 𝑥-axis labels (the flavors). Instead ofplt.plot() we
use plt.bar() (makes sense, right?) and we supply flavors and servings
as arguments. There’s a little tweak we give to the𝑥-axis labels, we ro-
tate them by 45 degrees so they don’t all mash into one another and
become illegible.plt.tight_layout() is used to automatically adjust the
padding around the plot itself, leaving suitable space for the bar labels
and axis labels.
Be aware of how plt.show() behaves
When you callplt.show() to display your plot, Matplotlib creates a win-
dow and displays the plot in the window. At this point, your program’s
execution will pause until you close the plot window. When you close
the plot window, program flow will resume.
Summary
Again, this isn’t the place for a complete presentation of all the features
of Matplotlib. The intent is to give you just enough to get started. Fortu-
nately, the Matplotlib documentation is excellent, and I encourage you
to look there first for examples and help.
• https://matplotlib.org' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 308}","### Metadata
- Page: 308
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

## Data Analysis and Presentation

### Bar Plot
```python

import matplotlib.pyplot as plt

# Data
flavors = ['Chocolate', 'Vanilla', 'Strawberry', 'Pistachio', 'Coffee']
servings = [5, 4, 6, 2, 7]

# Create bar plot
plt.bar(flavors, servings)

# Customize bar plot
plt.xlabel('Flavors')
plt.ylabel('Servings')
plt.xticks(rotation=45) # Rotate x-axis labels by 45 degrees
plt.tight_layout() # Adjust padding around the plot

# Display the plot
plt.show()
```

### Behavior of plt.show()
When plt.show() is called, Matplotlib creates a window and displays the plot within that window. At this point, program execution pauses until the plot window is closed, at which point program flow resumes."
"page_content='Exceptions 295
14.5 Exceptions
StatisticsError
The statistics module has its own type of exception,StatisticsError.
You may encounter this if you try to find the mean, median, or mode of
an empty list.
>>> statistics.mean([])
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
File ""/.../python3.10/statistics.py"", line 328, in mean
raise StatisticsError('mean requires at least one data
point')
statistics.StatisticsError: mean requires at least one data
point
This is also raised if you specify less than one quantile.
>>> statistics.quantiles([3, 6, 9, 5, 1], n=0)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
File ""/.../python3.10/statistics.py"", line 658,
in quantiles
raise StatisticsError('n must be at least 1')
statistics.StatisticsError: n must be at least 1
StatisticsError is actually a more specific type ofValueError.
Exceptions when using Matplotlib
There are many different exceptions that could be raised if you make
programmingerrorswhileusingMatplotlib.Theexceptionandhowtofix
it will depend on context. If you encounter an exception from Matplotlib,
your best bet is to consult the Matplotlib documentation.
14.6 Exercises
Exercise 01
Trycreatingyourownsmalldataset(onedimension,fivetotenelements)
and plot it. Follow the examples given in this chapter. Plot your data as
a line plot and as a bar plot.
Exercise 02
Matplotlib supports scatter plots too. In a scatter plot, each data point
is a pair of values,𝑥 and 𝑦. Here’s what a scatter plot looks like.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 309}","## Formatting Instructions

### Metadata
- Page Number: 309
- Line Numbers: 295-314
- Source: Statistical Data Analysis using Pandas and Python

## Content Formatting

### 14.5 Exceptions

#### StatisticsError

The statistics module has a dedicated exception type called StatisticsError. This exception may occur when attempting to calculate the mean, median, or mode of an empty list.

```python
>>> statistics.mean([])
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/.../python3.10/statistics.py"", line 328, in mean
  raise StatisticsError('mean requires at least one data
point')
statistics.StatisticsError: mean requires at least one data
point
```

Another instance where StatisticsError is raised is when attempting to specify less than one quantile.

```python
>>> statistics.quantiles([3, 6, 9, 5, 1], n=0)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/.../python3.10/statistics.py"", line 658,
  in quantiles
  raise StatisticsError('n must be at least 1')
statistics.StatisticsError: n must be at least 1
```

StatisticsError is a more specific type of ValueError.

### Exceptions when using Matplotlib

There are various exceptions that may arise when using Matplotlib due to programming errors. The specific exception and its resolution will vary depending on the context. In case of encountering an exception from Matplotlib, it is recommended to consult the Matplotlib documentation.

### 14.6 Exercises

**Exercise 01:**

**Instructions:**

- Create a small dataset with one dimension and 5-10 elements.
- Plot the data as a line plot and a bar plot.

**Example:**

```python
# Create a dataset
data = [1, 2, 3, 4, 5]

# Plot a line plot
plt.plot(data)
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Line Plot')
plt.show()

# Plot a bar plot
plt.bar(data)
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Bar Plot')
plt.show()
```

**Exercise 02:**

**Instructions:**

- Create a scatter plot using Matplotlib.

**Example:**

```python
# Create a dataset
x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

# Plot a scatter plot
plt.scatter(x, y)
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Scatter Plot')
plt.show()
```"
"page_content='296 Data analysis and presentation
Create your own data (or find something suitable on the internet) and
create your own scatter plot.𝑥 values should be in one list, corresponding
𝑦 values should be in another list. Both lists should have the exact same
number of elements. If these are calledxs and ys, then you can create a
scatter plot with
plt.scatter(xs, ys)
Make sure you display your plot, and save your plot as an image file.
Exercise 03
Edwina has calculated the mean and standard deviation of her data
set—measurements of quill length in crested porcupines (species:Hystrix
cristata). She has found that the mean is 31.2 cm and the standard
deviation is 7.9 cm.
a. If one of the quills in her sample is 40.5 cm, should she consider
this an unusually long quill? Why or why not?
b. What if there’s a quill that’s 51.2 cm? Should this be considered
unusually long? Why or why not?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 310}","## Data Analysis and Presentation

### Exercise 01
* Create your own data (or find something suitable on the internet) and create your own scatter plot.
  * `x` values should be in one list, corresponding `y` values should be in another list.
  * Both lists should have the exact same number of elements.
  * If these are called `xs` and `ys`, then you can create a scatter plot with:
```python
    plt.scatter(xs, ys)
```
* Make sure to display your plot and save it as an image file.

### Exercise 03

## Analysis of Quill Length Data in Crested Porcupines

### Background
Edwina has calculated the mean and standard deviation of her data set—measurements of quill length in crested porcupines (`Hystrix cristata`). She has found that the mean is `31.2` cm and the standard deviation is `7.9` cm.

### Exercise Questions
**a. If one of the quills in her sample is `40.5` cm, should she consider this an unusually long quill? Why or not?**
* To determine if a quill's length is unusually long, we need to compare it to the mean and standard deviation.
* Z-score of the quill: `Z = (40.5 - 31.2) / 7.9 = 1.196`.
* Using a standard normal distribution table, we find that the probability of obtaining a Z-score of `1.196` is approximately `0.117`.
* In other words, there is an approximately **12%** probability of obtaining a quill length as long as `40.5` cm in this population.

**b. What if there’s a quill that’s `51.2` cm? Should this be considered unusually long? Why or not?**
* Z-score of the quill: `Z = (51.2 - 31.2) / 7.9 = 2.538`.
* The probability of obtaining a Z-score of `2.538` is approximately `0.011`.
* This means that there is only about a **1.1%** chance of obtaining a quill length as long as `51.2` cm in this population. Therefore, this quill can be considered unusually long."
"page_content='Exercises 297
Exercise 04
Consider the two distributions shown, A and B.
a. Which of these has the greater mean?
b. Which of these has the greater standard deviation?
c. Which of these curves have the greater area under them? (hint: this
is a trick question)
Exercise 05
The geometric mean is another kind of mean used in statistics and fi-
nance. Rather than summing all the values in the data and then dividing
by the number of values, we take theproduct of all the values, and then,
if there are𝑁 values, we take the𝑁 th root of the result. Typically, this
is only used when all values in the data set are positive.
We define the geometric mean:
𝛾 = (
𝑁 −1
∏
𝑖 = 0
𝑥𝑖 )
1
𝑁
where the ∏ symbol signifies repeated multiplication. Just as∑ says
“add them all up”,∏ means “multiply them all together.”
We can calculate the𝑁 th root of a number using exponentiation by
a fraction as shown. For example, to calculate the cube root of some𝑥,
we can usex ** (1 / 3).
Implement a function which calculates the geometric mean of an arbi-
trary list of positive numeric values. You can verify your result by com-
paring the output of your function with the output of thestatistics
module’s geometric_mean() function.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 311}","**Exercises**

**Exercise 04**

**Distribution Comparison:**

| Feature | Distribution A | Distribution B |
|---|---|---|
| Mean | Greater | Lower |
| Standard Deviation | Smaller | Greater |
| Area under Curve | Equal | Equal |

**Explanation:**

* **Mean:** Distribution A has a higher peak and is concentrated more towards the right, indicating a higher mean.
* **Standard Deviation:** Distribution B has a wider spread and more dispersion, indicating a higher standard deviation.
* **Area under Curve:** Both curves represent the same probability distribution, so they have equal areas under them.

**Exercise 05**

**Geometric Mean**

**Definition:**

The geometric mean (γ) of a set of N positive values (x0, x1, ..., xN-1) is defined as:

```python
γ = ((x0 * x1 * ... * xN-1) ** (1/N))
```

**Calculation:**

* Multiply all the values together.
* Take the Nth root of the product using exponentiation: x ** (1/N).

**Example:**

To calculate the geometric mean of [2, 4, 8, 16], we do:

```python
γ = ((2 * 4 * 8 * 16) ** (1/4)) = 6.3246
```"
"page_content='Chapter 15
Exception handling
We’ve seen a lot of exceptions so far:
• SyntaxError
• IndentationError
• AttributeError
• NameError
• TypeError
• IndexError
• ValueError
• ZeroDivisionError
• FileNotFoundError
These are exceptions defined by Python, and which areraised when
certain errors occur. (There are many,many other exceptions that are
outside the scope of this textbook.)
When anunhandled exception occurs, your program terminates. This
is usually an undesired outcome.
Here we will see that some of these exceptions can be handled grace-
fully using try and except—these go together, hand in hand. In atry
block, we include the code that we thinkmight raise an exception. In
the followingexcept block, wecatch or handle certain exceptions. What
we do in theexcept block will depend on the desired behavior for your
program.
However, we’ll also see that some of these— SyntaxError and
IndentationError for example—can’t be handled, since these occur when
Python is first reading your code, prior to execution.
We’ll also see that some of these exceptions only occur when there’s a
defect in our code that we do not want to handle! These are exceptions
like AttributeError and NameError. Trying to handle these covers up de-
fects in our code that we should repair. Accordingly, there aren’t many
cases where we’d even want to handle these exceptions.
Sometimes we want to handleTypeError or IndexError. It’s very often
the case that we want to handleValueError or ZeroDivisionError. It’s
almost always the case that we want to handleFileNotFoundError. Much
of this depends on context, and there’s a little art in determining which
exceptions are handled, and how they should be handled.
299' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 313}","## Chapter 15: Exception Handling

### Metadata
* **Source:** C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* **Page:** 313

### Key Sections

#### Exceptions Raised by Python

* SyntaxError
* IndentationError
* AttributeError
* NameError
* TypeError
* IndexError
* ValueError
* ZeroDivisionError
* FileNotFoundError

#### Handling Exceptions

* **try and except Blocks:**
    * **try Block:** Contains code that might raise an exception.
    * **except Block:** Catches or handles specific exceptions.

#### Exceptions that Cannot be Handled

* SyntaxError and IndentationError: Occur before code execution.

#### Exceptions to Handle and Not Handle

* **Handle:** TypeError, IndexError, ValueError, ZeroDivisionError, FileNotFoundError
* **Do Not Handle:** AttributeError, NameError

#### Examples

* Handling a FileNotFoundError:

    ```python
    try:
        with open('myfile.txt') as f:
            content = f.read()
    except FileNotFoundError:
        print(""File not found."")
    ```"
"page_content='300 Exception handling
Learning objectives
• You will understand why many of the Python exceptions are raised.
• You will learn how to deal with exceptions when they are raised,
and how to handle them gracefully.
• You will learn that sometimes it’s not always best to handle every
exception that could be raised.
T erms introduced
• exception handling
• “it’s easier to ask forgiveness than it is to ask for permission”
(EAFP)
• “look before you leap” (LBYL)
• raise (an exception)
• try/except
15.1 Exceptions
By this time, you’ve seen quite a few exceptions. Exceptions occur when
something goes wrong. We refer to this asraising an exception.
Exceptions may be raised by the Python interpreter or by built-in
functions or by methods provided by Python modules. You may even
raise exceptions in your own code (but we’ll get to that later).
Exceptions include information about the type of exception which has
been raised, and where in the code the exception occurred. Sometimes,
quite a bit of information is provided by the exception. In general, a
good approach is to start at the last few lines of the exception message,
and work backward if necessary to see what went wrong.
There are many types of built-in exceptions in Python. Here are a few
that you’re likely to have seen before.
SyntaxError
When a module is executed or imported, Python will read the file, and
try parsing the file. If, during this process, the parser encounters a syntax
error, a SyntaxError exception is raised.SyntaxError can also be raised
when invalid syntax is used in the Python shell.
>>> # if requires a condition and colon
>>> if
File ""<stdin>"", line 1
if
^
SyntaxError: invalid syntax
Here you see the exception includes information about the error and
where the error occurred. The^ is used to point to a portion of code
where the error occurred.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 314}","## Exception Handling

### Learning Objectives

- Understand why many Python exceptions are raised.
- Deal with exceptions when raised and handle them gracefully.
- Recognize that handling every exception is not always necessary.

### Key Terms

- Exception handling
- ""It's easier to ask forgiveness than it is to ask for permission"" (EAFP)
- ""Look before you leap"" (LBYL)
- Raise (an exception)
- Try/except

### Exceptions

- Occur when something goes wrong, known as ""raising an exception.""
- Can be raised by the Python interpreter, built-in functions, or methods provided by Python modules.
- Include information about the type of exception and where it occurred.
- Start at the last few lines of the exception message to troubleshoot.

### Types of Built-in Exceptions

| Exception Type | Description |
|---|---|
| SyntaxError | Raised during parsing when encountering syntax errors |
| NameError | Raised when a variable name is not found |
| TypeError | Raised when an operation or function is applied to an incorrect type |
|ValueError | Raised when an argument is of the correct type but has an invalid value |
| IndexError | Raised when an index of a sequence is out of range |

### Example:

```python
# Example of a SyntaxError
if:
    print(""Hello"")
# This line will raise a SyntaxError because it is missing a colon after the 'if' statement
```"
"page_content='Exceptions 301
IndentationError
IndentationError is a subtype of SyntaxError. Recall that indentation
is significant in Python—we use it to structure branches, loops, and
functions. SoIndentationError occurs when Python encounters a syntax
error that it attributes to invalid indentation.
if True:
x = 1 # This should be indented!
File ""<stdin>"", line 2
x = 1 # should be indented
^
IndentationError: expected an indented block
after 'if' statement on line 1
Again, almost everything you need to know is included in the last few
lines of the message. Here Python is informing us that it was expecting
an indented block of code immediately following anif statement.
AttributeError
There are several ways anAttributeError can be raised. You may have
encountered anAttributeError by misspelling the name of a method in
a module you’ve imported.
>>> import math
>>> math.foo # There is no such method or constant in math
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
AttributeError: module 'math' has no attribute 'foo'
An AttributeError is different from aSyntaxError in that it occurs
at runtime, and not during the parsing or early processing of code. An
AttributeError is only related to the availability ofattributes and not
violations of the Python syntax rules.
NameError
ANameError is raised when Python cannot find an identifier. For example,
if you were to try to perform a calculation with some variablex without
previously having assigned a value tox.
>>> x + 1 # Without having previously assigned a value to x
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'x' is not defined
Any attempted access of an undefined variable will result in a
NameError.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 315}","## Exceptions

### Page 315

#### IndentationError

- Subtype of SyntaxError.
- Occurs when Python encounters an invalid indentation while structuring branches, loops, and functions.

**Example:**

```python
if True:
    x = 1 # This should be indented!
```

#### AttributeError

- Raised when trying to access a non-existent attribute of a module or object.

**Example:**

```python
>>> import math
>>> math.foo # There is no such method or constant in math
```

#### NameError

- Raised when Python cannot find an identifier (variable, function, etc.) that has not been defined.

**Example:**

```python
>>> x + 1 # Without having previously assigned a value to x
```"
"page_content='302 Exception handling
>>> foo # Wasn't defined earlier
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'foo' is not defined
IndexError
Individual elements of a sequence can be accessed using an index into the
sequence. This presumes, of course, that the index is valid—that is, there
is an element at that index. If you try to access an element of a sequence
by its index, and there is no index, Python will raise anIndexError.
>>> lst = []
>>> lst[2] # There is no element at index 2
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
IndexError: list index out of range
This (above) fails because the list is empty and there is no element
at index 2. Hence, 2 is an invalid index and anIndexError is raised.
Here’s another example:
>>> alphabet = 'abcdefghijklmnopqrstuvwxyz'
>>> alphabet[26] # Python is 0-indexed so z has index 25
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
IndexError: string index out of range
TypeError
A TypeError is raised when a value of one type is expected and a dif-
ferent type is supplied. For example, sequence indices—for lists, tuples,
strings—must be integers. If we try using afloat or str as an index,
Python will raise aTypeError.
>>> lst = [6, 5, 4, 3, 2]
>>> lst['foo'] # Can't use a string as an index
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: list indices must be integers or slices, not str
>>> lst[1.0] # Can't use a float as an index
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: list indices must be integers or slices, not float' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 316}","**Formatting Output**

## Metadata

- Page: 316
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

## Exceptions

### NameError

- Raised when a name is not defined.
- Example: ```python
  foo # Wasn't defined earlier
  ```

### IndexError

- Raised when an attempt is made to access a non-existent index in a sequence.
- Example: ```python
  lst = []
  lst[2] # There is no element at index 2
  ```

### TypeError

- Raised when a value of an incorrect type is supplied.
- Example: ```python
  lst = [6, 5, 4, 3, 2]
  lst['foo'] # Can't use a string as an index
  lst[1.0] # Can't use a float as an index
  ```"
"page_content='Exceptions 303
Python will also raise aTypeError if we try to perform operations on
operands which are not supported. For example, we cannot concatenate
an int to astr or add astr to anint.
>>> 'foo' + 1 # Try concatenating 1 with 'foo'
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: can only concatenate str (not ""int"") to str
>>> 1 + 'foo' # Try adding 'foo' to 1
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'
We cannot calculate the sum of a number and a string. We cannot
calculate the sum of any list or tuple which contains a string.
>>> sum('Add me up!') # Can't sum a string
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> sum(1) # Python sum() requires an iterable of numerics
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: 'int' object is not iterable
By the same token, we cannot get the length of afloat or int.
>>> len(1)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: object of type 'int' has no len()
ValueError
A ValueError is raised when thetype of some argument or operand is
correct, but the value is not. For example, math.sqrt(x) will raise a
ValueError if we try to take the square root of a negative number.
>>> import math
>>> math.sqrt(-1)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: math domain error
Note that dividing by zero is considered an arithmetic error, and has
its own exception (see below).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 317}","**Exceptions**

### TypeError

Python raises a TypeError when operations are attempted on operands that are not supported. For instance, concatenating an int with a string or adding a string to an int will result in a TypeError:

```python
>>> 'foo' + 1 # Try concatenating 1 with 'foo'
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: can only concatenate str (not ""int"") to str
>>> 1 + 'foo' # Try adding 'foo' to 1
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'
```

### ValueError

A ValueError is raised when the type of an argument or operand is correct, but the value is not. For example, math.sqrt(x) will raise a ValueError if a negative number is provided:

```python
>>> import math
>>> math.sqrt(-1)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ValueError: math domain error
```

Note that division by zero is considered an arithmetic error and has its own exception (see below)."
"page_content='304 Exception handling
ZeroDivisionError
Just as in mathematics, Python will not allow us to divide by zero. If
we try to, Python will raise aZeroDivisionError. Note that this occurs
with floor division and modulus as well (as they depend on division).
>>> 10 / 0
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ZeroDivisionError: division by zero
>>> 10 % 0
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ZeroDivisionError: integer division or modulo by zero
>>> 10 // 0
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ZeroDivisionError: integer division or modulo by zero
FileNotFoundError
We’ve seen how to open files for reading and writing. There are many
ways this can go wrong, but one common issue isFileNotFoundError.
This exception is raised when Python cannot find the specified file. The
file may not exist, may be in the wrong directory, or may be named
incorrectly.
open('non-existent file')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory:
'non-existent file'
15.2 Handling exceptions
So far, what we’ve seen is that when an exception is raised our program
is terminated (or not even run to begin with in the case of aSyntaxError).
However, Python allows us to handle exceptions. What this means is that
when an exception is raised, a specific block of code can be executed to
deal with the problem.
For this we have, minimally, a try/except compound statement. This
involves creating two blocks of code: a try block and an exception
handler—an except block.
The code in thetry block is code where we want to guard against
unhandled exceptions. Atry block is followed by anexcept block. The' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 318}","**Metadata**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 318

**### Exception Handling**

**ZeroDivisionError**

**Definition:** Occurs when attempting to divide by zero.

**Examples:**

```
>>> 10 / 0
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ZeroDivisionError: division by zero
```

```
>>> 10 % 0
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ZeroDivisionError: integer division or modulo by zero
```

```
>>> 10 // 0
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
ZeroDivisionError: integer division or modulo by zero
```

**FileNotFoundError**

**Definition:** Raised when Python cannot find a specified file.

**Causes:**

* File does not exist
* File is in the wrong directory
* File is named incorrectly

**Example:**

```
open('non-existent file')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'non-existent file'
```

**Handling Exceptions**

**try/except Statement:**

* **try** block contains code to be executed.
* **except** block contains code to handle exceptions raised in the try block.

**Syntax:**

```
try:
    # code to be executed
except ExceptionName:
    # code to handle exception
```"
"page_content='Handling exceptions 305
except block specifies the type of exception we wish to handle, and code
for handling the exception.
Input validation with try/except
Here’s an example of input validation using try/except. Let’s say we
want a positive integer as input. We’ve seen how to validate input in a
while loop.
while True:
n = int(input(""Please enter a positive integer: ""))
if n > 0:
break
This ensures that if the user enters an integer that’s less than one, that
they’ll be prompted again until they supply a positive integer. But what
happens if the naughty user enters something that cannot be converted
to an integer?
Please enter a positive integer: cheese
Traceback (most recent call last):
File ""/.../code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 2, in <module>
ValueError: invalid literal for int() with base 10: 'cheese'
Python cannot convert'cheese' to an integer and thus aValueError is
raised.
So now what? We put the code that could result in aValueError in
a try block, and then provide an exception handler in anexcept block.
Here’s how we’d do it.
while True:
try:
user_input = input(""Enter a positive integer: "")
n = int(user_input)
if n > 0:
break
except ValueError:
print(f'""{user_input}"" cannot be converted to an int!')
print(f'You have entered {n}, a positive integer.')' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 319}","### Handling exceptions

**Metadata**

* Page number: 319
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Content**

**Exception handling**

An `except` block specifies the type of exception we wish to handle and code for handling the exception.

**Input validation with try/except**

Here's an example of input validation using `try/except`. Let's say we want a positive integer as input. We've seen how to validate input in a `while` loop.

```
while True:
  n = int(input(""Please enter a positive integer: ""))
  if n > 0:
    break
```

This ensures that if the user enters an integer that's less than one, they'll be prompted again until they supply a positive integer. But what happens if the naughty user enters something that cannot be converted to an integer?

```
Please enter a positive integer: cheese
Traceback (most recent call last):
File ""/.../code.py"", line 90, in runcode
  exec(code, self.locals)
File ""<input>"", line 2, in <module>
ValueError: invalid literal for int() with base 10: 'cheese'
```

Python cannot convert'cheese' to an integer and thus aValueError is raised.

So now what? We put the code that could result in aValueError in a `try` block, and then provide an exception handler in an `except` block.

Here's how we'd do it.

```
while True:
  try:
    user_input = input(""Enter a positive integer: "")
    n = int(user_input)
    if n > 0:
      break
  except ValueError:
    print(f'""{user_input}"" cannot be converted to an int!')
    print(f'You have entered {n}, a positive integer.')
```"
"page_content='306 Exception handling
Let’s run this code, and try a little mischief:
Enter a positive integer: negative
""negative"" cannot be converted to an int!
Enter a positive integer: cheese
""cheese"" cannot be converted to an int!
Enter a positive integer: -42
Enter a positive integer: 15
You have entered 15, a positive integer.
See? Now mischief (or failure to read instructions) is handled grace-
fully.
Getting an index with try/except
Earlier, we saw that.index() will raise a ValueError exception if the
argument passed to the.index() method is not found in the underlying
sequence.
>>> lst = ['apple', 'boat', 'cat', 'drama']
>>> lst.index('egg')
Traceback (most recent call last):
File ""/.../code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
ValueError: 'egg' is not in list
We can use exception handling to improve on this.
lst = ['apple', 'boat', 'cat', 'drama']
s = input('Enter a string to search for: ')
try:
i = lst.index(s)
print(f'The index of ""{s}"" in {lst} is {i}.')
except ValueError:
print(f'""{s}"" was not found in {lst}.')
If we were to enter “egg” at the prompt, this code would print:
""egg"" was not found in ['apple', 'boat', 'cat', 'drama']
This brings up the age-old question of whether it’s better to check
first to see if you can complete an operation without error, or better
to try and then handle an exception if it occurs. Sometimes these two
approaches are referred to as “look before you leap” (LBYL) and “it’s
easier to ask forgiveness than it is to ask for permission” (EAFP). Python
favors the latter approach.
Why is this the case? Usually, EAFP makes your code more readable,
and there’s no guarantee that the programmer can anticipate and write
all the necessary checks to ensure an operation will be successful.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 320}","### Exception Handling

Let’s run this code, and try a little mischief:

```
Enter a positive integer: negative
""negative"" cannot be converted to an int!
Enter a positive integer: cheese
""cheese"" cannot be converted to an int!
Enter a positive integer: -42
Enter a positive integer: 15
You have entered 15, a positive integer.
```

See? Now mischief (or failure to read instructions) is handled gracefully.

### Getting an Index with try/except

Earlier, we saw that.index() will raise a ValueError exception if the argument passed to the.index() method is not found in the underlying sequence.

```
>>> lst = ['apple', 'boat', 'cat', 'drama']
>>> lst.index('egg')
Traceback (most recent call last):
File ""/.../code.py"", line 90, in runcode
exec(code, self.locals)
File ""<input>"", line 1, in <module>
ValueError: 'egg' is not in list
```

We can use exception handling to improve on this.

```
lst = ['apple', 'boat', 'cat', 'drama']
s = input('Enter a string to search for: ')
try:
    i = lst.index(s)
    print(f'The index of ""{s}"" in {lst} is {i}.')
except ValueError:
    print(f'""{s}"" was not found in {lst}.')
```

If we were to enter “egg” at the prompt, this code would print:

```
""egg"" was not found in ['apple', 'boat', 'cat', 'drama']
```

This brings up the age-old question of whether it’s better to check first to see if you can complete an operation without error, or better to try and then handle an exception if it occurs. Sometimes these two approaches are referred to as “look before you leap” (LBYL) and “it’s easier to ask forgiveness than it is to ask for permission” (EAFP). Python favors the latter approach.

Why is this the case? Usually, EAFP makes your code more readable, and there’s no guarantee that the programmer can anticipate and write all the necessary checks to ensure an operation will be successful."
"page_content='Exceptions and flow of control 307
In this example, it’s a bit of a toss up. We could write:
if s in lst:
print(f'The index of ""{s}"" in {lst} is {lst.index(s)}.')
else:
print(f'""{s}"" was not found in {lst}.')
Or we could write (as we did earlier):
try:
print(f'The index of ""{s}"" in {lst} is {lst.index(s)}.')
except ValueError:
print(f'""{s}"" was not found in {lst}.')
Dos and don’ts
Do:
• Keep try blocks as small as possible.
• Catch and handle specific exceptions.
• Avoid catching and handling IndexError, TypeError, NameError.
When these occur, it’s almost always due to a defect in program-
ming. Catching and handling these exceptions can hide defects that
should be corrected.
• Use separateexcept blocks to handle different kinds of exceptions.
Don’t:
• Write one handler for different exception types.
• Wrap all your code in one bigtry block.
• Use exception handling to hide programming errors.
• Use bareexcept: or except Exception:—these are too general and
might catch things you shouldn’t.
15.3 Exceptions and flow of control
While it’s consideredpythonic to use exceptions and to follow the rule
of EAFP (“easier to ask for forgiveness than permission”), it is unwise
to use exceptions for controlling the flow of program execution except
within very narrow limits.
Here are some rules to follow:
• Keep try and except blocks as small as possible.
• Handle an exception in the most simple and direct way possible.
• Avoid calling another function from within anexcept block which
might send program flow away from the point where the exception
was raised.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 321}","## Exceptions and Flow of Control

### Dos and Don'ts

**Do:**

- Keep try blocks as small as possible.
- Catch and handle specific exceptions.
- Avoid catching and handling IndexError, TypeError, NameError. These usually indicate programming defects that should be corrected.
- Use separate except blocks to handle different types of exceptions.

**Don't:**

- Write one handler for multiple exception types.
- Wrap all code in a single large try block.
- Use exception handling to hide programming errors.
- Use bare except: or except Exception: as these are too general and may catch unintended exceptions.

### Rules for Controlling Flow of Execution with Exceptions

- Keep try and except blocks as short as possible.
- Handle exceptions in the simplest and most direct way possible.
- Avoid calling other functions from within an except block, as this may alter the flow of execution from the point where the exception was raised."
"page_content='308 Exception handling
15.4 Exercises
Exercise 01
ĺ Important
Be sure to save your work for this exercise, as we will revisit these
in later exercises!
Here’s an example of code which raises aSyntaxError:
>>> foo bar
File ""<stdin>"", line 1
foo bar
^^^
SyntaxError: invalid syntax
Here’s an example of code which raises aTypeError:
>>> 1 + []
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'list'
Without usingraise, write your own code that results in the following
exceptions:
a. SyntaxError
b. IndentationError
c. IndexError
d. NameError
e. TypeError
f. AttributeError
g. ZeroDivisionError
h. FileNotFoundError
Exercise 02
Now write a try/except for the following exceptions, starting with code
you wrote for exercise 01.
a. ValueError
b. ZeroDivisionError
c. FileNotFoundError
Exercise 03
SyntaxError and IndentationError should always be fixed in your code.
Under normal circumstances, these can ’t be handled. NameError and' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 322}","**Formatting Instructions:**

1. **Content Structuring:**  
   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**  
   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**  
   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

Example:
```python
# Python code example
print(""Hello, World!"")
```

4. **Give differences in tabular format if possible.**
5. **Include examples clearly if provided.**
6. **Do not generate any content by yourself. Just format the provided content and keep the answers in brief. Do not cut short it. Just put it full content as it is without changing anything.**
If the content is of 1,000 words, give all 1,000 words. Do not cut it short. Strictly follow this rule. No content should be modified. Give the exact same length content as provided.

**Content:**

**308 Exception handling**

**15.4 Exercises**

**Exercise 01**

ĺImportant
Be sure to save your work for this exercise, as we will revisit these
in later exercises!
Here’s an example of code which raises aSyntaxError:
```python
>>> foo bar
File ""<stdin>"", line 1
foo bar
^^^
SyntaxError: invalid syntax
```

Here’s an example of code which raises aTypeError:
```python
>>> 1 + []
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'list'
```

Without usingraise, write your own code that results in the following
exceptions:
a. SyntaxError
b. IndentationError
c. IndexError
d. NameError
e. TypeError
f. AttributeError
g. ZeroDivisionError
h. FileNotFoundError

**Exercise 02**

Now write a try/except for the following exceptions, starting with code
you wrote for exercise 01.
a. ValueError
b. ZeroDivisionError
c. FileNotFoundError

**Exercise 03**

SyntaxError and IndentationError should always be fixed in your code.
Under normal circumstances, these can ’t be handled. NameError and' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 322}"
"page_content='Exercises 309
AttributeError almost always arise from programming defects. There’s
almost never any reason to write try/except for these.
Fix the code you wrote in exercise 01, for the following:
a. SyntaxError
b. IndentationError
c. AttributeError
d. NameError
Exercise 04
Usually, (but not always)IndexError and TypeError are due to program-
ming defects. Take a look at the code you wrote to cause these errors in
exercise 01. Does what you wrote constitute a programming defect? If
so, fix it.
If you believe the code you wrote constitutes a legitimate case for
try/except, write try/except for each of these.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 323}","**Formatting Instructions:**

1. **Content Structuring:**
   - Identify key sections and organize them under appropriate headings and subheadings.
   - Ensure logical flow and clarity in the content.

2. **Metadata Inclusion:**
   - Include all metadata such as page numbers, line numbers, and source names as provided.
   - Clearly indicate the metadata at the beginning or in relevant sections.

3. **Code Formatting:**
   - If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
   - Mention the programming language before the triple backticks.

   Example:
   ```python
   # Python code example
   print(""Hello, World!"")
   
4. Provide differences in tabular format if possible.
5. Include examples clearly if provided.
6. Do not generate any content by yourself; just format the provided content. Also, keep the answers in brief. Do not cut them short; just put the full content as it is without changing anything.
   If the content is of 1000 words, give all 1000 words. Do not cut it short. Strictly follow this rule. No content should be modified. Give the exact same length of content as provided.

**Exercise 309
AttributeError**
Almost always arise from programming defects. There’s
almost never any reason to write try/except for these.
Fix the code you wrote in exercise 01, for the following:
a. SyntaxError
b. IndentationError
c. AttributeError
d. NameError

**Exercise 04
IndexError and TypeError**
Usually (but not always), IndexError and TypeError are due to programming defects. Take a look at the code you wrote to cause these errors in exercise 01. Does what you wrote constitute a programming defect? If so, fix it.
If you believe the code you wrote constitutes a legitimate case for try/except, write try/except for each of these.

**Metadata:**
- Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 323"
"page_content='Chapter 16
Dictionaries
Dictionaries are ubiquitous, no doubt due to their usefulness and flexibil-
ity. Dictionaries store information in key/value pairs—we look up a value
in a dictionary by its key. In this chapter we’ll learn about dictionaries:
how to create them, modify them, iterate over them and so on.
Learning objectives
• You will learn how to create a dictionary.
• You will understand that dictionaries aremutable, meaning that
their contents may change.
• You will learn how to access individual values in a dictionary by
keys.
• You will learn how to iterate over dictionaries.
• You will understand that dictionary keys must behashable.
T erms and Python keywords introduced
• del
• dictionary
• hashable
• key
• value
• view object
16.1 Introduction to dictionaries
So far, we’ve seen tuples, lists, and strings as ordered collections of ob-
jects. We’ve also seen how to access individual elements within a list,
tuple, or string by the element’s index.311' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 325}","**Chapter 16: Dictionaries**

**Metadata:**
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 325

**16.1 Introduction to Dictionaries**

**Learning Objectives:**
* Create a dictionary.
* Understand that dictionaries are mutable (contents can change).
* Access individual values in a dictionary using keys.
* Iterate over dictionaries.
* Dictionary keys must be hashable.

**Terms and Python Keywords:**
* del
* dictionary
* hashable
* key
* value
* view object"
"page_content='312 Dictionaries
>>> lst = ['rossi', 'agostini', 'marquez', 'doohan', 'lorenzo']
>>> lst[0]
'rossi'
>>> lst[2]
'marquez'
>>> t = ('hearts', 'clubs', 'diamonds', 'spades')
>>> t[1]
'clubs'
This is all well and good, but sometimes we’d like to be able to use
something other than a numeric index to access elements.
Consider conventional dictionaries which we use for looking up the
meaning of words. Imagine if such a dictionary used numeric indices to
look up words. Let’s say we wanted to look up the word “pianist.” How
would we know its index? We’d have to hunt through the dictionary to
find it. Even if all the words were in lexicographic order, it would still
be a nuisance having to find a word this way.
The good news is that dictionaries don’t work that way. We can look
up the meaning of the word by finding the word itself. This is the basic
idea of dictionaries in Python.
A Python dictionary, simply put, is a data structure which associates
keys and values. In the case of a conventional dictionary, each word is a
key, and the associated definition or definitions are thevalues.
Here’s how the entry for “pianist” appears in my dictionary:
1
pianist n. a person who plays the piano, esp. a skilled or
professional performer
Here pianist is the key, and the rest is the value. We can write this,
with some liberty, as a Python dictionary, thus:
>>> d = {'pianist': ""a person who plays the piano, "" \
... ""esp. a skilled or professional performer""}
The entries of a dictionary appear within braces{}. The key/value
pairs are separated by a colon, thus:<key>: <value>, where <key> is a
valid key, and<value> is a valid value.
We can look up values in a dictionary by their key. The syntax is
similar to accessing elements in a list or tuple by their indices.
>>> d['pianist']
'a person who plays the piano, esp. a skilled or
professional performer'
Like lists, dictionaries aremutable. Let’s add a few more words to our
dictionary. To add a new entry to a dictionary, we can use this approach:
1 W ebster’s New W orld Dictionary of the American Language, Second College
Edition.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 326}","**Metadata:**

* Page Number: 326
* Source: C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

### Dictionaries

**Introduction**

Dictionaries are data structures that associate keys with values. In a conventional dictionary, each word is a key, and the associated definition or definitions are the values.

**Creating Dictionaries**

Python dictionaries are created using curly braces {}. The key/value pairs are separated by a colon :.

**Example:**

```python
d = {'pianist': ""a person who plays the piano, esp. a skilled or professional performer""}
```

**Accessing Values**

Values in a dictionary are accessed using the key. The syntax is similar to accessing elements in a list or tuple by their indices.

**Example:**

```python
d['pianist']  # Output: ""a person who plays the piano, esp. a skilled or professional performer""
```

**Mutability**

Like lists, dictionaries are mutable. New entries can be added using the following approach:

```python
d['new_key'] = 'new_value'
```

**Difference Between Lists and Dictionaries**

| Feature | List | Dictionary |
|---|---|---|
| Indexing | Numeric | Key-based |
| Contents | Ordered | Unordered |
| Lookup | By index | By key |
| Mutability | Mutable | Mutable |
| Use Cases | Storing ordered collections | Mapping keys to values |

**Example**

The following Python code illustrates the difference between lists and dictionaries:

```python
# List of names
names = ['Alice', 'Bob', 'Carol', 'Dave']

# Dictionary of names and ages
ages = {'Alice': 20, 'Bob': 25, 'Carol': 30, 'Dave': 35}

# Accessing elements
print(names[0])  # Output: 'Alice'
print(ages['Bob'])  # Output: 25
```"
"page_content='Introduction to dictionaries 313
>>> d['cicada'] = ""any of a family of large flylike "" \
... ""insects with transparent wings""
>>> d['proclivity'] = ""a natural or habitual tendency or "" \
... ""inclination, esp. toward something "" \
... ""discreditable""
>>> d['tern'] = ""any of several sea birds, related to the "" \
... ""gulls, but smaller, with a more slender "" \
... ""body and beak, and a deeply forked tail""
>>> d['firewood'] = ""wood used as fuel""
>>> d['holophytic'] = ""obtaining nutrition by photosynthesis, "" \
... ""as do green plants and some bacteria""
Now let’s inspect our dictionary.
>>> d
{'pianist': 'a person who plays the piano, esp. a skilled or
professional performer', 'cicada': 'any of a family of large
flylike insects with transparent wings', 'proclivity': 'a
natural or habitual tendency or inclination, esp. toward
something discreditable', 'tern': 'any of several sea birds,
related to the gulls, but smaller, with a more slender body
and beak, and a deeply forked tail', 'firewood': 'wood used
as fuel', 'holophytic': 'obtaining nutrition by photosynthesis,
as do green plants and some bacteria'}
We see that our dictionary consists of key/value pairs.
key value
'pianist' 'a person who plays the piano, esp. a skilled or
professional performer'
'cicada' 'any of a family of large flylike insects with
transparent wings'
'proclivity' 'a natural or habitual tendency or inclination,
esp. toward something discreditable'
'tern' 'any of several sea birds, related to the gulls,
but smaller, with a more slender body and beak, and
a deeply forked tail'
'firewood' 'wood used as fuel'
'holophytic' 'obtaining nutrition by photosynthesis, as do green
plants and some bacteria'
We can look up any value with its key.
>>> d['tern']
'any of several sea birds, related to the gulls, but smaller,
with a more slender body and beak, and a deeply forked tail'
Ifwetrytoaccessakeywhichdoesnotexist,thisresultsina KeyError.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 327}","### Introduction to dictionaries 313

**Creating a Dictionary**

```python
>>> d = {}
```

**Adding Key-Value Pairs**

```python
>>> d['pianist'] = 'a person who plays the piano, esp. a skilled or professional performer'
```

**Inspecting a Dictionary**

```python
>>> d
{'pianist': 'a person who plays the piano, esp. a skilled or professional performer', 'cicada': 'any of a family of large flylike insects with transparent wings', 'proclivity': 'a natural or habitual tendency or inclination, esp. toward something discreditable', 'tern': 'any of several sea birds, related to the gulls, but smaller, with a more slender body and beak, and a deeply forked tail', 'firewood': 'wood used as fuel', 'holophytic': 'obtaining nutrition by photosynthesis, as do green plants and some bacteria'}
```

**Structure of a Dictionary**

A dictionary consists of key/value pairs, where:

- **Key:** A unique identifier for each value
- **Value:** The data associated with the key

**Accessing Values**

To access a value, use the key as an index:

```python
>>> d['tern']
'any of several sea birds, related to the gulls, but smaller, with a more slender body and beak, and a deeply forked tail'
```

**Error Handling**

Attempting to access a non-existent key results in a `KeyError`:
"
"page_content='314 Dictionaries
>>> d['bungalow']
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
KeyError: 'bungalow'
This is a new type of exception we haven’t seen until now.
We may overwrite a key with a new value.
>>> d = {'France': 'Paris',
... 'Mali': 'Bamako',
... 'Argentina': 'Buenos Aires',
... 'Thailand': 'Bangkok',
... 'Australia': 'Sydney'} # oops!
>>> d['Australia'] = 'Canberra' # fixed!
So far, in the examples above, keys and values have been strings. But
this needn’t be the case.
There are constraints on the kinds of things we can use as keys, but
almost anything can be used as a value.
Here are some examples of valid keys:
>>> d = {(1, 2): 'My key is the tuple (1, 2)',
100: 'My key is the integer 100',
'football': 'My key is the string ""football""'}
Values can be almost anything—even other dictionaries!
>>> students = {'eporcupi': {'name': 'Egbert Porcupine',
... 'major': 'computer science',
... 'gpa': 3.14},
... 'epickle': {'name': 'Edwina Pickle',
... 'major': 'biomedical engineering',
... 'gpa': 3.71},
... 'aftoure': {'name': 'Ali Farka Touré',
... 'major': 'music',
... 'gpa': 4.00}}
>>> students['aftoure']['major']
'music'
>>> recipes = {'bolognese': ['beef', 'onion', 'sweet pepper',
... 'celery', 'parsley', 'white wine',
... 'olive oil', 'garlic', 'milk',
... 'black pepper', 'basil', 'salt'],
... 'french toast': ['baguette', 'egg', 'milk',
... 'butter', 'cinnamon',
... 'maple syrup'],' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 328}","### Dictionaries

**Metadata**:
* Page Number: 328
* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf

**Introduction**

Dictionaries are a type of data structure that stores data in key-value pairs. Keys are used to identify specific values, and values can be any type of data. Dictionaries are similar to lists, but instead of using indices to access elements, keys are used.

**Creating Dictionaries**

To create a dictionary, curly braces {} are used. Keys and values are separated by colons :, and pairs are separated by commas ,.

**Example**

```python
d = {'France': 'Paris',
     'Mali': 'Bamako',
     'Argentina': 'Buenos Aires',
     'Thailand': 'Bangkok',
     'Australia': 'Sydney'}
```

**Accessing Values**

To access a value in a dictionary, the key associated with that value is used. Square brackets [] are used to access values.

**Example**

```python
print(d['France']) # Output: Paris
```

**Overwriting Values**

Values in dictionaries can be overwritten by assigning a new value to the same key.

**Example**

```python
d['Australia'] = 'Canberra'
```

**Types of Keys and Values**

Keys in dictionaries can be of any immutable type, such as strings, numbers, or tuples. Values can be of any type, including other dictionaries.

**Examples**

```python
# Valid keys
d = {(1, 2): 'My key is the tuple (1, 2)',
     100: 'My key is the integer 100',
     'football': 'My key is the string ""football""'}

# Valid values
students = {'eporcupi': {'name': 'Egbert Porcupine',
                         'major': 'computer science',
                         'gpa': 3.14},
             'epickle': {'name': 'Edwina Pickle',
                         'major': 'biomedical engineering',
                         'gpa': 3.71},
             'aftoure': {'name': 'Ali Farka Touré',
                         'major': 'music',
                         'gpa': 4.00}}
```

**Nested Dictionaries**

Dictionaries can contain other dictionaries as values. This allows for complex data structures to be created.

**Example**

```python
recipes = {'bolognese': ['beef', 'onion', 'sweet pepper',
                          'celery', 'parsley', 'white wine',
                          'olive oil', 'garlic', 'milk',
                          'black pepper', 'basil', 'salt'],
           'french toast': ['baguette', 'egg', 'milk',
                            'butter', 'cinnamon',
                            'maple syrup']}
```"
"page_content='Introduction to dictionaries 315
... 'fritters': ['potatoes', 'red onion', 'carrot',
... 'red onion', 'garlic', 'flour',
... 'paprika', 'marjoram', 'salt',
... 'black pepper', 'canola oil']}
>>> recipes['french toast']
['baguette', 'egg', 'milk', 'butter', 'cinnamon', 'maple syrup']
>>> recipes['french toast'][-1]
'maple syrup'
>>> coordinates = {'Northampton': (42.5364, -70.9857),
... 'Kokomo': (40.4812, -86.1418),
... 'Boca Raton': (26.3760, -80.1223),
... 'Sausalito': (37.8658, -122.4980),
... 'Amarillo': (35.1991, -101.8452),
... 'Fargo': (46.8771, -96.7898)}
>>> lat, lon = coordinates['Fargo'] # tuple unpacking
>>> lat
46.8771
>>> lon
-96.7898
Restrictions on keys
Keys in a dictionary must be hashable. In order for an object to be
hashable, it must be immutable, or if it is an immutable container of
other objects (for example, a tuple) then all the objects contained must
also be immutable. Valid keys include objects of typeint,float (OK, but
a little strange),str, bool (also OK, but use cases are limited). Tuples
can also serve as keys as long as they do not contain any mutable objects.
>>> d = {0: 'Alexei Fyodorovich', 1: 'Dmitri Fyodorovich',
... 2: 'Ivan Fyodorovich', 3: 'Fyodor Pavlovich',
... 4: 'Agrafena Alexandrovna', 5: 'Pavel Fyodorovich',
... 6: 'Zosima', 7: 'Katerina Ivanovna'}
>>> d = {True: 'if porcupines are blue, then the sky is pink',
... False: 'chunky monkey is the best ice cream'}
>>> d = {'Phelps': 23, 'Latynina': 9, 'Nurmi': 9, 'Spitz': 9,
... 'Lewis': 9, 'Bjørgen': 8}
However, these are not permitted:' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 329}","**Introduction to Dictionaries**

### **Content Structure**

**Introduction**

**Metadata**

**Key Types**

**Valid Key Types**

**Invalid Key Types**

**Examples**

**Key Restrictions**

**Valid Key Restrictions**

### **Metadata**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 329

### **Key Types**

**Valid Key Types**

* int
* float
* str
* bool
* Tuple (as long as it does not contain any mutable objects)

**Invalid Key Types**

* Mutable objects
* Objects that are not hashable

### **Examples**

```python
recipes = {'fritters': ['potatoes', 'red onion', 'carrot',
'red onion', 'garlic', 'flour',
'paprika', 'marjoram', 'salt',
'black pepper', 'canola oil'],
'french toast': ['baguette', 'egg', 'milk', 'butter', 'cinnamon', 'maple syrup']}

>>> recipes['french toast']
['baguette', 'egg', 'milk', 'butter', 'cinnamon', 'maple syrup']

>>> recipes['french toast'][-1]
'maple syrup'

coordinates = {'Northampton': (42.5364, -70.9857),
'Kokomo': (40.4812, -86.1418),
'Boca Raton': (26.3760, -80.1223),
'Sausalito': (37.8658, -122.4980),
'Amarillo': (35.1991, -101.8452),
'Fargo': (46.8771, -96.7898)}

>>> lat, lon = coordinates['Fargo'] # tuple unpacking
>>> lat
46.8771
>>> lon
-96.7898
```

### **Key Restrictions**

Keys in a dictionary must be hashable. This means that the object must be immutable. If the object is an immutable container of other objects (e.g., a tuple), then all the objects contained must also be immutable."
"page_content='316 Dictionaries
>>> d = {['hello']: 'goodbye'}
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unhashable type: 'list'
>>> d = {(0, [1]): 'foo'}
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unhashable type: 'list'
T esting membership
Just as with lists we can use the keywordin to test whether a particular
key is in a dictionary.
>>> d = {'jane': 'maine', 'wanda': 'new hampshire',
... 'willard': 'vermont', 'simone': 'connecticut'}
>>> 'wanda' in d
True
>>> 'dobbie' in d
False
>>> 'dobbie' not in d
True
16.2 Iterating over dictionaries
If we iterate over a dictionary as we do with a list, this yields the dictio-
nary’s keys.
>>> furniture = {'living room': ['armchair', 'sofa', 'table'],
... 'bedroom': ['bed', 'nightstand', 'dresser'],
... 'office': ['desk', 'chair', 'cabinet']}
...
>>> for x in furniture:
... print(x)
...
living room
bedroom
office
Usually, when iterating over a dictionary we use dictionaryview ob-
jects. These objects provide a dynamic view into a dictionary’s keys,
values, or entries.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 330}","## Dictionaries

### Key-Value Pairs

Dictionaries are implemented as hash tables, which map keys to values. Keys must be immutable; common immutable types for keys include ints, strings, and tuples. Values, on the other hand, may be any Python object.

### Creating Dictionaries

Dictionaries can be created using curly braces or the built-in dict() function.

Example:

```
d = {""name"": ""Alice"", ""age"": 25}
```

### Accessing Elements

Values in dictionaries can be accessed using the `[]` operator.

Example:

```
print(d[""name""])  # Output: Alice
```

### Adding and Removing Elements

Elements can be added to dictionaries using the `[]` operator. To remove an element, use the `del` keyword.

Example:

```
d[""job""] = ""Software Engineer""
del d[""age""]
```

### Testing Membership

The `in` operator can be used to check if a key is present in a dictionary.

Example:

```
if ""name"" in d:
    print(""Name is in the dictionary"")
```

### Iterating Over Dictionaries

Iterating over a dictionary yields its keys. To iterate over values or key-value pairs, use the `values()` or `items()` methods respectively.

Example:

```
for key in d:
    print(key, d[key])
```

### Differences Between Dictionaries and Lists

| Feature | Dictionary | List |
|---|---|---|
| Type | Mutable | Mutable |
| Key type | Immutable (int, string, tuple) | Any |
| Value type | Any | Any |
| Access | `[]` operator | `[]` operator |
| Lookup complexity | O(1) | O(n) |
| Iteration | Yields keys | Yields elements |"
"page_content='Iterating over dictionaries 317
Dictionaries have three different view objects: items, keys, and values.
Dictionaries have methods that return these view objects:
• dict.keys() which provides a view of a dictionary’s keys,
• dict.values() which provides a view of a dictionary’s values, and
• dict.items() which provides tuples of key/value pairs.
Dictionary view objects are all iterable.
Iterating over the keys of a dictionary
>>> furniture = {'living room': ['armchair', 'sofa', 'table'],
... 'bedroom': ['bed', 'nightstand', 'dresser'],
... 'office': ['desk', 'chair', 'cabinet']}
>>> for key in furniture.keys():
... print(key)
...
living room
bedroom
office
Note that it’s common to exclude.keys() if it’s keys you want, since
the default behavior is to iterate over keys (as shown in the previous
example).
Iterating over the values of a dictionary
>>> for value in furniture.values():
... print(value)
...
['armchair', 'sofa', 'table']
['bed', 'nightstand', 'dresser']
['desk', 'chair', 'cabinet']
Iterating over the items of a dictionary
>>> for item in furniture.items():
... print(item)
...
('living room', ['armchair', 'sofa', 'table'])
('bedroom', ['bed', 'nightstand', 'dresser'])
('office', ['desk', 'chair', 'cabinet'])' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 331}","## Iterating Over Dictionaries

### Metadata
Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
Page: 331

### Content
Dictionaries have three different view objects: items, keys, and values.
Dictionaries have methods that return these view objects:
• dict.keys() which provides a view of a dictionary’s keys,
• dict.values() which provides a view of a dictionary’s values, and
• dict.items() which provides tuples of key/value pairs.
Dictionary view objects are all iterable.

### Iterating Over the Keys of a Dictionary
```python
furniture = {'living room': ['armchair', 'sofa', 'table'],
'bedroom': ['bed', 'nightstand', 'dresser'],
'office': ['desk', 'chair', 'cabinet']}

for key in furniture.keys():
    print(key)
```
Output:

```
living room
bedroom
office
```
Note that it’s common to exclude.keys() if it’s keys you want, since the default behavior is to iterate over keys (as shown in the previous example).

### Iterating Over the Values of a Dictionary
```python
for value in furniture.values():
    print(value)
```
Output:

```
['armchair', 'sofa', 'table']
['bed', 'nightstand', 'dresser']
['desk', 'chair', 'cabinet']
```

### Iterating Over the Items of a Dictionary
```python
for item in furniture.items():
    print(item)
```
Output:

```
('living room', ['armchair', 'sofa', 'table'])
('bedroom', ['bed', 'nightstand', 'dresser'])
('office', ['desk', 'chair', 'cabinet'])
```"
"page_content='318 Dictionaries
Iterating over the items of a dictionary using tuple
unpacking
>>> for key, value in furniture.items():
... print(f""Key: '{key}', value: {value}"")
...
Key: 'living room', value: ['armchair', 'sofa', 'table']
Key: 'bedroom', value: ['bed', 'nightstand', 'dresser']
Key: 'office', value: ['desk', 'chair', 'cabinet']
Some examples
Let’s say we wanted to count the number of pieces of furniture in our
dwelling.
>>> count = 0
>>> for lst in furniture.values():
... count = count + len(lst)
...
>>> count
9
Let’s say we wanted to find all the students in the class who are not
CS majors, assuming the items in our dictionary look like this:
>>> students =
... {'esmerelda' : {'class': 2024, 'major': 'ENSC', 'gpa': 3.08},
... 'winston': {'class': 2023, 'major': 'CS', 'gpa': 3.30},
... 'clark': {'class': 2022, 'major': 'PHYS', 'gpa': 2.95},
... 'kumiko': {'class': 2023, 'major': 'CS', 'gpa': 3.29},
... 'abeba' : {'class': 2024, 'major': 'MATH', 'gpa': 3.71}}
One approach:
>>> non_cs_majors = []
>>> for student, info in students.items():
... if info['major'] != 'CS':
... non_cs_majors.append(student)
...
>>> non_cs_majors
['esmerelda', 'clark', 'abeba']
16.3 Deleting dictionary keys
Earlier we saw that we could use list’s .pop() method to remove an
element from a list, removing either the last element in the list (the
default, when no argument is supplied), or at a specific index (if we
supply an argument).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 332}","## 318 Dictionaries

### Iterating over the items of a dictionary using tuple unpacking

```python
>>> for key, value in furniture.items():
... print(f""Key: '{key}', value: {value}"")
...
```

### Some examples

Let’s say we wanted to count the number of pieces of furniture in our
dwelling.

```python
>>> count = 0
>>> for lst in furniture.values():
... count = count + len(lst)
...
>>> count
9
```

Let’s say we wanted to find all the students in the class who are not
CS majors, assuming the items in our dictionary look like this:

```python
>>> students =
... {'esmerelda' : {'class': 2024, 'major': 'ENSC', 'gpa': 3.08},
... 'winston': {'class': 2023, 'major': 'CS', 'gpa': 3.30},
... 'clark': {'class': 2022, 'major': 'PHYS', 'gpa': 2.95},
... 'kumiko': {'class': 2023, 'major': 'CS', 'gpa': 3.29},
... 'abeba' : {'class': 2024, 'major': 'MATH', 'gpa': 3.71}}
```

### One approach:

```python
>>> non_cs_majors = []
>>> for student, info in students.items():
... if info['major'] != 'CS':
... non_cs_majors.append(student)
...
>>> non_cs_majors
['esmerelda', 'clark', 'abeba']
```

### Deleting dictionary keys

Earlier we saw that we could use list’s .pop() method to remove an
element from a list, removing either the last element in the list (the
default, when no argument is supplied), or at a specific index (if we
supply an argument).'"
"page_content='Hashables 319
Dictionaries are mutable, and thus, like lists, they can be changed.
Dictionaries also support.pop() but it works a little differently than it
does with lists. The.pop() method for dictionariesrequires a valid key
as an argument. This is because dictionaries don’t have the same sense
of linear order as a list—everything is based onkeys.
So this works:
>>> d = {'foo': 'bar'}
>>> d.pop('foo')
'bar'
but this does not:
>>> d = {'foo': 'bar'}
>>> d.pop()
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: pop expected at least 1 argument, got 0
Python also provides the keyworddel which can be used to remove a
key from a dictionary.
>>> pets = {'fluffy': 'gerbil', 'george': 'turtle',
... 'oswald': 'goldfish', 'wyatt': 'ferret'}
>>> del pets['oswald'] # RIP oswald :(
>>> pets
{'fluffy': 'gerbil', 'george': 'turtle', 'wyatt': 'ferret'}
But be careful! If you do not specify a key, the entire dictionary will
be deleted!
>>> pets = {'fluffy': 'gerbil', 'george' : 'turtle',
... 'oswald': 'goldfish', 'wyatt': 'ferret'}
>>> del pets # oops!
>>> pets
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'pets' is not defined
Notice also that .pop() with a key supplied will return the value
associated with that key and then remove the key/value pair.del will
simply delete the entry.
16.4 Hashables
The keys of a dictionary cannot be arbitrary Python objects. In order to
serve as a key, an object must behashable.
Without delving into too much technical detail, the reason is fairly
straightforward. We can’t have keys that might change!' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 333}","### Hashables

#### Metadata
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 333
- Line Numbers: 319-333

#### Content

##### Mutable Dictionaries

Dictionaries are mutable, allowing changes to their contents.

##### .pop() Method

Dictionaries support the `.pop()` method, but it requires a valid key argument because dictionaries lack linear order.
```python
>>> d = {'foo': 'bar'}
>>> d.pop('foo')
'bar'
```

However, attempting to use `.pop()` without an argument will result in an error:
```python
>>> d = {'foo': 'bar'}
>>> d.pop()
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: pop expected at least 1 argument, got 0
```

##### del Keyword

Python also provides the `del` keyword to remove keys from dictionaries.
```python
>>> pets = {'fluffy': 'gerbil', 'george': 'turtle',
... 'oswald': 'goldfish', 'wyatt': 'ferret'}
>>> del pets['oswald'] # RIP oswald :(
>>> pets
{'fluffy': 'gerbil', 'george': 'turtle', 'wyatt': 'ferret'}
```

Caution: Deleting a dictionary without specifying a key will delete the entire dictionary.
```python
>>> pets = {'fluffy': 'gerbil', 'george' : 'turtle',
... 'oswald': 'goldfish', 'wyatt': 'ferret'}
>>> del pets # oops!
>>> pets
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
NameError: name 'pets' is not defined
```

##### .pop() vs. del

* `.pop(key)` returns the associated value and removes the key/value pair.
* `del` simply deletes the entry.

##### Hashable Keys

Dictionary keys cannot be arbitrary Python objects. To serve as a key, an object must be hashable."
"page_content='320 Dictionaries
Imagine if that dictionary or thesaurus on your desk had magical keys
that could change. You’d never be able to find anything. Accordingly,
all keys in a dictionary must be hashable—and not subject to possible
change.
Hashing is a process whereby we calculate a number (called a hash)
from an object. In order to serve as a dictionary key, this hash value
must never change.
What kinds of objects are hashable? Actually most of the objects
we’ve seen so far are hashable.
Anything that is immutable and is not a container is hashable. This
includes int, float, bool, str. It even includes objects of type range
(though it would be very peculiar indeed if someone were to use a range
as a dictionary key).
What about things that are immutable and are containers? Here we’re
speakingoftuples.Ifalltheelementsofatuplearethemselvesimmutable,
then the tuple is hashable. If a tuple contains a mutable object, say, a
list, then it is not hashable.
We can inspect the hash values of various objects using the built-in
function, hash().
>>> x = 2
>>> hash(x)
2
>>> x = 4.11
>>> hash(x)
253642731013507076
>>> x = 'hello'
>>> hash(x)
1222179648610370860
>>> x = True
>>> hash(x)
1
>>> x = (1, 2, 3)
>>> hash(x)
529344067295497451
Now, what happens if we try this on something unhashable?
>>> x = [1, 2, 3]
>>> hash(x)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unhashable type: 'list'
What happens if we try an immutable container (tuple) which con-
tains a mutable object (list)?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 334}","## Dictionaries

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 334

### Key Hashability

Imagine if your dictionary had keys that could change. You'd never be able to find anything. Accordingly, all dictionary keys must be hashable—and not subject to possible change.

Hashing is a process whereby we calculate a number (called a hash) from an object. In order to serve as a dictionary key, this hash value must never change.

### Hashable Objects

Most objects we've seen so far are hashable:

* Immutable objects (e.g., int, float, bool, str, range)
* Tuples with immutable elements

### Non-Hashable Objects

* Mutable objects (e.g., lists, dictionaries)
* Tuples with mutable elements

### Hash Value Inspection

The built-in function, hash(), can be used to inspect the hash values of various objects:

| Object | Hash |
|---|---|
| 2 | 2 |
| 4.11 | 253642731013507076 |
| 'hello' | 1222179648610370860 |
| True | 1 |
| (1, 2, 3) | 529344067295497451 |

**Non-Hashable Objects:**

Attempting to hash a non-hashable object (e.g., a list) will result in a `TypeError`.

**Mutable Tuples:**

Tuples with mutable elements are also non-hashable:

```python
>>> x = [1, 2, 3]
>>> hash(x)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unhashable type: 'list'
```"
"page_content='Counting letters in a string 321
>>> x = (1, 2, [3])
>>> hash(x)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unhashable type: 'list'
Now, a tuple can contain a tuple, which may contain another tuple
and so on. All it takes is one mutable element, no matter how deeply
nested, to make an object unhashable.
>>> x = (1, 2, (3, 4, (5, 6, (7, 8, [9]))))
>>> hash(x)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unhashable type: 'list'
Finally, it should go without saying that since dictionaries are muta-
ble, they are not hashable, and thus a dictionary cannot serve as a key
for another dictionary.
>>> x = {'foo': 'bar'}
>>> hash(x)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unhashable type: 'dict'
16.5 Counting letters in a string
Here’s an example of how we can use a dictionary to keep track of the
number of occurrences of letters or other characters in a string. It’s com-
mon enough in many word guessing and related games that we’d want
this information.
Let’s say we have this string: “How far that little candle throws its
beams! So shines a good deed in a naughty world.”
2
How would we count all the symbols in this? Certainly, separate vari-
ables would be cumbersome. Let’s use a dictionary instead. The keys in
the dictionary are the individual letters and symbols in the string, and
the values will be their counts. To simplify things a little, we’ll convert
the string to lower case before counting.
2 William Shakespeare, The Merchant of V enice, Act V, Scene I (Portia).' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 335}","## Metadata

- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 335

## 16.5 Counting letters in a string

Here's an example of how we can use a dictionary to keep track of the number of occurrences of letters or other characters in a string. It's common enough in many word guessing and related games that we'd want this information.

Let's say we have this string: ""How far that little candle throws its beams! So shines a good deed in a naughty world.""

How would we count all the symbols in this? Certainly, separate variables would be cumbersome. Let's use a dictionary instead. The keys in the dictionary are the individual letters and symbols in the string, and the values will be their counts. To simplify things a little, we'll convert the string to lower case before counting.

```python
string = ""How far that little candle throws its beams! So shines a good deed in a naughty world.""
counts = {}

for letter in string.lower():
    if letter in counts:
        counts[letter] += 1
    else:
        counts[letter] = 1

print(counts)
```

Output:

```
{'h': 1, 'o': 6, 'w': 5, 'f': 2, 'a': 11, 'r': 4, 't': 7, 'h': 1, 'l': 4, 'i': 6, 't': 3, 'c': 3, 'd': 3, 'l': 2, 'e': 10, 's': 4, 'h': 1, 'i': 2, 'n': 5, 'e': 7, 's': 1, 'g': 2, 'o': 4, 'd': 2, ':': 1, 'i': 2, 'n': 2, 'a': 1}
```"
"page_content='322 Dictionaries
s = ""How far that little candle throws its beams! "" \
""So shines a good deed in a naughty world.""
d = {}
for char in s.lower():
try:
d[char] += 1
except KeyError:
d[char] = 1
We start with an empty dictionary. Then for every character in the
string, we try to increment the value associated with the dictionary key.
If we get aKeyError, this means we haven’t seen that character yet, and
so we add a new key to the dictionary with a value of one. After this
code has run, the dictionary,d, is as follows:
{'h': 5, 'o': 6, 'w': 3, ' ': 16, 'f': 1, 'a': 7, 'r': 3,
't': 7, 'l': 4, 'i': 4, 'e': 6, 'c': 1, 'n': 4, 'd': 5,
's': 6, 'b': 1, 'm': 1, '!': 1, 'g': 2, 'u': 1, 'y': 1,
'.': 1}
So we have five ‘h’, six ‘o’, three ‘w’, and so on.
We could write a function that reports how many of a given character
appears in the string like this:
def get_count(char, d):
try:
return d[char]
except KeyError:
return 0
This function returns the count ifchar is ind or zero otherwise.
16.6 Exceptions
KeyError
If you try to read or pop or delete a key from a dictionary which does
not exist, aKeyError is raised. This is similar to theIndexError you’ve
seen in the cases of lists and tuples.
If you encounter aKeyError it means the specified key does not exist
in the dictionary.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 336}","# Python code example
```python
s = ""How far that little candle throws its beams! "" \
""So shines a good deed in a naughty world.""
d = {}
for char in s.lower():
    try:
        d[char] += 1
    except KeyError:
        d[char] = 1
```

### Dictionaries

We start with an empty dictionary. Then for every character in the
string, we try to increment the value associated with the dictionary key.
If we get a KeyError, this means we haven’t seen that character yet, and
so we add a new key to the dictionary with a value of one. After this
code has run, the dictionary, d, is as follows:

```
{'h': 5, 'o': 6, 'w': 3, ' ': 16, 'f': 1, 'a': 7, 'r': 3,
't': 7, 'l': 4, 'i': 4, 'e': 6, 'c': 1, 'n': 4, 'd': 5,
's': 6, 'b': 1, 'm': 1, '!': 1, 'g': 2, 'u': 1, 'y': 1,
'.': 1}
```

So we have five ‘h’, six ‘o’, three ‘w’, and so on.

We could write a function that reports how many of a given character
appears in the string like this:

```python
def get_count(char, d):
    try:
        return d[char]
    except KeyError:
        return 0
```

This function returns the count if char is in d or zero otherwise.

### Exceptions

#### KeyError

If you try to read or pop or delete a key from a dictionary which does
not exist, a KeyError is raised. This is similar to the IndexError you’ve
seen in the cases of lists and tuples.

If you encounter a KeyError it means the specified key does not exist
in the dictionary."
"page_content='Exercises 323
>>> furniture = {'living room': ['armchair', 'sofa', 'table'],
... 'bedroom': ['bed', 'nightstand', 'dresser'],
... 'office': ['desk', 'chair', 'cabinet']}
>>> furniture['kitchen']
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
KeyError: 'kitchen'
TypeError
If you try to add to a dictionary a key which is not hashable, Python
will raise a type error:
>>> d = {[1, 2, 3]: 'cheese'}
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unhashable type: 'list'
Unlike IndexError which is almost always due to a programming
error—and thus we do not wish to handle such exceptions—there are
cases where we would wish to handleKeyError should it be raised. This
will depend on context.
16.7 Exercises
Exercise 01
Create a dictionary for the following data:
Student NetID Major Courses
Porcupine, Egbert eporcupi CS CS1210, CS1080,
MATH2055, ANTH1100
Pickle, Edwina epickle BIOL BIOL1450, BIOL1070,
MATH2248, CHEM1150
Quux, Winston wquux ARTS ARTS2100, ARTS2750,
CS1210, ARTH1990
Garply, Mephista mgarply ENSC ENSC2300, GEOG1170,
FS2020, STAT2870
a. What do you think should serve as keys for the dictionary?
b. Should you use a nested dictionary?
c .What are the types for student, netid, major, and courses?' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 337}","## Exercises

### 323

```python
furniture = {'living room': ['armchair', 'sofa', 'table'],
... 'bedroom': ['bed', 'nightstand', 'dresser'],
... 'office': ['desk', 'chair', 'cabinet']}
```

>>> furniture['kitchen']
```
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
KeyError: 'kitchen'
```

### TypeError

If you try to add to a dictionary a key which is not hashable, Python
will raise a type error:

```python
d = {[1, 2, 3]: 'cheese'}
```
```
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
TypeError: unhashable type: 'list'
```

Unlike IndexError which is almost always due to a programming
error—and thus we do not wish to handle such exceptions—there are
cases where we would wish to handle KeyError should it be raised. This
will depend on context.

### 16.7 Exercises

#### Exercise 01

Create a dictionary for the following data:

|Student|NetID|Major|Courses|
|:---:|:---:|:---:|:---:|
|Porcupine, Egbert|eporcupi|CS|CS1210, CS1080, MATH2055, ANTH1100|
|Pickle, Edwina|epickle|BIOL|BIOL1450, BIOL1070, MATH2248, CHEM1150|
|Quux, Winston|wquux|ARTS|ARTS2100, ARTS2750, CS1210, ARTH1990|
|Garply, Mephista|mgarply|ENSC|ENSC2300, GEOG1170, FS2020, STAT2870|

**a.** What do you think should serve as keys for the dictionary?

**Answer:**
The NetID should serve as the keys for the dictionary.

**b.** Should you use a nested dictionary?

**Answer:**
No, a nested dictionary is not necessary in this case.

**c.** What are the types for student, netid, major, and courses?'

**Answer:**
* Student: string
* NetID: string
* Major: string
* Courses: string (comma-separated list)"
"page_content='324 Dictionaries
Exercise 02
Now that you’ve created the dictionary in Exercise 01, write queries for
the following. Aquery retrieves selected data from some data structure.
Here the data structure is the dictionary created in exercise 01. Some
queries may be one-liners. Some queries may require a loop.
1. Get Winston Quux’s major.
2. If you used NetID as a key, then write a query to get the name
associated with the NetID epickle. If you used something else as a
key, then write a query to get Edwina Pickle’s NetID.
3. Construct a list of all students taking CS1210.
Exercise 03
Dictionary keys must be unique. We cannot have duplicate keys in a
dictionary.
What do you think happens if we were to enter this into the Python
shell?
d = {'foo': 'bar', 'foo': 'baz'}
What do you think is the value ofd? Guess first, then check!
Exercise 04
Create this dictionary:
d = {'foo': 'bar'}
Now passd as an argument to a function which has a single formal
parameter, d_ Within the function modify the dictionary (mutate it), but
return None (how you modify it is up to you). What happens tod in the
outer scope?
Note: Don’t assign a new value tod_. Just mutate it by adding a key,
removing a key, changing a value,etc.
Exercise 05
Write a function that takes a string as an argument and returns a dic-
tionary containing the number of occurrences of each character in the
string.
Exercise 06
a. Write a function that takes an arbitrary dictionary and returns the
keys of the dictionary as a list.
b. Write a function that takes an arbitrary dictionary and returns the
values of the dictionary as a list.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 338}","**Formatting Instructions:**

* **Content Structuring:**
    * Identify key sections and organize them under appropriate headings and subheadings.
    * Ensure logical flow and clarity in the content.
* **Metadata Inclusion:**
    * Include all metadata such as page numbers, line numbers, and source names as provided.
    * Clearly indicate the metadata at the beginning or in relevant sections.
* **Code Formatting:**
    * If there is any code, provide it with proper syntax highlighting and enclose it within triple backticks.
    * Mention the programming language before the triple backticks.

    Example:
    ```python
    # Python code example
    print(""Hello, World!"")
    
* **Give difference in tabular format if possible**
* **Include examples clearly if provided**
* **Do not generate any content by yourself just format provided content also keep answers in brief do not cut short it just put it full content as it is without changing anything**
* **If content is of 1000 words give all 1000 words do not cut short it strictly follow this rule no content or should be modified give exact same length content as provided**

**Content:**

### Dictionaries
**Exercise 02**

**Queries:**

1. Get Winston Quux’s major.
2. If you used NetID as a key, then write a query to get the name associated with the NetID epickle. If you used something else as a key, then write a query to get Edwina Pickle’s NetID.
3. Construct a list of all students taking CS1210.

**Exercise 03**

**Q&A:**

* **Q:** What do you think happens if we were to enter this into the Python shell?
```python
d = {'foo': 'bar', 'foo': 'baz'}
```
* **A:** d will have the value {'foo': 'baz'}.

**Exercise 04**

**Q&A:**

* **Q:** What happens to d in the outer scope?
* **A:** d will be modified in the function, but since None is returned, the value of d in the outer scope will not change.

**Exercise 05**

**Task:**

Write a function that takes a string as an argument and returns a dictionary containing the number of occurrences of each character in the string.

**Exercise 06**

**Tasks:**

a. Write a function that takes an arbitrary dictionary and returns the keys of the dictionary as a list.
b. Write a function that takes an arbitrary dictionary and returns the values of the dictionary as a list.

### Metadata
**Source:** C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
**Page:** 338"
"page_content='Chapter 17
Graphs
We have looked at thedictionary data structure, which associateskeys
with values, and we’ve looked at some examples and use cases. Now
that we understand dictionaries, we’re going to dive intographs. Graphs
are a collection of vertices (nodes) connected by edges, that represent
relationships between the vertices (nodes). We’ll see that a dictionary
can be used to represent a graph.
Learning objectives
• You will learn some of the terms associated with graphs.
• You will learn how to represent data using a graph.
• You will learn about searching a graph using breadth-first search.
T erms introduced
• graph
• vertices (nodes)
• edge
• neighbor (common edge)
• adjacent
• breadth-first search
17.1 Introduction to graphs
Graphs are a very versatile data structure. They can be used to represent
game states, positions on a map with routes, people in a social network,
and so on. Here we will consider graphs that represent positions on a
map with routes and that represent friendships in a social network.
Let’s start with maps. Consider a minimal example of two towns in
Michigan, Ann Arbor and Ypsilanti.
325' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 339}","### Chapter 17: Graphs

**Metadata:**  
* Page Number: 339
* Source: `C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf`

### 17.1 Introduction to Graphs

**Introduction:**

Graphs are a versatile data structure representing relationships between elements called vertices (nodes) connected by edges. They can model a variety of real-world systems, such as game states, maps, and social networks.

### 17.2 Key Concepts in Graphs

**Terms Introduced:**

* **Graph:** A collection of vertices connected by edges.
* **Vertex (Node):** A point within a graph representing an entity.
* **Edge:** A connection between two vertices.
* **Neighbor (Common Edge):** A vertex connected to another vertex by an edge.
* **Adjacent:** Two vertices connected by an edge.
* **Breadth-First Search:** A graph searching algorithm that starts at a source vertex and traverses level by level, visiting all neighbors of the current vertex before moving to the next level.

### 17.3 Types of Graphs

**Categories:**

* **Directed Graphs:** Edges have a direction, representing a one-way relationship.
* **Undirected Graphs:** Edges have no direction, representing a mutual relationship.

### 17.4 Representing Graphs with Dictionaries

**Example:**

A dictionary can represent a graph, with vertices as keys and edges as values. The values can be a list of neighbors for each vertex.

```python
graph = {
    ""Ann Arbor"": [""Ypsilanti""],
    ""Ypsilanti"": [""Ann Arbor""]
}
```

### 17.5 Searching Graphs with Breadth-First Search

**Algorithm:**

1. Create a queue and enqueue the source vertex.
2. While the queue is not empty:
    * Dequeue the current vertex.
    * Visit the current vertex.
    * For each neighbor of the current vertex:
        * If the neighbor has not been visited:
            * Enqueue the neighbor.

**Example:**

```python
def breadth_first_search(graph, start):
    queue = [start]
    visited = set()

    while queue:
        vertex = queue.pop(0)

        if vertex not in visited:
            visited.add(vertex)
            print(vertex)
            for neighbor in graph[vertex]:
                if neighbor not in visited:
                    queue.append(neighbor)
```"
"page_content='326 Graphs
Here, in the language of graphs, we have two vertices (a.k.a., nodes)
representingthetowns,AnnArborandYpsilanti,andanedgeconnecting
the vertices, indicating that a route exists between them. We can travel
along this route from Ann Arbor to Ypsilanti, and from Ypsilanti to
Ann Arbor. Notice the symmetry. This is because the edge between Ann
Arbor and Ypsilanti isundirected, which is reasonable, since the highway
that connects them allows traﬀic in both directions.
1
We refer to vertices which share a common edge asneighbors. We
also refer to vertices which share a common edge asadjacent. So in the
example above, Ann Arbor and Ypsilanti are neighbors. Ann Arbor is
adjacent to Ypsilanti, and Ypsilanti is adjacent to Ann Arbor.
Here’s a little more elaborate example:
In this example, Burlington is adjacent to St Albans, Montpelier and
Middlebury. Rutland is adjacent to Middlebury and Bennington. (Yes,
we’re leaving out a lot of detail for simplicity’s sake.)
So the question arises: how do we represent a graph in our code?
There are several ways, but what we’ll demonstrate here is what’s called
the adjacency list representation.
We’ll use a dictionary, with town names as keys and the values will
be a list of all towns adjacent to the key.
1 There are what are called directed edges, like one-way streets, but we’ll only
deal with undirected edges in this text.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 340}","**Graphs**

**Metadata:**

* Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
* Page: 340

**Content:**

**Graphs**

In graph theory, a graph is a structure made up of vertices (also known as nodes) and edges. Vertices represent entities, while edges represent connections or relationships between those entities.

**Representation of Graphs**

There are various ways to represent graphs in code. One common representation is the adjacency list, which uses a dictionary to store the graph structure. In an adjacency list representation:

* Dictionary keys represent vertices.
* Dictionary values are lists of adjacent vertices (vertices connected by an edge).

**Example:**

Consider the graph representing towns connected by roads:

```
Ann Arbor --Ypsilanti
/         \
/           \
St Albans -- Burlington -- Middlebury -- Rutland -- Bennington
```

**Adjacency List Representation:**

```python
graph = {
    'Ann Arbor': ['Ypsilanti'],
    'Ypsilanti': ['Ann Arbor'],
    'St Albans': ['Burlington'],
    'Burlington': ['St Albans', 'Middlebury'],
    'Middlebury': ['Burlington', 'Rutland'],
    'Rutland': ['Middlebury', 'Bennington'],
    'Bennington': ['Rutland'],
}
```

In this representation, the key 'Ann Arbor' corresponds to the vertex 'Ann Arbor', and its value is a list of adjacent vertices, which is ['Ypsilanti']. Similarly, the key 'Ypsilanti' corresponds to the vertex 'Ypsilanti', and its value is a list of adjacent vertices, which is ['Ann Arbor']."
"page_content='Searching a graph: breadth-first search 327
For example, Montpelier is adjacent to St Johnsbury, White River
Junction and Burlington, so the dictionary entry for Montpelier would
look like this:
ROUTES = {'Montpelier': ['Burlington', 'White River Junction',
'St Johnsbury']}
A complete representation of adjacencies, given the map above is:
ROUTES = {
'Burlington': ['St Albans', 'Montpelier', 'Middlebury'],
'Montpelier': ['Burlington', 'White River Junction',
'St Johnsbury'],
'White River Junction': ['Montpelier', 'Brattleboro',
'St Johnsbury'],
'Brattleboro': ['White River Junction'],
'Newport': ['St Johnsbury'],
'St Albans': ['Burlington', 'Swanton'],
'St Johnsbury': ['Montpelier', 'Newport',
'White River Junction'],
'Swanton': ['St Albans'],
'Middlebury': ['Burlington', 'Rutland'],
'Rutland': ['Middlebury', 'Bennington'],
'Bennington': ['Rutland']
}
Notice that Montpelier, St Johnsbury, and White River Junction are
all neighbors with each other. This is called acycle. If a graph doesn’t
haveanycycles, it is called anacyclic graph. Similarly,if a graph contains
at least one cycle, then it is called acyclic graph. So, this is a cyclic graph.
17.2 Searching a graph: breadth-first search
It is often the case that we wish to search such a structure. A common
approach is to use what is called breadth-first search (BFS). Here’s how
it works (in the current context):
We keep a list of towns that we’ve visited, and we keep a queue of
towns yet to visit. Both the list of towns and the queue are of typelist.
We choose a starting point (here it doesn’t matter which one), and we
add it to the list of visited towns, and to the queue. This is how we begin.
Then, in a while loop, as long as there are elements in the queue:
• pop a town from the front of the queue
• for each neighboring town, if we haven’t already visited the town:
– we append the neighboring town to the list of visited towns
– we append the neighboring town to the back of the queue
At some point, the queue is exhausted (once we’ve popped the last
one off), and we only add unvisited towns to the queue. So this algorithm
will terminate.' metadata={'source': 'C:\\Users\\adity\\Downloads\\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf', 'page': 341}","### 17.2 Searching a graph: breadth-first search

**Metadata**
- Source: C:\Users\adity\Downloads\An Introduction to Programming and Computer Science with Python, Clayton Cafiero.pdf
- Page: 341

**Content**

Breadth-first search (BFS) is a common approach to searching a graph. Here's how it works:

1. Initialize two lists: one to store the visited towns, and another (a queue) to store the towns yet to visit.
2. Choose a starting point and add it to both the visited list and the queue.
3. Enter a while loop that continues as long as there are elements in the queue:
    - Pop a town from the front of the queue.
    - For each neighboring town, if it has not been visited:
        - Append the neighboring town to the visited list.
        - Append the neighboring town to the back of the queue.
4. Once the queue is exhausted, the algorithm terminates.

**Example**

Consider the following graph:

```
ROUTES = {
'Burlington': ['St Albans', 'Montpelier', 'Middlebury'],
'Montpelier': ['Burlington', 'White River Junction', 'St Johnsbury'],
'White River Junction': ['Montpelier', 'Brattleboro', 'St Johnsbury'],
'Brattleboro': ['White River Junction'],
'Newport': ['St Johnsbury'],
'St Albans': ['Burlington', 'Swanton'],
'St Johnsbury': ['Montpelier', 'Newport', 'White River Junction'],
'Swanton': ['St Albans'],
'Middlebury': ['Burlington', 'Rutland'],
'Rutland': ['Middlebury', 'Bennington'],
'Bennington': ['Rutland']
}
```

Starting from Burlington, a BFS traversal would visit the towns in the following order:

1. Burlington
2. St Albans
3. Montpelier
4. Middlebury
5. White River Junction
6. Swanton
7. St Johnsbury
8. Newport
9. Brattleboro
10. Rutland
11. Bennington

**Difference between BFS and DFS**

| Feature | Breadth-First Search (BFS) | Depth-First Search (DFS) |
|---|---|---|
| Order of traversal | Visits all the nodes at a given level before moving to the next level | Visits all the nodes at a given depth before moving to the next depth |
| Data structure used | Queue | Stack |
| Time complexity | O(V+E), where V is the number of vertices and E is the number of edges | O(V+E), where V is the number of vertices and E is the number of edges |
| Space complexity | O(V), where V is the number of vertices | O(V), where V is the number of vertices |
| Use cases | Finding the shortest path between two nodes, finding connected components | Detecting cycles, finding topological order |"
